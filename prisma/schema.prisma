// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  walletAddress String      @unique
  username      String      @unique
  portfolio     Portfolio?
  positions     Position[]
  trades        Trade[]
  achievements  Achievement[]
  tournaments   TournamentParticipant[]
  totalXp       Int         @default(0)
  currentLevel  Int         @default(1)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Achievement {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  name        String
  description String
  unlockedAt  DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Portfolio {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  balance   Float    @default(10000)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Position {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  symbol      String
  side        String
  size        Float
  entryPrice  Float
  exitPrice   Float?
  leverage    Int       @default(1)
  marginUsed  Float
  stopLoss    Float?
  takeProfit  Float?
  status      String    @default("open")
  pnl         Float?
  openedAt    DateTime  @default(now())
  closedAt    DateTime?
  trades      Trade[]
  updatedAt   DateTime  @updatedAt
}

model Trade {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  positionId  String    @db.ObjectId
  position    Position  @relation(fields: [positionId], references: [id])
  side        String
  size        Float
  entryPrice  Float
  exitPrice   Float
  leverage    Int
  pnl         Float
  openedAt    DateTime
  closedAt    DateTime
  updatedAt   DateTime  @updatedAt
}

model Tournament {
  id              String                @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String
  status          String                @default("upcoming") // 'upcoming' | 'ongoing' | 'completed'
  startDate       DateTime
  endDate         DateTime
  maxParticipants Int
  prizePool       String
  entryFee        String
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  rules           TournamentRule[]
  rewards         TournamentReward[]
  participants    TournamentParticipant[]
}

model TournamentRule {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  description   String
  tournament    Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId  String     @db.ObjectId
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([tournamentId])
}

model TournamentReward {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  position      String
  prize         String
  tournament    Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId  String     @db.ObjectId
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([tournamentId])
}

model TournamentParticipant {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String     @db.ObjectId
  tournament    Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId  String     @db.ObjectId
  registeredAt  DateTime   @default(now())
  score         Float?
  rank          Int?
  trades        Int        @default(0)
  profit        Float      @default(0)
  volume        Float      @default(0)
  winRate       Float      @default(0)

  @@unique([userId, tournamentId])
  @@index([userId])
  @@index([tournamentId])
}
