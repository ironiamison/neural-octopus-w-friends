"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/news/route";
exports.ids = ["app/api/news/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:fs");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:stream");

/***/ }),

/***/ "node:stream/web":
/*!**********************************!*\
  !*** external "node:stream/web" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("node:stream/web");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("worker_threads");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fnews%2Froute&page=%2Fapi%2Fnews%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fnews%2Froute.ts&appDir=%2FUsers%2Fjamison%2FDesktop%2Fneural-octopus%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fjamison%2FDesktop%2Fneural-octopus&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fnews%2Froute&page=%2Fapi%2Fnews%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fnews%2Froute.ts&appDir=%2FUsers%2Fjamison%2FDesktop%2Fneural-octopus%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fjamison%2FDesktop%2Fneural-octopus&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_jamison_Desktop_neural_octopus_app_api_news_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/news/route.ts */ \"(rsc)/./app/api/news/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/news/route\",\n        pathname: \"/api/news\",\n        filename: \"route\",\n        bundlePath: \"app/api/news/route\"\n    },\n    resolvedPagePath: \"/Users/jamison/Desktop/neural-octopus/app/api/news/route.ts\",\n    nextConfigOutput,\n    userland: _Users_jamison_Desktop_neural_octopus_app_api_news_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/news/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZuZXdzJTJGcm91dGUmcGFnZT0lMkZhcGklMkZuZXdzJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGbmV3cyUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmphbWlzb24lMkZEZXNrdG9wJTJGbmV1cmFsLW9jdG9wdXMlMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRlVzZXJzJTJGamFtaXNvbiUyRkRlc2t0b3AlMkZuZXVyYWwtb2N0b3B1cyZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUNXO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsdUdBQXVHO0FBQy9HO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDNko7O0FBRTdKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVtZS1wZXJwcy10cmFkaW5nLz8yNDJmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi9Vc2Vycy9qYW1pc29uL0Rlc2t0b3AvbmV1cmFsLW9jdG9wdXMvYXBwL2FwaS9uZXdzL3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9uZXdzL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvbmV3c1wiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvbmV3cy9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIi9Vc2Vycy9qYW1pc29uL0Rlc2t0b3AvbmV1cmFsLW9jdG9wdXMvYXBwL2FwaS9uZXdzL3JvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIGhlYWRlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL25ld3Mvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgaGVhZGVySG9va3MsIHN0YXRpY0dlbmVyYXRpb25CYWlsb3V0LCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fnews%2Froute&page=%2Fapi%2Fnews%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fnews%2Froute.ts&appDir=%2FUsers%2Fjamison%2FDesktop%2Fneural-octopus%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fjamison%2FDesktop%2Fneural-octopus&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/news/route.ts":
/*!*******************************!*\
  !*** ./app/api/news/route.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n\n\n// Initialize OpenAI for AI16Z integration\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n    apiKey: process.env.OPENAI_API_KEY\n});\n// API Keys\nconst NEWS_API_KEY = process.env.NEWS_API_KEY;\nconst NEWSAPI_KEY = process.env.NEWSAPI_KEY;\nconst CRYPTOCOMPARE_API_KEY = process.env.CRYPTOCOMPARE_API_KEY;\nconst COINGECKO_API_KEY = process.env.COINGECKO_API_KEY;\nconst MESSARI_API_KEY = process.env.MESSARI_API_KEY;\n// Define trusted news sources\nconst TRUSTED_SOURCES = [\n    \"cointelegraph.com\",\n    \"coindesk.com\",\n    \"decrypt.co\",\n    \"theblock.co\",\n    \"cryptoslate.com\",\n    \"bitcoinmagazine.com\",\n    \"cryptobriefing.com\",\n    \"beincrypto.com\",\n    \"cryptonews.com\",\n    \"blockworks.co\"\n];\n// Define specific categories and their search terms\nconst CATEGORIES = {\n    crypto: {\n        name: \"Crypto\",\n        terms: [\n            \"cryptocurrency\",\n            \"bitcoin\",\n            \"ethereum\",\n            \"crypto\",\n            \"trading\",\n            \"market\"\n        ]\n    },\n    defi: {\n        name: \"DeFi\",\n        terms: [\n            \"defi\",\n            \"yield\",\n            \"lending\",\n            \"amm\",\n            \"dao\",\n            \"staking\",\n            \"liquidity\"\n        ]\n    },\n    nfts: {\n        name: \"NFTs\",\n        terms: [\n            \"nft\",\n            \"collectibles\",\n            \"digital art\",\n            \"tokens\",\n            \"ownership\"\n        ]\n    },\n    blockchain: {\n        name: \"Blockchain\",\n        terms: [\n            \"blockchain\",\n            \"consensus\",\n            \"protocol\",\n            \"network\",\n            \"layer1\",\n            \"infrastructure\"\n        ]\n    },\n    metaverse: {\n        name: \"Metaverse\",\n        terms: [\n            \"metaverse\",\n            \"virtual reality\",\n            \"gaming\",\n            \"web3\",\n            \"virtual worlds\"\n        ]\n    }\n};\nfunction isValidImageUrl(url) {\n    if (!url) return false;\n    try {\n        new URL(url);\n        return true;\n    } catch  {\n        return false;\n    }\n}\nasync function fetchCryptoCompareNews(category) {\n    try {\n        const response = await fetch(`https://min-api.cryptocompare.com/data/v2/news/?lang=EN&categories=${category}&api_key=${CRYPTOCOMPARE_API_KEY}`);\n        if (!response.ok) return [];\n        const data = await response.json();\n        return data.Data.map((article)=>({\n                title: article.title,\n                description: article.body,\n                url: article.url,\n                publishedAt: new Date(article.published_on * 1000).toISOString(),\n                source: {\n                    name: article.source,\n                    url: new URL(article.url).hostname,\n                    logo: article.source_info?.img || `https://www.google.com/s2/favicons?domain=${new URL(article.url).hostname}&sz=128`\n                },\n                author: article.source,\n                imageUrl: article.imageurl\n            }));\n    } catch (error) {\n        console.error(\"Error fetching from CryptoCompare:\", error);\n        return [];\n    }\n}\nasync function fetchCoinGeckoNews(category) {\n    try {\n        const response = await fetch(`https://api.coingecko.com/api/v3/news?category=${category}&per_page=10&x_cg_api_key=${COINGECKO_API_KEY}`);\n        if (!response.ok) return [];\n        const data = await response.json();\n        return data.map((article)=>({\n                title: article.title,\n                description: article.description,\n                url: article.url,\n                publishedAt: article.created_at,\n                source: {\n                    name: article.author.name,\n                    url: new URL(article.url).hostname,\n                    logo: `https://www.google.com/s2/favicons?domain=${new URL(article.url).hostname}&sz=128`\n                },\n                author: article.author.name,\n                imageUrl: article.thumb_2x\n            }));\n    } catch (error) {\n        console.error(\"Error fetching from CoinGecko:\", error);\n        return [];\n    }\n}\nasync function fetchMessariNews(category) {\n    try {\n        const response = await fetch(`https://data.messari.io/api/v1/news?category=${category}`, {\n            headers: {\n                \"x-messari-api-key\": MESSARI_API_KEY\n            }\n        });\n        if (!response.ok) return [];\n        const data = await response.json();\n        return data.data.map((article)=>({\n                title: article.title,\n                description: article.content,\n                url: article.url,\n                publishedAt: article.published_at,\n                source: {\n                    name: article.author.name,\n                    url: new URL(article.url).hostname,\n                    logo: `https://www.google.com/s2/favicons?domain=${new URL(article.url).hostname}&sz=128`\n                },\n                author: article.author.name,\n                imageUrl: article.lead_image_url\n            }));\n    } catch (error) {\n        console.error(\"Error fetching from Messari:\", error);\n        return [];\n    }\n}\nasync function fetchNewsFromAPIs(category) {\n    const categoryConfig = CATEGORIES[category];\n    const searchTerms = categoryConfig ? categoryConfig.terms.join(\" OR \") : category;\n    let newsItems = [];\n    // Fetch from all sources in parallel\n    const [cryptoCompareNews, coinGeckoNews, messariNews, ...otherNews] = await Promise.all([\n        fetchCryptoCompareNews(category),\n        fetchCoinGeckoNews(category),\n        fetchMessariNews(category),\n        // Existing news sources\n        fetch(`https://newsapi.org/v2/everything?q=${searchTerms}+AND+(crypto OR blockchain OR defi OR nft)&domains=${TRUSTED_SOURCES.join(\",\")}&sortBy=publishedAt&language=en&pageSize=10`, {\n            headers: {\n                \"X-Api-Key\": NEWSAPI_KEY\n            }\n        }).then(async (response)=>{\n            if (!response.ok) return [];\n            const data = await response.json();\n            return data.articles.map((article)=>{\n                const domain = new URL(article.url).hostname;\n                return {\n                    title: article.title,\n                    description: article.description || \"\",\n                    url: article.url,\n                    publishedAt: article.publishedAt,\n                    source: {\n                        name: article.source.name,\n                        url: domain,\n                        logo: `https://www.google.com/s2/favicons?domain=${domain}&sz=128`\n                    },\n                    author: article.author || \"Staff Writer\",\n                    imageUrl: isValidImageUrl(article.urlToImage) ? article.urlToImage : null\n                };\n            });\n        }).catch(()=>[]),\n        fetch(`https://newsdata.io/api/1/news?apikey=${NEWS_API_KEY}&q=${searchTerms}+AND+(crypto OR blockchain OR defi OR nft)&language=en&size=10&domain=${TRUSTED_SOURCES.join(\",\")}`).then(async (response)=>{\n            if (!response.ok) return [];\n            const data = await response.json();\n            return data.results.map((article)=>{\n                const domain = new URL(article.link).hostname;\n                return {\n                    title: article.title,\n                    description: article.description || article.content || \"\",\n                    url: article.link,\n                    publishedAt: article.pubDate,\n                    source: {\n                        name: article.source_id,\n                        url: domain,\n                        logo: `https://www.google.com/s2/favicons?domain=${domain}&sz=128`\n                    },\n                    author: article.creator?.[0] || \"Staff Writer\",\n                    imageUrl: isValidImageUrl(article.image_url) ? article.image_url : null\n                };\n            });\n        }).catch(()=>[])\n    ]);\n    // Combine all news items\n    newsItems = [\n        ...cryptoCompareNews,\n        ...coinGeckoNews,\n        ...messariNews,\n        ...otherNews.flat()\n    ];\n    // Remove duplicates based on URL\n    const uniqueNews = Array.from(new Map(newsItems.map((item)=>[\n            item.url,\n            item\n        ])).values());\n    // Filter and sort news items\n    return uniqueNews.filter((item)=>item.title && item.description && !item.title.includes(\"404\") && !item.title.toLowerCase().includes(\"error\") && TRUSTED_SOURCES.some((domain)=>item.source.url.includes(domain))).sort((a, b)=>new Date(b.publishedAt).getTime() - new Date(a.publishedAt).getTime());\n}\n// Fallback analysis when OpenAI API fails\nfunction getFallbackAnalysis(item) {\n    // Enhanced fallback analysis with AI16Z perspective\n    const keywords = [\n        ...Object.values(CATEGORIES).flatMap((cat)=>cat.terms)\n    ];\n    const title = item.title.toLowerCase();\n    const description = item.description.toLowerCase();\n    const sentiment = determineSentiment(title + \" \" + description);\n    const categories = extractCategories(title + \" \" + description);\n    const tags = extractTags(title + \" \" + description);\n    // More sophisticated fallback analysis\n    const hasTechnicalTerms = /chart|pattern|support|resistance|trend|breakout/i.test(title + description);\n    const hasFundamentalTerms = /adoption|development|partnership|launch|update/i.test(title + description);\n    const hasMarketTerms = /price|market|trading|volume|volatility/i.test(title + description);\n    return {\n        sentiment,\n        impact: hasMarketTerms ? 0.8 : 0.5,\n        relevance: categories.length > 0 ? 0.7 : 0.4,\n        confidence: 0.6,\n        summary: item.description.slice(0, 200) + \"...\",\n        technicalFactors: {\n            trend: hasTechnicalTerms ? \"bullish\" : \"neutral\",\n            volatility: hasMarketTerms ? \"high\" : \"medium\",\n            momentum: hasTechnicalTerms ? 0.7 : 0.5\n        },\n        fundamentalFactors: {\n            adoption: hasFundamentalTerms ? 0.8 : 0.5,\n            innovation: hasFundamentalTerms ? 0.7 : 0.4,\n            regulation: /regulation|compliance|law/i.test(description) ? 0.9 : 0.5\n        },\n        categories,\n        timeframe: {\n            immediate: hasMarketTerms,\n            shortTerm: true,\n            longTerm: hasFundamentalTerms\n        },\n        tags,\n        marketImplications: [\n            hasMarketTerms ? \"Potential market volatility expected\" : \"Limited immediate market impact\",\n            hasTechnicalTerms ? \"Watch for technical breakouts\" : \"Monitor for pattern formation\",\n            hasFundamentalTerms ? \"Long-term growth potential\" : \"Short-term trading opportunity\"\n        ]\n    };\n}\n// In-memory cache for AI analysis results\nconst analysisCache = new Map();\nconst CACHE_DURATION = 30 * 60 * 1000; // 30 minutes\nasync function getCachedAnalysis(newsItem) {\n    const cacheKey = newsItem.url;\n    const cached = analysisCache.get(cacheKey);\n    if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {\n        return cached.analysis;\n    }\n    return null;\n}\nasync function setCachedAnalysis(newsItem, analysis) {\n    const cacheKey = newsItem.url;\n    analysisCache.set(cacheKey, {\n        analysis,\n        timestamp: Date.now()\n    });\n}\n// Rate limit and retry configuration\nconst RATE_LIMIT = {\n    maxRequests: 45,\n    windowMs: 60 * 1000,\n    retryAfter: 20 * 1000,\n    maxRetries: 3\n};\nlet requestCount = 0;\nlet windowStart = Date.now();\nasync function checkRateLimit() {\n    const now = Date.now();\n    if (now - windowStart >= RATE_LIMIT.windowMs) {\n        requestCount = 0;\n        windowStart = now;\n    }\n    if (requestCount >= RATE_LIMIT.maxRequests) {\n        throw new Error(\"Rate limit exceeded\");\n    }\n    requestCount++;\n}\n// Enhanced local analysis patterns\nconst MARKET_PATTERNS = {\n    bullish: [\n        \"surge\",\n        \"rally\",\n        \"breakout\",\n        \"outperform\",\n        \"upgrade\",\n        \"buy\",\n        \"accumulate\",\n        \"support\",\n        \"adoption\",\n        \"partnership\",\n        \"launch\",\n        \"milestone\",\n        \"growth\"\n    ],\n    bearish: [\n        \"crash\",\n        \"dump\",\n        \"sell-off\",\n        \"downgrade\",\n        \"sell\",\n        \"liquidation\",\n        \"resistance\",\n        \"hack\",\n        \"scam\",\n        \"ban\",\n        \"regulation\",\n        \"concern\",\n        \"risk\"\n    ],\n    technical: [\n        \"resistance\",\n        \"support\",\n        \"breakout\",\n        \"trend\",\n        \"volume\",\n        \"momentum\",\n        \"pattern\",\n        \"consolidation\",\n        \"volatility\",\n        \"indicator\",\n        \"chart\",\n        \"level\"\n    ],\n    fundamental: [\n        \"adoption\",\n        \"development\",\n        \"partnership\",\n        \"update\",\n        \"roadmap\",\n        \"milestone\",\n        \"integration\",\n        \"ecosystem\",\n        \"utility\",\n        \"governance\",\n        \"tokenomics\"\n    ]\n};\nasync function analyzeWithAI16Z(newsItem) {\n    try {\n        const cached = await getCachedAnalysis(newsItem);\n        if (cached) return cached;\n        const text = `${newsItem.title} ${newsItem.description}`.toLowerCase();\n        // Calculate pattern matches\n        const bullishCount = MARKET_PATTERNS.bullish.filter((term)=>text.includes(term)).length;\n        const bearishCount = MARKET_PATTERNS.bearish.filter((term)=>text.includes(term)).length;\n        const technicalCount = MARKET_PATTERNS.technical.filter((term)=>text.includes(term)).length;\n        const fundamentalCount = MARKET_PATTERNS.fundamental.filter((term)=>text.includes(term)).length;\n        // Determine sentiment and trend\n        const sentiment = bullishCount > bearishCount ? \"positive\" : bearishCount > bullishCount ? \"negative\" : \"neutral\";\n        const trend = bullishCount > bearishCount ? \"bullish\" : bearishCount > bullishCount ? \"bearish\" : \"neutral\";\n        // Calculate impact and relevance\n        const totalMatches = bullishCount + bearishCount + technicalCount + fundamentalCount;\n        const impact = Math.min(1, totalMatches / 10);\n        const relevance = Math.min(1, (technicalCount + fundamentalCount) / 8);\n        // Determine timeframe based on content\n        const hasImmediateTerms = /today|breaking|urgent|now|alert/i.test(text);\n        const hasLongTermTerms = /future|roadmap|planning|upcoming|vision/i.test(text);\n        const analysis = {\n            sentiment,\n            impact: impact * 10,\n            relevance: relevance * 10,\n            confidence: 0.8,\n            summary: newsItem.description.slice(0, 200) + \"...\",\n            technicalFactors: {\n                trend,\n                volatility: totalMatches > 8 ? \"high\" : totalMatches > 4 ? \"medium\" : \"low\",\n                momentum: (bullishCount - bearishCount + technicalCount) / 10\n            },\n            fundamentalFactors: {\n                adoption: fundamentalCount > 3 ? 0.8 : 0.5,\n                innovation: /upgrade|improve|develop|launch/i.test(text) ? 0.8 : 0.5,\n                regulation: /regulation|compliance|law|sec/i.test(text) ? 0.9 : 0.4\n            },\n            categories: extractCategories(text),\n            timeframe: {\n                immediate: hasImmediateTerms,\n                shortTerm: true,\n                longTerm: hasLongTermTerms\n            },\n            tags: extractTags(text),\n            marketImplications: generateMarketImplications(text, {\n                bullishCount,\n                bearishCount,\n                technicalCount,\n                fundamentalCount\n            })\n        };\n        await setCachedAnalysis(newsItem, analysis);\n        return analysis;\n    } catch (error) {\n        console.error(\"AI16Z Analysis Error:\", error);\n        return getFallbackAnalysis(newsItem);\n    }\n}\nfunction generateMarketImplications(text, counts) {\n    const implications = [];\n    const { bullishCount, bearishCount, technicalCount, fundamentalCount } = counts;\n    // Market sentiment implication\n    if (bullishCount > bearishCount) {\n        implications.push(\"Positive market sentiment could drive short-term price appreciation\");\n    } else if (bearishCount > bullishCount) {\n        implications.push(\"Negative market sentiment may lead to downward pressure\");\n    } else {\n        implications.push(\"Mixed market sentiment suggests range-bound trading\");\n    }\n    // Technical analysis implication\n    if (technicalCount > 2) {\n        implications.push(bullishCount > bearishCount ? \"Technical indicators suggest potential upward breakout\" : \"Technical patterns indicate possible trend reversal\");\n    }\n    // Fundamental analysis implication\n    if (fundamentalCount > 2) {\n        implications.push(\"Long-term fundamental factors support sustained growth potential\");\n    }\n    // Volume and volatility implication\n    if (/volume|trading|activity/i.test(text)) {\n        implications.push(\"Increased trading volume may lead to higher volatility\");\n    }\n    return implications;\n}\n// Helper functions for fallback analysis\nfunction determineSentiment(text) {\n    const positiveWords = [\n        \"surge\",\n        \"gain\",\n        \"rise\",\n        \"boost\",\n        \"growth\",\n        \"bullish\",\n        \"adoption\",\n        \"success\"\n    ];\n    const negativeWords = [\n        \"crash\",\n        \"fall\",\n        \"drop\",\n        \"decline\",\n        \"bearish\",\n        \"ban\",\n        \"hack\",\n        \"scam\"\n    ];\n    const lowerText = text.toLowerCase();\n    const positiveCount = positiveWords.filter((word)=>lowerText.includes(word)).length;\n    const negativeCount = negativeWords.filter((word)=>lowerText.includes(word)).length;\n    if (positiveCount > negativeCount) return \"positive\";\n    if (negativeCount > positiveCount) return \"negative\";\n    return \"neutral\";\n}\nfunction extractCategories(text) {\n    const categories = [];\n    const categoryKeywords = {\n        \"Crypto\": [\n            \"bitcoin\",\n            \"ethereum\",\n            \"crypto\",\n            \"blockchain\",\n            \"token\"\n        ],\n        \"DeFi\": [\n            \"defi\",\n            \"yield\",\n            \"lending\",\n            \"swap\",\n            \"liquidity\"\n        ],\n        \"NFTs\": [\n            \"nft\",\n            \"collectible\",\n            \"art\",\n            \"gaming\"\n        ],\n        \"Regulation\": [\n            \"sec\",\n            \"regulation\",\n            \"compliance\",\n            \"law\"\n        ],\n        \"Technology\": [\n            \"protocol\",\n            \"layer\",\n            \"scaling\",\n            \"network\"\n        ]\n    };\n    for (const [category, keywords] of Object.entries(categoryKeywords)){\n        if (keywords.some((keyword)=>text.toLowerCase().includes(keyword))) {\n            categories.push(category);\n        }\n    }\n    return categories.length > 0 ? categories : [\n        \"General\"\n    ];\n}\nfunction extractTags(text) {\n    const commonTags = [\n        \"crypto\",\n        \"blockchain\",\n        \"bitcoin\",\n        \"ethereum\",\n        \"defi\",\n        \"nft\",\n        \"regulation\"\n    ];\n    return commonTags.filter((tag)=>text.toLowerCase().includes(tag));\n}\nfunction parseAIResponse(response) {\n    const defaultAnalysis = {\n        sentiment: \"neutral\",\n        impact: 5,\n        relevance: 5,\n        confidence: 5,\n        summary: response.slice(0, 200) + \"...\",\n        technicalFactors: {\n            trend: \"neutral\",\n            volatility: \"medium\",\n            momentum: 5\n        },\n        fundamentalFactors: {\n            adoption: 5,\n            innovation: 5,\n            regulation: 5\n        },\n        categories: extractCategories(response),\n        timeframe: {\n            immediate: true,\n            shortTerm: true,\n            longTerm: false\n        },\n        tags: extractTags(response),\n        marketImplications: [\n            \"Market impact analysis temporarily unavailable\"\n        ]\n    };\n    try {\n        // Try to parse as JSON first\n        const parsed = JSON.parse(response);\n        if (typeof parsed === \"object\") {\n            return {\n                sentiment: parsed.sentiment || defaultAnalysis.sentiment,\n                impact: parsed.impact || defaultAnalysis.impact,\n                relevance: parsed.relevance || defaultAnalysis.relevance,\n                confidence: parsed.confidence || defaultAnalysis.confidence,\n                summary: parsed.summary || defaultAnalysis.summary,\n                technicalFactors: {\n                    trend: parsed.technicalFactors?.trend || defaultAnalysis.technicalFactors.trend,\n                    volatility: parsed.technicalFactors?.volatility || defaultAnalysis.technicalFactors.volatility,\n                    momentum: parsed.technicalFactors?.momentum || defaultAnalysis.technicalFactors.momentum\n                },\n                fundamentalFactors: {\n                    adoption: parsed.fundamentalFactors?.adoption || defaultAnalysis.fundamentalFactors.adoption,\n                    innovation: parsed.fundamentalFactors?.innovation || defaultAnalysis.fundamentalFactors.innovation,\n                    regulation: parsed.fundamentalFactors?.regulation || defaultAnalysis.fundamentalFactors.regulation\n                },\n                categories: Array.isArray(parsed.categories) ? parsed.categories : defaultAnalysis.categories,\n                timeframe: {\n                    immediate: parsed.timeframe?.immediate ?? defaultAnalysis.timeframe.immediate,\n                    shortTerm: parsed.timeframe?.shortTerm ?? defaultAnalysis.timeframe.shortTerm,\n                    longTerm: parsed.timeframe?.longTerm ?? defaultAnalysis.timeframe.longTerm\n                },\n                tags: Array.isArray(parsed.tags) ? parsed.tags : defaultAnalysis.tags,\n                marketImplications: Array.isArray(parsed.marketImplications) ? parsed.marketImplications : defaultAnalysis.marketImplications\n            };\n        }\n    } catch (error) {\n        // If JSON parsing fails, extract information from text\n        const lines = response.split(\"\\n\");\n        const summary = lines.find((line)=>line.toLowerCase().includes(\"summary\"))?.split(\":\")[1]?.trim();\n        return {\n            ...defaultAnalysis,\n            summary: summary || defaultAnalysis.summary,\n            sentiment: determineSentiment(response)\n        };\n    }\n    return defaultAnalysis;\n}\nfunction aggregateMarketTrends(newsItems) {\n    // Calculate overall sentiment\n    const sentiments = newsItems.map((item)=>({\n            sentiment: item.analysis.sentiment,\n            impact: item.analysis.impact,\n            confidence: item.analysis.confidence\n        }));\n    const weightedSentiments = sentiments.map((s)=>({\n            score: s.sentiment === \"positive\" ? 1 : s.sentiment === \"negative\" ? -1 : 0,\n            weight: s.impact * s.confidence / 100\n        }));\n    const sentimentScore = weightedSentiments.reduce((acc, curr)=>acc + curr.score * curr.weight, 0) / weightedSentiments.length;\n    // Extract dominant topics\n    const allTags = newsItems.flatMap((item)=>item.analysis.tags);\n    const tagCounts = allTags.reduce((acc, tag)=>{\n        acc[tag] = (acc[tag] || 0) + 1;\n        return acc;\n    }, {});\n    const dominantTopics = Object.entries(tagCounts).sort(([, a], [, b])=>b - a).slice(0, 5).map(([tag])=>tag);\n    // Calculate market momentum\n    const momentum = newsItems.reduce((acc, item)=>acc + item.analysis.technicalFactors.momentum, 0) / newsItems.length;\n    // Determine trending pairs\n    const trendingPairs = [\n        \"BTC/USD\",\n        \"ETH/USD\",\n        \"SOL/USD\"\n    ].filter(()=>Math.random() > 0.5); // Placeholder - replace with actual pair detection\n    // Calculate confidence score\n    const confidenceScore = newsItems.reduce((acc, item)=>acc + item.analysis.confidence, 0) / newsItems.length;\n    // Determine volume indicator\n    const volumeIndicator = momentum > 7 ? \"high\" : momentum > 4 ? \"medium\" : \"low\";\n    // Determine price action trends\n    const shortTermBullish = newsItems.filter((item)=>item.analysis.technicalFactors.trend === \"bullish\" && item.analysis.timeframe.immediate).length;\n    const shortTermBearish = newsItems.filter((item)=>item.analysis.technicalFactors.trend === \"bearish\" && item.analysis.timeframe.immediate).length;\n    const mediumTermBullish = newsItems.filter((item)=>item.analysis.technicalFactors.trend === \"bullish\" && item.analysis.timeframe.shortTerm).length;\n    const mediumTermBearish = newsItems.filter((item)=>item.analysis.technicalFactors.trend === \"bearish\" && item.analysis.timeframe.shortTerm).length;\n    return {\n        overallSentiment: sentimentScore > 0.3 ? \"positive\" : sentimentScore < -0.3 ? \"negative\" : \"neutral\",\n        sentimentScore: Number(sentimentScore.toFixed(2)),\n        dominantTopics,\n        trendingPairs,\n        marketMomentum: Number(momentum.toFixed(2)),\n        confidenceScore: Number(confidenceScore.toFixed(2)),\n        volumeIndicator,\n        priceAction: {\n            shortTerm: shortTermBullish > shortTermBearish ? \"bullish\" : shortTermBearish > shortTermBullish ? \"bearish\" : \"neutral\",\n            mediumTerm: mediumTermBullish > mediumTermBearish ? \"bullish\" : mediumTermBearish > mediumTermBullish ? \"bearish\" : \"neutral\"\n        }\n    };\n}\nfunction filterNews(newsItems, options) {\n    return newsItems.filter((item)=>{\n        // Time range filter\n        if (options.timeRange) {\n            const itemDate = new Date(item.publishedAt);\n            const now = new Date();\n            const hoursDiff = (now.getTime() - itemDate.getTime()) / (1000 * 60 * 60);\n            if (options.timeRange === \"hour\" && hoursDiff > 1) return false;\n            if (options.timeRange === \"day\" && hoursDiff > 24) return false;\n            if (options.timeRange === \"week\" && hoursDiff > 24 * 7) return false;\n            if (options.timeRange === \"month\" && hoursDiff > 24 * 30) return false;\n        }\n        // Sentiment filter\n        if (options.sentiment && options.sentiment !== \"all\") {\n            if (item.analysis.sentiment !== options.sentiment) return false;\n        }\n        // Impact filter\n        if (options.impact && options.impact !== \"all\") {\n            const impact = item.analysis.impact;\n            if (options.impact === \"high\" && impact < 7) return false;\n            if (options.impact === \"medium\" && (impact < 4 || impact > 6)) return false;\n            if (options.impact === \"low\" && impact > 3) return false;\n        }\n        // Source filter\n        if (options.source && options.source.length > 0) {\n            if (!options.source.some((s)=>item.source.url.includes(s))) return false;\n        }\n        // Topics filter\n        if (options.topics && options.topics.length > 0) {\n            if (!options.topics.some((topic)=>item.analysis.tags.includes(topic) || item.analysis.categories.includes(topic))) return false;\n        }\n        // Confidence filter\n        if (options.minConfidence !== undefined) {\n            if (item.analysis.confidence < options.minConfidence) return false;\n        }\n        return true;\n    });\n}\nfunction categorizeByTopic(newsItems) {\n    const topics = {};\n    newsItems.forEach((item)=>{\n        const itemTopics = new Set([\n            ...item.analysis.categories,\n            ...item.analysis.tags\n        ]);\n        itemTopics.forEach((topic)=>{\n            if (!topics[topic]) {\n                topics[topic] = [];\n            }\n            topics[topic].push(item);\n        });\n    });\n    // Sort each topic's news by impact and relevance\n    Object.keys(topics).forEach((topic)=>{\n        topics[topic].sort((a, b)=>b.analysis.impact * b.analysis.relevance - a.analysis.impact * a.analysis.relevance);\n    });\n    return topics;\n}\nasync function GET(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const category = searchParams.get(\"category\") || \"crypto\";\n        // Parse filter options from query params\n        const filterOptions = {\n            timeRange: searchParams.get(\"timeRange\") || undefined,\n            sentiment: searchParams.get(\"sentiment\") || undefined,\n            impact: searchParams.get(\"impact\") || undefined,\n            source: searchParams.get(\"source\")?.split(\",\") || undefined,\n            topics: searchParams.get(\"topics\")?.split(\",\") || undefined,\n            minConfidence: searchParams.get(\"minConfidence\") ? Number(searchParams.get(\"minConfidence\")) : undefined\n        };\n        const newsItems = await fetchNewsFromAPIs(category);\n        const analyzedNews = [];\n        for(let i = 0; i < newsItems.length; i += 2){\n            const batch = newsItems.slice(i, i + 2);\n            const batchResults = await Promise.all(batch.map(async (item)=>{\n                const analysis = await analyzeWithAI16Z(item);\n                return {\n                    ...item,\n                    analysis\n                };\n            }));\n            analyzedNews.push(...batchResults);\n            if (i + 2 < newsItems.length) {\n                await new Promise((resolve)=>setTimeout(resolve, 2000));\n            }\n        }\n        // Apply filters\n        const filteredNews = filterNews(analyzedNews, filterOptions);\n        // Calculate market trends from filtered news\n        const marketTrends = aggregateMarketTrends(filteredNews);\n        // Categorize news by topics\n        const newsByTopic = categorizeByTopic(filteredNews);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            success: true,\n            data: filteredNews,\n            meta: {\n                total: filteredNews.length,\n                usingFallback: requestCount >= RATE_LIMIT.maxRequests,\n                cooldownRemaining: requestCount >= RATE_LIMIT.maxRequests ? RATE_LIMIT.retryAfter : 0\n            },\n            marketTrends,\n            topics: Object.keys(newsByTopic).map((topic)=>({\n                    name: topic,\n                    count: newsByTopic[topic].length,\n                    topArticles: newsByTopic[topic].slice(0, 3)\n                }))\n        });\n    } catch (error) {\n        console.error(\"Error fetching news:\", error);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            success: false,\n            error: \"Failed to fetch news\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/news/route.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/formdata-node","vendor-chunks/openai","vendor-chunks/form-data-encoder","vendor-chunks/whatwg-url","vendor-chunks/agentkeepalive","vendor-chunks/tr46","vendor-chunks/web-streams-polyfill","vendor-chunks/node-fetch","vendor-chunks/webidl-conversions","vendor-chunks/ms","vendor-chunks/humanize-ms","vendor-chunks/event-target-shim","vendor-chunks/abort-controller"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fnews%2Froute&page=%2Fapi%2Fnews%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fnews%2Froute.ts&appDir=%2FUsers%2Fjamison%2FDesktop%2Fneural-octopus%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fjamison%2FDesktop%2Fneural-octopus&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();