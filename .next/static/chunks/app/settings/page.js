/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app/settings/page"],{

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Fjamison%2FDesktop%2Fneural-octopus%2Fapp%2Fsettings%2Fpage.tsx&server=false!":
/*!*****************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Fjamison%2FDesktop%2Fneural-octopus%2Fapp%2Fsettings%2Fpage.tsx&server=false! ***!
  \*****************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./app/settings/page.tsx */ \"(app-pages-browser)/./app/settings/page.tsx\"))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz0lMkZVc2VycyUyRmphbWlzb24lMkZEZXNrdG9wJTJGbmV1cmFsLW9jdG9wdXMlMkZhcHAlMkZzZXR0aW5ncyUyRnBhZ2UudHN4JnNlcnZlcj1mYWxzZSEiLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLz8zMTM5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiL1VzZXJzL2phbWlzb24vRGVza3RvcC9uZXVyYWwtb2N0b3B1cy9hcHAvc2V0dGluZ3MvcGFnZS50c3hcIikiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Fjamison%2FDesktop%2Fneural-octopus%2Fapp%2Fsettings%2Fpage.tsx&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.prisma/client/index-browser.js":
/*!******************************************************!*\
  !*** ./node_modules/.prisma/client/index-browser.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst { Decimal, objectEnumValues, makeStrictEnum, Public, getRuntime, skip } = __webpack_require__(/*! @prisma/client/runtime/index-browser.js */ \"(app-pages-browser)/./node_modules/@prisma/client/runtime/index-browser.js\");\nconst Prisma = {};\nexports.Prisma = Prisma;\nexports.$Enums = {};\n/**\n * Prisma Client JS version: 6.1.0\n * Query Engine version: 11f085a2012c0f4778414c8db2651556ee0ef959\n */ Prisma.prismaVersion = {\n    client: \"6.1.0\",\n    engine: \"11f085a2012c0f4778414c8db2651556ee0ef959\"\n};\nPrisma.PrismaClientKnownRequestError = ()=>{\n    const runtimeName = getRuntime().prettyName;\n    throw new Error(\"PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in \".concat(runtimeName, \").\\nIn case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report\"));\n};\nPrisma.PrismaClientUnknownRequestError = ()=>{\n    const runtimeName = getRuntime().prettyName;\n    throw new Error(\"PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in \".concat(runtimeName, \").\\nIn case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report\"));\n};\nPrisma.PrismaClientRustPanicError = ()=>{\n    const runtimeName = getRuntime().prettyName;\n    throw new Error(\"PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in \".concat(runtimeName, \").\\nIn case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report\"));\n};\nPrisma.PrismaClientInitializationError = ()=>{\n    const runtimeName = getRuntime().prettyName;\n    throw new Error(\"PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in \".concat(runtimeName, \").\\nIn case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report\"));\n};\nPrisma.PrismaClientValidationError = ()=>{\n    const runtimeName = getRuntime().prettyName;\n    throw new Error(\"PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in \".concat(runtimeName, \").\\nIn case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report\"));\n};\nPrisma.Decimal = Decimal;\n/**\n * Re-export of sql-template-tag\n */ Prisma.sql = ()=>{\n    const runtimeName = getRuntime().prettyName;\n    throw new Error(\"sqltag is unable to run in this browser environment, or has been bundled for the browser (running in \".concat(runtimeName, \").\\nIn case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report\"));\n};\nPrisma.empty = ()=>{\n    const runtimeName = getRuntime().prettyName;\n    throw new Error(\"empty is unable to run in this browser environment, or has been bundled for the browser (running in \".concat(runtimeName, \").\\nIn case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report\"));\n};\nPrisma.join = ()=>{\n    const runtimeName = getRuntime().prettyName;\n    throw new Error(\"join is unable to run in this browser environment, or has been bundled for the browser (running in \".concat(runtimeName, \").\\nIn case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report\"));\n};\nPrisma.raw = ()=>{\n    const runtimeName = getRuntime().prettyName;\n    throw new Error(\"raw is unable to run in this browser environment, or has been bundled for the browser (running in \".concat(runtimeName, \").\\nIn case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report\"));\n};\nPrisma.validator = Public.validator;\n/**\n* Extensions\n*/ Prisma.getExtensionContext = ()=>{\n    const runtimeName = getRuntime().prettyName;\n    throw new Error(\"Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in \".concat(runtimeName, \").\\nIn case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report\"));\n};\nPrisma.defineExtension = ()=>{\n    const runtimeName = getRuntime().prettyName;\n    throw new Error(\"Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in \".concat(runtimeName, \").\\nIn case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report\"));\n};\n/**\n * Shorthand utilities for JSON filtering\n */ Prisma.DbNull = objectEnumValues.instances.DbNull;\nPrisma.JsonNull = objectEnumValues.instances.JsonNull;\nPrisma.AnyNull = objectEnumValues.instances.AnyNull;\nPrisma.NullTypes = {\n    DbNull: objectEnumValues.classes.DbNull,\n    JsonNull: objectEnumValues.classes.JsonNull,\n    AnyNull: objectEnumValues.classes.AnyNull\n};\n/**\n * Enums\n */ exports.Prisma.UserScalarFieldEnum = {\n    id: \"id\",\n    walletAddress: \"walletAddress\",\n    username: \"username\",\n    name: \"name\",\n    avatar: \"avatar\",\n    bio: \"bio\",\n    currentLevel: \"currentLevel\",\n    totalXp: \"totalXp\",\n    settings: \"settings\",\n    createdAt: \"createdAt\",\n    updatedAt: \"updatedAt\",\n    totalTrades: \"totalTrades\",\n    winningTrades: \"winningTrades\",\n    totalPnl: \"totalPnl\",\n    bestTrade: \"bestTrade\",\n    worstTrade: \"worstTrade\",\n    winRate: \"winRate\",\n    avgProfitPerTrade: \"avgProfitPerTrade\",\n    avgLossPerTrade: \"avgLossPerTrade\",\n    longestWinStreak: \"longestWinStreak\",\n    currentWinStreak: \"currentWinStreak\",\n    lessonsCompleted: \"lessonsCompleted\",\n    totalLessonsCompleted: \"totalLessonsCompleted\",\n    lastLessonCompleted: \"lastLessonCompleted\"\n};\nexports.Prisma.PortfolioScalarFieldEnum = {\n    id: \"id\",\n    userId: \"userId\",\n    balance: \"balance\",\n    createdAt: \"createdAt\",\n    updatedAt: \"updatedAt\"\n};\nexports.Prisma.PositionScalarFieldEnum = {\n    id: \"id\",\n    userId: \"userId\",\n    symbol: \"symbol\",\n    side: \"side\",\n    size: \"size\",\n    leverage: \"leverage\",\n    entryPrice: \"entryPrice\",\n    markPrice: \"markPrice\",\n    liquidationPrice: \"liquidationPrice\",\n    unrealizedPnl: \"unrealizedPnl\",\n    marginUsed: \"marginUsed\",\n    openedAt: \"openedAt\",\n    updatedAt: \"updatedAt\"\n};\nexports.Prisma.TradeScalarFieldEnum = {\n    id: \"id\",\n    userId: \"userId\",\n    symbol: \"symbol\",\n    type: \"type\",\n    side: \"side\",\n    size: \"size\",\n    leverage: \"leverage\",\n    entryPrice: \"entryPrice\",\n    exitPrice: \"exitPrice\",\n    takeProfit: \"takeProfit\",\n    stopLoss: \"stopLoss\",\n    pnl: \"pnl\",\n    status: \"status\",\n    openedAt: \"openedAt\",\n    closedAt: \"closedAt\",\n    updatedAt: \"updatedAt\"\n};\nexports.Prisma.AchievementScalarFieldEnum = {\n    id: \"id\",\n    userId: \"userId\",\n    type: \"type\",\n    name: \"name\",\n    description: \"description\",\n    xpReward: \"xpReward\",\n    unlockedAt: \"unlockedAt\",\n    updatedAt: \"updatedAt\"\n};\nexports.Prisma.LessonProgressScalarFieldEnum = {\n    id: \"id\",\n    userId: \"userId\",\n    lessonId: \"lessonId\",\n    completed: \"completed\",\n    score: \"score\",\n    timeSpent: \"timeSpent\",\n    startedAt: \"startedAt\",\n    completedAt: \"completedAt\",\n    updatedAt: \"updatedAt\"\n};\nexports.Prisma.SortOrder = {\n    asc: \"asc\",\n    desc: \"desc\"\n};\nexports.Prisma.QueryMode = {\n    default: \"default\",\n    insensitive: \"insensitive\"\n};\nexports.Prisma.ModelName = {\n    User: \"User\",\n    Portfolio: \"Portfolio\",\n    Position: \"Position\",\n    Trade: \"Trade\",\n    Achievement: \"Achievement\",\n    LessonProgress: \"LessonProgress\"\n};\n/**\n * This is a stub Prisma Client that will error at runtime if called.\n */ class PrismaClient {\n    constructor(){\n        return new Proxy(this, {\n            get (target, prop) {\n                let message;\n                const runtime = getRuntime();\n                if (runtime.isEdge) {\n                    message = \"PrismaClient is not configured to run in \".concat(runtime.prettyName, \". In order to run Prisma Client on edge runtime, either:\\n- Use Prisma Accelerate: https://pris.ly/d/accelerate\\n- Use Driver Adapters: https://pris.ly/d/driver-adapters\\n\");\n                } else {\n                    message = \"PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `\" + runtime.prettyName + \"`).\";\n                }\n                message += \"\\nIf this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report\";\n                throw new Error(message);\n            }\n        });\n    }\n}\nexports.PrismaClient = PrismaClient;\nObject.assign(exports, Prisma);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.prisma/client/index-browser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ isPropValid; }\n/* harmony export */ });\n/* harmony import */ var _emotion_memoize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/memoize */ \"(app-pages-browser)/./node_modules/@emotion/memoize/dist/emotion-memoize.esm.js\");\n\n// eslint-disable-next-line no-undef\nvar reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|disableRemotePlayback|download|draggable|encType|enterKeyHint|fetchpriority|fetchPriority|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23\nvar isPropValid = /* #__PURE__ */ (0,_emotion_memoize__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(function(prop) {\n    return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9pcy1wcm9wLXZhbGlkL2Rpc3QvZW1vdGlvbi1pcy1wcm9wLXZhbGlkLmVzbS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF1QztBQUV2QyxvQ0FBb0M7QUFDcEMsSUFBSUMsa0JBQWtCLHVnSUFBdWdJLHFEQUFxRDtBQUVsbEksSUFBSUMsY0FBYyxhQUFhLEdBQUVGLDREQUFPQSxDQUFDLFNBQVVHLElBQUk7SUFDckQsT0FBT0YsZ0JBQWdCRyxJQUFJLENBQUNELFNBQVNBLEtBQUtFLFVBQVUsQ0FBQyxPQUFPLE9BRXpERixLQUFLRSxVQUFVLENBQUMsT0FBTyxPQUV2QkYsS0FBS0UsVUFBVSxDQUFDLEtBQUs7QUFDMUI7QUFJa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL2lzLXByb3AtdmFsaWQvZGlzdC9lbW90aW9uLWlzLXByb3AtdmFsaWQuZXNtLmpzP2RjNzkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1lbW9pemUgZnJvbSAnQGVtb3Rpb24vbWVtb2l6ZSc7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxudmFyIHJlYWN0UHJvcHNSZWdleCA9IC9eKChjaGlsZHJlbnxkYW5nZXJvdXNseVNldElubmVySFRNTHxrZXl8cmVmfGF1dG9Gb2N1c3xkZWZhdWx0VmFsdWV8ZGVmYXVsdENoZWNrZWR8aW5uZXJIVE1MfHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ3xzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmd8dmFsdWVMaW5rfGFiYnJ8YWNjZXB0fGFjY2VwdENoYXJzZXR8YWNjZXNzS2V5fGFjdGlvbnxhbGxvd3xhbGxvd1VzZXJNZWRpYXxhbGxvd1BheW1lbnRSZXF1ZXN0fGFsbG93RnVsbFNjcmVlbnxhbGxvd1RyYW5zcGFyZW5jeXxhbHR8YXN5bmN8YXV0b0NvbXBsZXRlfGF1dG9QbGF5fGNhcHR1cmV8Y2VsbFBhZGRpbmd8Y2VsbFNwYWNpbmd8Y2hhbGxlbmdlfGNoYXJTZXR8Y2hlY2tlZHxjaXRlfGNsYXNzSUR8Y2xhc3NOYW1lfGNvbHN8Y29sU3Bhbnxjb250ZW50fGNvbnRlbnRFZGl0YWJsZXxjb250ZXh0TWVudXxjb250cm9sc3xjb250cm9sc0xpc3R8Y29vcmRzfGNyb3NzT3JpZ2lufGRhdGF8ZGF0ZVRpbWV8ZGVjb2Rpbmd8ZGVmYXVsdHxkZWZlcnxkaXJ8ZGlzYWJsZWR8ZGlzYWJsZVBpY3R1cmVJblBpY3R1cmV8ZGlzYWJsZVJlbW90ZVBsYXliYWNrfGRvd25sb2FkfGRyYWdnYWJsZXxlbmNUeXBlfGVudGVyS2V5SGludHxmZXRjaHByaW9yaXR5fGZldGNoUHJpb3JpdHl8Zm9ybXxmb3JtQWN0aW9ufGZvcm1FbmNUeXBlfGZvcm1NZXRob2R8Zm9ybU5vVmFsaWRhdGV8Zm9ybVRhcmdldHxmcmFtZUJvcmRlcnxoZWFkZXJzfGhlaWdodHxoaWRkZW58aGlnaHxocmVmfGhyZWZMYW5nfGh0bWxGb3J8aHR0cEVxdWl2fGlkfGlucHV0TW9kZXxpbnRlZ3JpdHl8aXN8a2V5UGFyYW1zfGtleVR5cGV8a2luZHxsYWJlbHxsYW5nfGxpc3R8bG9hZGluZ3xsb29wfGxvd3xtYXJnaW5IZWlnaHR8bWFyZ2luV2lkdGh8bWF4fG1heExlbmd0aHxtZWRpYXxtZWRpYUdyb3VwfG1ldGhvZHxtaW58bWluTGVuZ3RofG11bHRpcGxlfG11dGVkfG5hbWV8bm9uY2V8bm9WYWxpZGF0ZXxvcGVufG9wdGltdW18cGF0dGVybnxwbGFjZWhvbGRlcnxwbGF5c0lubGluZXxwb3N0ZXJ8cHJlbG9hZHxwcm9maWxlfHJhZGlvR3JvdXB8cmVhZE9ubHl8cmVmZXJyZXJQb2xpY3l8cmVsfHJlcXVpcmVkfHJldmVyc2VkfHJvbGV8cm93c3xyb3dTcGFufHNhbmRib3h8c2NvcGV8c2NvcGVkfHNjcm9sbGluZ3xzZWFtbGVzc3xzZWxlY3RlZHxzaGFwZXxzaXplfHNpemVzfHNsb3R8c3BhbnxzcGVsbENoZWNrfHNyY3xzcmNEb2N8c3JjTGFuZ3xzcmNTZXR8c3RhcnR8c3RlcHxzdHlsZXxzdW1tYXJ5fHRhYkluZGV4fHRhcmdldHx0aXRsZXx0cmFuc2xhdGV8dHlwZXx1c2VNYXB8dmFsdWV8d2lkdGh8d21vZGV8d3JhcHxhYm91dHxkYXRhdHlwZXxpbmxpc3R8cHJlZml4fHByb3BlcnR5fHJlc291cmNlfHR5cGVvZnx2b2NhYnxhdXRvQ2FwaXRhbGl6ZXxhdXRvQ29ycmVjdHxhdXRvU2F2ZXxjb2xvcnxpbmNyZW1lbnRhbHxmYWxsYmFja3xpbmVydHxpdGVtUHJvcHxpdGVtU2NvcGV8aXRlbVR5cGV8aXRlbUlEfGl0ZW1SZWZ8b258b3B0aW9ufHJlc3VsdHN8c2VjdXJpdHl8dW5zZWxlY3RhYmxlfGFjY2VudEhlaWdodHxhY2N1bXVsYXRlfGFkZGl0aXZlfGFsaWdubWVudEJhc2VsaW5lfGFsbG93UmVvcmRlcnxhbHBoYWJldGljfGFtcGxpdHVkZXxhcmFiaWNGb3JtfGFzY2VudHxhdHRyaWJ1dGVOYW1lfGF0dHJpYnV0ZVR5cGV8YXV0b1JldmVyc2V8YXppbXV0aHxiYXNlRnJlcXVlbmN5fGJhc2VsaW5lU2hpZnR8YmFzZVByb2ZpbGV8YmJveHxiZWdpbnxiaWFzfGJ5fGNhbGNNb2RlfGNhcEhlaWdodHxjbGlwfGNsaXBQYXRoVW5pdHN8Y2xpcFBhdGh8Y2xpcFJ1bGV8Y29sb3JJbnRlcnBvbGF0aW9ufGNvbG9ySW50ZXJwb2xhdGlvbkZpbHRlcnN8Y29sb3JQcm9maWxlfGNvbG9yUmVuZGVyaW5nfGNvbnRlbnRTY3JpcHRUeXBlfGNvbnRlbnRTdHlsZVR5cGV8Y3Vyc29yfGN4fGN5fGR8ZGVjZWxlcmF0ZXxkZXNjZW50fGRpZmZ1c2VDb25zdGFudHxkaXJlY3Rpb258ZGlzcGxheXxkaXZpc29yfGRvbWluYW50QmFzZWxpbmV8ZHVyfGR4fGR5fGVkZ2VNb2RlfGVsZXZhdGlvbnxlbmFibGVCYWNrZ3JvdW5kfGVuZHxleHBvbmVudHxleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkfGZpbGx8ZmlsbE9wYWNpdHl8ZmlsbFJ1bGV8ZmlsdGVyfGZpbHRlclJlc3xmaWx0ZXJVbml0c3xmbG9vZENvbG9yfGZsb29kT3BhY2l0eXxmb2N1c2FibGV8Zm9udEZhbWlseXxmb250U2l6ZXxmb250U2l6ZUFkanVzdHxmb250U3RyZXRjaHxmb250U3R5bGV8Zm9udFZhcmlhbnR8Zm9udFdlaWdodHxmb3JtYXR8ZnJvbXxmcnxmeHxmeXxnMXxnMnxnbHlwaE5hbWV8Z2x5cGhPcmllbnRhdGlvbkhvcml6b250YWx8Z2x5cGhPcmllbnRhdGlvblZlcnRpY2FsfGdseXBoUmVmfGdyYWRpZW50VHJhbnNmb3JtfGdyYWRpZW50VW5pdHN8aGFuZ2luZ3xob3JpekFkdlh8aG9yaXpPcmlnaW5YfGlkZW9ncmFwaGljfGltYWdlUmVuZGVyaW5nfGlufGluMnxpbnRlcmNlcHR8a3xrMXxrMnxrM3xrNHxrZXJuZWxNYXRyaXh8a2VybmVsVW5pdExlbmd0aHxrZXJuaW5nfGtleVBvaW50c3xrZXlTcGxpbmVzfGtleVRpbWVzfGxlbmd0aEFkanVzdHxsZXR0ZXJTcGFjaW5nfGxpZ2h0aW5nQ29sb3J8bGltaXRpbmdDb25lQW5nbGV8bG9jYWx8bWFya2VyRW5kfG1hcmtlck1pZHxtYXJrZXJTdGFydHxtYXJrZXJIZWlnaHR8bWFya2VyVW5pdHN8bWFya2VyV2lkdGh8bWFza3xtYXNrQ29udGVudFVuaXRzfG1hc2tVbml0c3xtYXRoZW1hdGljYWx8bW9kZXxudW1PY3RhdmVzfG9mZnNldHxvcGFjaXR5fG9wZXJhdG9yfG9yZGVyfG9yaWVudHxvcmllbnRhdGlvbnxvcmlnaW58b3ZlcmZsb3d8b3ZlcmxpbmVQb3NpdGlvbnxvdmVybGluZVRoaWNrbmVzc3xwYW5vc2UxfHBhaW50T3JkZXJ8cGF0aExlbmd0aHxwYXR0ZXJuQ29udGVudFVuaXRzfHBhdHRlcm5UcmFuc2Zvcm18cGF0dGVyblVuaXRzfHBvaW50ZXJFdmVudHN8cG9pbnRzfHBvaW50c0F0WHxwb2ludHNBdFl8cG9pbnRzQXRafHByZXNlcnZlQWxwaGF8cHJlc2VydmVBc3BlY3RSYXRpb3xwcmltaXRpdmVVbml0c3xyfHJhZGl1c3xyZWZYfHJlZll8cmVuZGVyaW5nSW50ZW50fHJlcGVhdENvdW50fHJlcGVhdER1cnxyZXF1aXJlZEV4dGVuc2lvbnN8cmVxdWlyZWRGZWF0dXJlc3xyZXN0YXJ0fHJlc3VsdHxyb3RhdGV8cnh8cnl8c2NhbGV8c2VlZHxzaGFwZVJlbmRlcmluZ3xzbG9wZXxzcGFjaW5nfHNwZWN1bGFyQ29uc3RhbnR8c3BlY3VsYXJFeHBvbmVudHxzcGVlZHxzcHJlYWRNZXRob2R8c3RhcnRPZmZzZXR8c3RkRGV2aWF0aW9ufHN0ZW1ofHN0ZW12fHN0aXRjaFRpbGVzfHN0b3BDb2xvcnxzdG9wT3BhY2l0eXxzdHJpa2V0aHJvdWdoUG9zaXRpb258c3RyaWtldGhyb3VnaFRoaWNrbmVzc3xzdHJpbmd8c3Ryb2tlfHN0cm9rZURhc2hhcnJheXxzdHJva2VEYXNob2Zmc2V0fHN0cm9rZUxpbmVjYXB8c3Ryb2tlTGluZWpvaW58c3Ryb2tlTWl0ZXJsaW1pdHxzdHJva2VPcGFjaXR5fHN0cm9rZVdpZHRofHN1cmZhY2VTY2FsZXxzeXN0ZW1MYW5ndWFnZXx0YWJsZVZhbHVlc3x0YXJnZXRYfHRhcmdldFl8dGV4dEFuY2hvcnx0ZXh0RGVjb3JhdGlvbnx0ZXh0UmVuZGVyaW5nfHRleHRMZW5ndGh8dG98dHJhbnNmb3JtfHUxfHUyfHVuZGVybGluZVBvc2l0aW9ufHVuZGVybGluZVRoaWNrbmVzc3x1bmljb2RlfHVuaWNvZGVCaWRpfHVuaWNvZGVSYW5nZXx1bml0c1BlckVtfHZBbHBoYWJldGljfHZIYW5naW5nfHZJZGVvZ3JhcGhpY3x2TWF0aGVtYXRpY2FsfHZhbHVlc3x2ZWN0b3JFZmZlY3R8dmVyc2lvbnx2ZXJ0QWR2WXx2ZXJ0T3JpZ2luWHx2ZXJ0T3JpZ2luWXx2aWV3Qm94fHZpZXdUYXJnZXR8dmlzaWJpbGl0eXx3aWR0aHN8d29yZFNwYWNpbmd8d3JpdGluZ01vZGV8eHx4SGVpZ2h0fHgxfHgyfHhDaGFubmVsU2VsZWN0b3J8eGxpbmtBY3R1YXRlfHhsaW5rQXJjcm9sZXx4bGlua0hyZWZ8eGxpbmtSb2xlfHhsaW5rU2hvd3x4bGlua1RpdGxlfHhsaW5rVHlwZXx4bWxCYXNlfHhtbG5zfHhtbG5zWGxpbmt8eG1sTGFuZ3x4bWxTcGFjZXx5fHkxfHkyfHlDaGFubmVsU2VsZWN0b3J8enx6b29tQW5kUGFufGZvcnxjbGFzc3xhdXRvZm9jdXMpfCgoW0RkXVtBYV1bVHRdW0FhXXxbQWFdW1JyXVtJaV1bQWFdfHgpLS4qKSkkLzsgLy8gaHR0cHM6Ly9lc2JlbmNoLmNvbS9iZW5jaC81YmZlZTY4YTRjZDdlNjAwOWVmNjFkMjNcblxudmFyIGlzUHJvcFZhbGlkID0gLyogI19fUFVSRV9fICovbWVtb2l6ZShmdW5jdGlvbiAocHJvcCkge1xuICByZXR1cm4gcmVhY3RQcm9wc1JlZ2V4LnRlc3QocHJvcCkgfHwgcHJvcC5jaGFyQ29kZUF0KDApID09PSAxMTFcbiAgLyogbyAqL1xuICAmJiBwcm9wLmNoYXJDb2RlQXQoMSkgPT09IDExMFxuICAvKiBuICovXG4gICYmIHByb3AuY2hhckNvZGVBdCgyKSA8IDkxO1xufVxuLyogWisxICovXG4pO1xuXG5leHBvcnQgeyBpc1Byb3BWYWxpZCBhcyBkZWZhdWx0IH07XG4iXSwibmFtZXMiOlsibWVtb2l6ZSIsInJlYWN0UHJvcHNSZWdleCIsImlzUHJvcFZhbGlkIiwicHJvcCIsInRlc3QiLCJjaGFyQ29kZUF0IiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@emotion/memoize/dist/emotion-memoize.esm.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@emotion/memoize/dist/emotion-memoize.esm.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ memoize; }\n/* harmony export */ });\nfunction memoize(fn) {\n    var cache = Object.create(null);\n    return function(arg) {\n        if (cache[arg] === undefined) cache[arg] = fn(arg);\n        return cache[arg];\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9tZW1vaXplL2Rpc3QvZW1vdGlvbi1tZW1vaXplLmVzbS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsU0FBU0EsUUFBUUMsRUFBRTtJQUNqQixJQUFJQyxRQUFRQyxPQUFPQyxNQUFNLENBQUM7SUFDMUIsT0FBTyxTQUFVQyxHQUFHO1FBQ2xCLElBQUlILEtBQUssQ0FBQ0csSUFBSSxLQUFLQyxXQUFXSixLQUFLLENBQUNHLElBQUksR0FBR0osR0FBR0k7UUFDOUMsT0FBT0gsS0FBSyxDQUFDRyxJQUFJO0lBQ25CO0FBQ0Y7QUFFOEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL21lbW9pemUvZGlzdC9lbW90aW9uLW1lbW9pemUuZXNtLmpzPzM4NGUiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gbWVtb2l6ZShmbikge1xuICB2YXIgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgIGlmIChjYWNoZVthcmddID09PSB1bmRlZmluZWQpIGNhY2hlW2FyZ10gPSBmbihhcmcpO1xuICAgIHJldHVybiBjYWNoZVthcmddO1xuICB9O1xufVxuXG5leHBvcnQgeyBtZW1vaXplIGFzIGRlZmF1bHQgfTtcbiJdLCJuYW1lcyI6WyJtZW1vaXplIiwiZm4iLCJjYWNoZSIsIk9iamVjdCIsImNyZWF0ZSIsImFyZyIsInVuZGVmaW5lZCIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@emotion/memoize/dist/emotion-memoize.esm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@prisma/client/index-browser.js":
/*!******************************************************!*\
  !*** ./node_modules/@prisma/client/index-browser.js ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nconst prisma = __webpack_require__(/*! .prisma/client/index-browser */ \"(app-pages-browser)/./node_modules/.prisma/client/index-browser.js\");\nmodule.exports = prisma;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcHJpc21hL2NsaWVudC9pbmRleC1icm93c2VyLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUV2QkMsT0FBT0MsT0FBTyxHQUFHSCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHByaXNtYS9jbGllbnQvaW5kZXgtYnJvd3Nlci5qcz9jYWZhIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHByaXNtYSA9IHJlcXVpcmUoJy5wcmlzbWEvY2xpZW50L2luZGV4LWJyb3dzZXInKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHByaXNtYVxuIl0sIm5hbWVzIjpbInByaXNtYSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@prisma/client/index-browser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@prisma/client/runtime/index-browser.js":
/*!**************************************************************!*\
  !*** ./node_modules/@prisma/client/runtime/index-browser.js ***!
  \**************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar de = Object.defineProperty;\nvar We = Object.getOwnPropertyDescriptor;\nvar Ge = Object.getOwnPropertyNames;\nvar Je = Object.prototype.hasOwnProperty;\nvar Me = (e, n)=>{\n    for(var i in n)de(e, i, {\n        get: n[i],\n        enumerable: !0\n    });\n}, Xe = (e, n, i, t)=>{\n    if (n && typeof n == \"object\" || typeof n == \"function\") for (let r of Ge(n))!Je.call(e, r) && r !== i && de(e, r, {\n        get: ()=>n[r],\n        enumerable: !(t = We(n, r)) || t.enumerable\n    });\n    return e;\n};\nvar Ke = (e)=>Xe(de({}, \"__esModule\", {\n        value: !0\n    }), e);\n_c = Ke;\nvar Xn = {};\nMe(Xn, {\n    Decimal: ()=>je,\n    Public: ()=>he,\n    getRuntime: ()=>be,\n    makeStrictEnum: ()=>Pe,\n    objectEnumValues: ()=>Oe\n});\nmodule.exports = Ke(Xn);\nvar he = {};\nMe(he, {\n    validator: ()=>Ce\n});\nfunction Ce() {\n    for(var _len = arguments.length, e = new Array(_len), _key = 0; _key < _len; _key++){\n        e[_key] = arguments[_key];\n    }\n    return (n)=>n;\n}\n_c1 = Ce;\nvar ne = Symbol(), pe = new WeakMap, ge = class {\n    _getName() {\n        return this.constructor.name;\n    }\n    toString() {\n        return pe.get(this);\n    }\n    constructor(n){\n        n === ne ? pe.set(this, \"Prisma.\".concat(this._getName())) : pe.set(this, \"new Prisma.\".concat(this._getNamespace(), \".\").concat(this._getName(), \"()\"));\n    }\n}, G = class extends ge {\n    _getNamespace() {\n        return \"NullTypes\";\n    }\n}, J = class extends G {\n};\nme(J, \"DbNull\");\nvar X = class extends G {\n};\nme(X, \"JsonNull\");\nvar K = class extends G {\n};\nme(K, \"AnyNull\");\nvar Oe = {\n    classes: {\n        DbNull: J,\n        JsonNull: X,\n        AnyNull: K\n    },\n    instances: {\n        DbNull: new J(ne),\n        JsonNull: new X(ne),\n        AnyNull: new K(ne)\n    }\n};\nfunction me(e, n) {\n    Object.defineProperty(e, \"name\", {\n        value: n,\n        configurable: !0\n    });\n}\nvar xe = new Set([\n    \"toJSON\",\n    \"$$typeof\",\n    \"asymmetricMatch\",\n    Symbol.iterator,\n    Symbol.toStringTag,\n    Symbol.isConcatSpreadable,\n    Symbol.toPrimitive\n]);\nfunction Pe(e) {\n    return new Proxy(e, {\n        get (n, i) {\n            if (i in n) return n[i];\n            if (!xe.has(i)) throw new TypeError(\"Invalid enum value: \".concat(String(i)));\n        }\n    });\n}\n_c2 = Pe;\nvar Qe = \"Cloudflare-Workers\", Ye = \"node\";\nfunction Re() {\n    var e, n, i;\n    return typeof Netlify == \"object\" ? \"netlify\" : typeof EdgeRuntime == \"string\" ? \"edge-light\" : ((e = globalThis.navigator) == null ? void 0 : e.userAgent) === Qe ? \"workerd\" : globalThis.Deno ? \"deno\" : globalThis.__lagon__ ? \"lagon\" : ((i = (n = globalThis.process) == null ? void 0 : n.release) == null ? void 0 : i.name) === Ye ? \"node\" : globalThis.Bun ? \"bun\" : globalThis.fastly ? \"fastly\" : \"unknown\";\n}\n_c3 = Re;\nvar ze = {\n    node: \"Node.js\",\n    workerd: \"Cloudflare Workers\",\n    deno: \"Deno and Deno Deploy\",\n    netlify: \"Netlify Edge Functions\",\n    \"edge-light\": \"Edge Runtime (Vercel Edge Functions, Vercel Edge Middleware, Next.js (Pages Router) Edge API Routes, Next.js (App Router) Edge Route Handlers or Next.js Middleware)\"\n};\nfunction be() {\n    let e = Re();\n    return {\n        id: e,\n        prettyName: ze[e] || e,\n        isEdge: [\n            \"workerd\",\n            \"deno\",\n            \"netlify\",\n            \"edge-light\"\n        ].includes(e)\n    };\n}\nvar H = 9e15, $ = 1e9, we = \"0123456789abcdef\", te = \"2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058\", re = \"3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789\", Ne = {\n    precision: 20,\n    rounding: 4,\n    modulo: 1,\n    toExpNeg: -7,\n    toExpPos: 21,\n    minE: -H,\n    maxE: H,\n    crypto: !1\n}, Te, Z, w = !0, oe = \"[DecimalError] \", V = oe + \"Invalid argument: \", Le = oe + \"Precision limit exceeded\", De = oe + \"crypto unavailable\", Fe = \"[object Decimal]\", b = Math.floor, C = Math.pow, ye = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i, en = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i, nn = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i, Ie = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i, D = 1e7, m = 7, tn = 9007199254740991, rn = te.length - 1, ve = re.length - 1, h = {\n    toStringTag: Fe\n};\nh.absoluteValue = h.abs = function() {\n    var e = new this.constructor(this);\n    return e.s < 0 && (e.s = 1), p(e);\n};\nh.ceil = function() {\n    return p(new this.constructor(this), this.e + 1, 2);\n};\nh.clampedTo = h.clamp = function(e, n) {\n    var i, t = this, r = t.constructor;\n    if (e = new r(e), n = new r(n), !e.s || !n.s) return new r(NaN);\n    if (e.gt(n)) throw Error(V + n);\n    return i = t.cmp(e), i < 0 ? e : t.cmp(n) > 0 ? n : new r(t);\n};\nh.comparedTo = h.cmp = function(e) {\n    var n, i, t, r, s = this, o = s.d, u = (e = new s.constructor(e)).d, l = s.s, f = e.s;\n    if (!o || !u) return !l || !f ? NaN : l !== f ? l : o === u ? 0 : !o ^ l < 0 ? 1 : -1;\n    if (!o[0] || !u[0]) return o[0] ? l : u[0] ? -f : 0;\n    if (l !== f) return l;\n    if (s.e !== e.e) return s.e > e.e ^ l < 0 ? 1 : -1;\n    for(t = o.length, r = u.length, n = 0, i = t < r ? t : r; n < i; ++n)if (o[n] !== u[n]) return o[n] > u[n] ^ l < 0 ? 1 : -1;\n    return t === r ? 0 : t > r ^ l < 0 ? 1 : -1;\n};\nh.cosine = h.cos = function() {\n    var e, n, i = this, t = i.constructor;\n    return i.d ? i.d[0] ? (e = t.precision, n = t.rounding, t.precision = e + Math.max(i.e, i.sd()) + m, t.rounding = 1, i = sn(t, $e(t, i)), t.precision = e, t.rounding = n, p(Z == 2 || Z == 3 ? i.neg() : i, e, n, !0)) : new t(1) : new t(NaN);\n};\nh.cubeRoot = h.cbrt = function() {\n    var e, n, i, t, r, s, o, u, l, f, c = this, a = c.constructor;\n    if (!c.isFinite() || c.isZero()) return new a(c);\n    for(w = !1, s = c.s * C(c.s * c, 1 / 3), !s || Math.abs(s) == 1 / 0 ? (i = O(c.d), e = c.e, (s = (e - i.length + 1) % 3) && (i += s == 1 || s == -2 ? \"0\" : \"00\"), s = C(i, 1 / 3), e = b((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2)), s == 1 / 0 ? i = \"5e\" + e : (i = s.toExponential(), i = i.slice(0, i.indexOf(\"e\") + 1) + e), t = new a(i), t.s = c.s) : t = new a(s.toString()), o = (e = a.precision) + 3;;)if (u = t, l = u.times(u).times(u), f = l.plus(c), t = S(f.plus(c).times(u), f.plus(l), o + 2, 1), O(u.d).slice(0, o) === (i = O(t.d)).slice(0, o)) if (i = i.slice(o - 3, o + 1), i == \"9999\" || !r && i == \"4999\") {\n        if (!r && (p(u, e + 1, 0), u.times(u).times(u).eq(c))) {\n            t = u;\n            break;\n        }\n        o += 4, r = 1;\n    } else {\n        (!+i || !+i.slice(1) && i.charAt(0) == \"5\") && (p(t, e + 1, 1), n = !t.times(t).times(t).eq(c));\n        break;\n    }\n    return w = !0, p(t, e, a.rounding, n);\n};\nh.decimalPlaces = h.dp = function() {\n    var e, n = this.d, i = NaN;\n    if (n) {\n        if (e = n.length - 1, i = (e - b(this.e / m)) * m, e = n[e], e) for(; e % 10 == 0; e /= 10)i--;\n        i < 0 && (i = 0);\n    }\n    return i;\n};\nh.dividedBy = h.div = function(e) {\n    return S(this, new this.constructor(e));\n};\nh.dividedToIntegerBy = h.divToInt = function(e) {\n    var n = this, i = n.constructor;\n    return p(S(n, new i(e), 0, 1, 1), i.precision, i.rounding);\n};\nh.equals = h.eq = function(e) {\n    return this.cmp(e) === 0;\n};\nh.floor = function() {\n    return p(new this.constructor(this), this.e + 1, 3);\n};\nh.greaterThan = h.gt = function(e) {\n    return this.cmp(e) > 0;\n};\nh.greaterThanOrEqualTo = h.gte = function(e) {\n    var n = this.cmp(e);\n    return n == 1 || n === 0;\n};\nh.hyperbolicCosine = h.cosh = function() {\n    var e, n, i, t, r, s = this, o = s.constructor, u = new o(1);\n    if (!s.isFinite()) return new o(s.s ? 1 / 0 : NaN);\n    if (s.isZero()) return u;\n    i = o.precision, t = o.rounding, o.precision = i + Math.max(s.e, s.sd()) + 4, o.rounding = 1, r = s.d.length, r < 32 ? (e = Math.ceil(r / 3), n = (1 / fe(4, e)).toString()) : (e = 16, n = \"2.3283064365386962890625e-10\"), s = j(o, 1, s.times(n), new o(1), !0);\n    for(var l, f = e, c = new o(8); f--;)l = s.times(s), s = u.minus(l.times(c.minus(l.times(c))));\n    return p(s, o.precision = i, o.rounding = t, !0);\n};\nh.hyperbolicSine = h.sinh = function() {\n    var e, n, i, t, r = this, s = r.constructor;\n    if (!r.isFinite() || r.isZero()) return new s(r);\n    if (n = s.precision, i = s.rounding, s.precision = n + Math.max(r.e, r.sd()) + 4, s.rounding = 1, t = r.d.length, t < 3) r = j(s, 2, r, r, !0);\n    else {\n        e = 1.4 * Math.sqrt(t), e = e > 16 ? 16 : e | 0, r = r.times(1 / fe(5, e)), r = j(s, 2, r, r, !0);\n        for(var o, u = new s(5), l = new s(16), f = new s(20); e--;)o = r.times(r), r = r.times(u.plus(o.times(l.times(o).plus(f))));\n    }\n    return s.precision = n, s.rounding = i, p(r, n, i, !0);\n};\nh.hyperbolicTangent = h.tanh = function() {\n    var e, n, i = this, t = i.constructor;\n    return i.isFinite() ? i.isZero() ? new t(i) : (e = t.precision, n = t.rounding, t.precision = e + 7, t.rounding = 1, S(i.sinh(), i.cosh(), t.precision = e, t.rounding = n)) : new t(i.s);\n};\nh.inverseCosine = h.acos = function() {\n    var e, n = this, i = n.constructor, t = n.abs().cmp(1), r = i.precision, s = i.rounding;\n    return t !== -1 ? t === 0 ? n.isNeg() ? L(i, r, s) : new i(0) : new i(NaN) : n.isZero() ? L(i, r + 4, s).times(.5) : (i.precision = r + 6, i.rounding = 1, n = n.asin(), e = L(i, r + 4, s).times(.5), i.precision = r, i.rounding = s, e.minus(n));\n};\nh.inverseHyperbolicCosine = h.acosh = function() {\n    var e, n, i = this, t = i.constructor;\n    return i.lte(1) ? new t(i.eq(1) ? 0 : NaN) : i.isFinite() ? (e = t.precision, n = t.rounding, t.precision = e + Math.max(Math.abs(i.e), i.sd()) + 4, t.rounding = 1, w = !1, i = i.times(i).minus(1).sqrt().plus(i), w = !0, t.precision = e, t.rounding = n, i.ln()) : new t(i);\n};\nh.inverseHyperbolicSine = h.asinh = function() {\n    var e, n, i = this, t = i.constructor;\n    return !i.isFinite() || i.isZero() ? new t(i) : (e = t.precision, n = t.rounding, t.precision = e + 2 * Math.max(Math.abs(i.e), i.sd()) + 6, t.rounding = 1, w = !1, i = i.times(i).plus(1).sqrt().plus(i), w = !0, t.precision = e, t.rounding = n, i.ln());\n};\nh.inverseHyperbolicTangent = h.atanh = function() {\n    var e, n, i, t, r = this, s = r.constructor;\n    return r.isFinite() ? r.e >= 0 ? new s(r.abs().eq(1) ? r.s / 0 : r.isZero() ? r : NaN) : (e = s.precision, n = s.rounding, t = r.sd(), Math.max(t, e) < 2 * -r.e - 1 ? p(new s(r), e, n, !0) : (s.precision = i = t - r.e, r = S(r.plus(1), new s(1).minus(r), i + e, 1), s.precision = e + 4, s.rounding = 1, r = r.ln(), s.precision = e, s.rounding = n, r.times(.5))) : new s(NaN);\n};\nh.inverseSine = h.asin = function() {\n    var e, n, i, t, r = this, s = r.constructor;\n    return r.isZero() ? new s(r) : (n = r.abs().cmp(1), i = s.precision, t = s.rounding, n !== -1 ? n === 0 ? (e = L(s, i + 4, t).times(.5), e.s = r.s, e) : new s(NaN) : (s.precision = i + 6, s.rounding = 1, r = r.div(new s(1).minus(r.times(r)).sqrt().plus(1)).atan(), s.precision = i, s.rounding = t, r.times(2)));\n};\nh.inverseTangent = h.atan = function() {\n    var e, n, i, t, r, s, o, u, l, f = this, c = f.constructor, a = c.precision, d = c.rounding;\n    if (f.isFinite()) {\n        if (f.isZero()) return new c(f);\n        if (f.abs().eq(1) && a + 4 <= ve) return o = L(c, a + 4, d).times(.25), o.s = f.s, o;\n    } else {\n        if (!f.s) return new c(NaN);\n        if (a + 4 <= ve) return o = L(c, a + 4, d).times(.5), o.s = f.s, o;\n    }\n    for(c.precision = u = a + 10, c.rounding = 1, i = Math.min(28, u / m + 2 | 0), e = i; e; --e)f = f.div(f.times(f).plus(1).sqrt().plus(1));\n    for(w = !1, n = Math.ceil(u / m), t = 1, l = f.times(f), o = new c(f), r = f; e !== -1;)if (r = r.times(l), s = o.minus(r.div(t += 2)), r = r.times(l), o = s.plus(r.div(t += 2)), o.d[n] !== void 0) for(e = n; o.d[e] === s.d[e] && e--;);\n    return i && (o = o.times(2 << i - 1)), w = !0, p(o, c.precision = a, c.rounding = d, !0);\n};\nh.isFinite = function() {\n    return !!this.d;\n};\nh.isInteger = h.isInt = function() {\n    return !!this.d && b(this.e / m) > this.d.length - 2;\n};\nh.isNaN = function() {\n    return !this.s;\n};\nh.isNegative = h.isNeg = function() {\n    return this.s < 0;\n};\nh.isPositive = h.isPos = function() {\n    return this.s > 0;\n};\nh.isZero = function() {\n    return !!this.d && this.d[0] === 0;\n};\nh.lessThan = h.lt = function(e) {\n    return this.cmp(e) < 0;\n};\nh.lessThanOrEqualTo = h.lte = function(e) {\n    return this.cmp(e) < 1;\n};\nh.logarithm = h.log = function(e) {\n    var n, i, t, r, s, o, u, l, f = this, c = f.constructor, a = c.precision, d = c.rounding, g = 5;\n    if (e == null) e = new c(10), n = !0;\n    else {\n        if (e = new c(e), i = e.d, e.s < 0 || !i || !i[0] || e.eq(1)) return new c(NaN);\n        n = e.eq(10);\n    }\n    if (i = f.d, f.s < 0 || !i || !i[0] || f.eq(1)) return new c(i && !i[0] ? -1 / 0 : f.s != 1 ? NaN : i ? 0 : 1 / 0);\n    if (n) if (i.length > 1) s = !0;\n    else {\n        for(r = i[0]; r % 10 === 0;)r /= 10;\n        s = r !== 1;\n    }\n    if (w = !1, u = a + g, o = B(f, u), t = n ? se(c, u + 10) : B(e, u), l = S(o, t, u, 1), x(l.d, r = a, d)) do if (u += 10, o = B(f, u), t = n ? se(c, u + 10) : B(e, u), l = S(o, t, u, 1), !s) {\n        +O(l.d).slice(r + 1, r + 15) + 1 == 1e14 && (l = p(l, a + 1, 0));\n        break;\n    }\n    while (x(l.d, r += 10, d));\n    return w = !0, p(l, a, d);\n};\nh.minus = h.sub = function(e) {\n    var n, i, t, r, s, o, u, l, f, c, a, d, g = this, v = g.constructor;\n    if (e = new v(e), !g.d || !e.d) return !g.s || !e.s ? e = new v(NaN) : g.d ? e.s = -e.s : e = new v(e.d || g.s !== e.s ? g : NaN), e;\n    if (g.s != e.s) return e.s = -e.s, g.plus(e);\n    if (f = g.d, d = e.d, u = v.precision, l = v.rounding, !f[0] || !d[0]) {\n        if (d[0]) e.s = -e.s;\n        else if (f[0]) e = new v(g);\n        else return new v(l === 3 ? -0 : 0);\n        return w ? p(e, u, l) : e;\n    }\n    if (i = b(e.e / m), c = b(g.e / m), f = f.slice(), s = c - i, s) {\n        for(a = s < 0, a ? (n = f, s = -s, o = d.length) : (n = d, i = c, o = f.length), t = Math.max(Math.ceil(u / m), o) + 2, s > t && (s = t, n.length = 1), n.reverse(), t = s; t--;)n.push(0);\n        n.reverse();\n    } else {\n        for(t = f.length, o = d.length, a = t < o, a && (o = t), t = 0; t < o; t++)if (f[t] != d[t]) {\n            a = f[t] < d[t];\n            break;\n        }\n        s = 0;\n    }\n    for(a && (n = f, f = d, d = n, e.s = -e.s), o = f.length, t = d.length - o; t > 0; --t)f[o++] = 0;\n    for(t = d.length; t > s;){\n        if (f[--t] < d[t]) {\n            for(r = t; r && f[--r] === 0;)f[r] = D - 1;\n            --f[r], f[t] += D;\n        }\n        f[t] -= d[t];\n    }\n    for(; f[--o] === 0;)f.pop();\n    for(; f[0] === 0; f.shift())--i;\n    return f[0] ? (e.d = f, e.e = ue(f, i), w ? p(e, u, l) : e) : new v(l === 3 ? -0 : 0);\n};\nh.modulo = h.mod = function(e) {\n    var n, i = this, t = i.constructor;\n    return e = new t(e), !i.d || !e.s || e.d && !e.d[0] ? new t(NaN) : !e.d || i.d && !i.d[0] ? p(new t(i), t.precision, t.rounding) : (w = !1, t.modulo == 9 ? (n = S(i, e.abs(), 0, 3, 1), n.s *= e.s) : n = S(i, e, 0, t.modulo, 1), n = n.times(e), w = !0, i.minus(n));\n};\nh.naturalExponential = h.exp = function() {\n    return Ee(this);\n};\nh.naturalLogarithm = h.ln = function() {\n    return B(this);\n};\nh.negated = h.neg = function() {\n    var e = new this.constructor(this);\n    return e.s = -e.s, p(e);\n};\nh.plus = h.add = function(e) {\n    var n, i, t, r, s, o, u, l, f, c, a = this, d = a.constructor;\n    if (e = new d(e), !a.d || !e.d) return !a.s || !e.s ? e = new d(NaN) : a.d || (e = new d(e.d || a.s === e.s ? a : NaN)), e;\n    if (a.s != e.s) return e.s = -e.s, a.minus(e);\n    if (f = a.d, c = e.d, u = d.precision, l = d.rounding, !f[0] || !c[0]) return c[0] || (e = new d(a)), w ? p(e, u, l) : e;\n    if (s = b(a.e / m), t = b(e.e / m), f = f.slice(), r = s - t, r) {\n        for(r < 0 ? (i = f, r = -r, o = c.length) : (i = c, t = s, o = f.length), s = Math.ceil(u / m), o = s > o ? s + 1 : o + 1, r > o && (r = o, i.length = 1), i.reverse(); r--;)i.push(0);\n        i.reverse();\n    }\n    for(o = f.length, r = c.length, o - r < 0 && (r = o, i = c, c = f, f = i), n = 0; r;)n = (f[--r] = f[r] + c[r] + n) / D | 0, f[r] %= D;\n    for(n && (f.unshift(n), ++t), o = f.length; f[--o] == 0;)f.pop();\n    return e.d = f, e.e = ue(f, t), w ? p(e, u, l) : e;\n};\nh.precision = h.sd = function(e) {\n    var n, i = this;\n    if (e !== void 0 && e !== !!e && e !== 1 && e !== 0) throw Error(V + e);\n    return i.d ? (n = Ze(i.d), e && i.e + 1 > n && (n = i.e + 1)) : n = NaN, n;\n};\nh.round = function() {\n    var e = this, n = e.constructor;\n    return p(new n(e), e.e + 1, n.rounding);\n};\nh.sine = h.sin = function() {\n    var e, n, i = this, t = i.constructor;\n    return i.isFinite() ? i.isZero() ? new t(i) : (e = t.precision, n = t.rounding, t.precision = e + Math.max(i.e, i.sd()) + m, t.rounding = 1, i = un(t, $e(t, i)), t.precision = e, t.rounding = n, p(Z > 2 ? i.neg() : i, e, n, !0)) : new t(NaN);\n};\nh.squareRoot = h.sqrt = function() {\n    var e, n, i, t, r, s, o = this, u = o.d, l = o.e, f = o.s, c = o.constructor;\n    if (f !== 1 || !u || !u[0]) return new c(!f || f < 0 && (!u || u[0]) ? NaN : u ? o : 1 / 0);\n    for(w = !1, f = Math.sqrt(+o), f == 0 || f == 1 / 0 ? (n = O(u), (n.length + l) % 2 == 0 && (n += \"0\"), f = Math.sqrt(n), l = b((l + 1) / 2) - (l < 0 || l % 2), f == 1 / 0 ? n = \"5e\" + l : (n = f.toExponential(), n = n.slice(0, n.indexOf(\"e\") + 1) + l), t = new c(n)) : t = new c(f.toString()), i = (l = c.precision) + 3;;)if (s = t, t = s.plus(S(o, s, i + 2, 1)).times(.5), O(s.d).slice(0, i) === (n = O(t.d)).slice(0, i)) if (n = n.slice(i - 3, i + 1), n == \"9999\" || !r && n == \"4999\") {\n        if (!r && (p(s, l + 1, 0), s.times(s).eq(o))) {\n            t = s;\n            break;\n        }\n        i += 4, r = 1;\n    } else {\n        (!+n || !+n.slice(1) && n.charAt(0) == \"5\") && (p(t, l + 1, 1), e = !t.times(t).eq(o));\n        break;\n    }\n    return w = !0, p(t, l, c.rounding, e);\n};\nh.tangent = h.tan = function() {\n    var e, n, i = this, t = i.constructor;\n    return i.isFinite() ? i.isZero() ? new t(i) : (e = t.precision, n = t.rounding, t.precision = e + 10, t.rounding = 1, i = i.sin(), i.s = 1, i = S(i, new t(1).minus(i.times(i)).sqrt(), e + 10, 0), t.precision = e, t.rounding = n, p(Z == 2 || Z == 4 ? i.neg() : i, e, n, !0)) : new t(NaN);\n};\nh.times = h.mul = function(e) {\n    var n, i, t, r, s, o, u, l, f, c = this, a = c.constructor, d = c.d, g = (e = new a(e)).d;\n    if (e.s *= c.s, !d || !d[0] || !g || !g[0]) return new a(!e.s || d && !d[0] && !g || g && !g[0] && !d ? NaN : !d || !g ? e.s / 0 : e.s * 0);\n    for(i = b(c.e / m) + b(e.e / m), l = d.length, f = g.length, l < f && (s = d, d = g, g = s, o = l, l = f, f = o), s = [], o = l + f, t = o; t--;)s.push(0);\n    for(t = f; --t >= 0;){\n        for(n = 0, r = l + t; r > t;)u = s[r] + g[t] * d[r - t - 1] + n, s[r--] = u % D | 0, n = u / D | 0;\n        s[r] = (s[r] + n) % D | 0;\n    }\n    for(; !s[--o];)s.pop();\n    return n ? ++i : s.shift(), e.d = s, e.e = ue(s, i), w ? p(e, a.precision, a.rounding) : e;\n};\nh.toBinary = function(e, n) {\n    return ke(this, 2, e, n);\n};\nh.toDecimalPlaces = h.toDP = function(e, n) {\n    var i = this, t = i.constructor;\n    return i = new t(i), e === void 0 ? i : (_(e, 0, $), n === void 0 ? n = t.rounding : _(n, 0, 8), p(i, e + i.e + 1, n));\n};\nh.toExponential = function(e, n) {\n    var i, t = this, r = t.constructor;\n    return e === void 0 ? i = F(t, !0) : (_(e, 0, $), n === void 0 ? n = r.rounding : _(n, 0, 8), t = p(new r(t), e + 1, n), i = F(t, !0, e + 1)), t.isNeg() && !t.isZero() ? \"-\" + i : i;\n};\nh.toFixed = function(e, n) {\n    var i, t, r = this, s = r.constructor;\n    return e === void 0 ? i = F(r) : (_(e, 0, $), n === void 0 ? n = s.rounding : _(n, 0, 8), t = p(new s(r), e + r.e + 1, n), i = F(t, !1, e + t.e + 1)), r.isNeg() && !r.isZero() ? \"-\" + i : i;\n};\nh.toFraction = function(e) {\n    var n, i, t, r, s, o, u, l, f, c, a, d, g = this, v = g.d, N = g.constructor;\n    if (!v) return new N(g);\n    if (f = i = new N(1), t = l = new N(0), n = new N(t), s = n.e = Ze(v) - g.e - 1, o = s % m, n.d[0] = C(10, o < 0 ? m + o : o), e == null) e = s > 0 ? n : f;\n    else {\n        if (u = new N(e), !u.isInt() || u.lt(f)) throw Error(V + u);\n        e = u.gt(n) ? s > 0 ? n : f : u;\n    }\n    for(w = !1, u = new N(O(v)), c = N.precision, N.precision = s = v.length * m * 2; a = S(u, n, 0, 1, 1), r = i.plus(a.times(t)), r.cmp(e) != 1;)i = t, t = r, r = f, f = l.plus(a.times(r)), l = r, r = n, n = u.minus(a.times(r)), u = r;\n    return r = S(e.minus(i), t, 0, 1, 1), l = l.plus(r.times(f)), i = i.plus(r.times(t)), l.s = f.s = g.s, d = S(f, t, s, 1).minus(g).abs().cmp(S(l, i, s, 1).minus(g).abs()) < 1 ? [\n        f,\n        t\n    ] : [\n        l,\n        i\n    ], N.precision = c, w = !0, d;\n};\nh.toHexadecimal = h.toHex = function(e, n) {\n    return ke(this, 16, e, n);\n};\nh.toNearest = function(e, n) {\n    var i = this, t = i.constructor;\n    if (i = new t(i), e == null) {\n        if (!i.d) return i;\n        e = new t(1), n = t.rounding;\n    } else {\n        if (e = new t(e), n === void 0 ? n = t.rounding : _(n, 0, 8), !i.d) return e.s ? i : e;\n        if (!e.d) return e.s && (e.s = i.s), e;\n    }\n    return e.d[0] ? (w = !1, i = S(i, e, 0, n, 1).times(e), w = !0, p(i)) : (e.s = i.s, i = e), i;\n};\nh.toNumber = function() {\n    return +this;\n};\nh.toOctal = function(e, n) {\n    return ke(this, 8, e, n);\n};\nh.toPower = h.pow = function(e) {\n    var n, i, t, r, s, o, u = this, l = u.constructor, f = +(e = new l(e));\n    if (!u.d || !e.d || !u.d[0] || !e.d[0]) return new l(C(+u, f));\n    if (u = new l(u), u.eq(1)) return u;\n    if (t = l.precision, s = l.rounding, e.eq(1)) return p(u, t, s);\n    if (n = b(e.e / m), n >= e.d.length - 1 && (i = f < 0 ? -f : f) <= tn) return r = Ue(l, u, i, t), e.s < 0 ? new l(1).div(r) : p(r, t, s);\n    if (o = u.s, o < 0) {\n        if (n < e.d.length - 1) return new l(NaN);\n        if (e.d[n] & 1 || (o = 1), u.e == 0 && u.d[0] == 1 && u.d.length == 1) return u.s = o, u;\n    }\n    return i = C(+u, f), n = i == 0 || !isFinite(i) ? b(f * (Math.log(\"0.\" + O(u.d)) / Math.LN10 + u.e + 1)) : new l(i + \"\").e, n > l.maxE + 1 || n < l.minE - 1 ? new l(n > 0 ? o / 0 : 0) : (w = !1, l.rounding = u.s = 1, i = Math.min(12, (n + \"\").length), r = Ee(e.times(B(u, t + i)), t), r.d && (r = p(r, t + 5, 1), x(r.d, t, s) && (n = t + 10, r = p(Ee(e.times(B(u, n + i)), n), n + 5, 1), +O(r.d).slice(t + 1, t + 15) + 1 == 1e14 && (r = p(r, t + 1, 0)))), r.s = o, w = !0, l.rounding = s, p(r, t, s));\n};\nh.toPrecision = function(e, n) {\n    var i, t = this, r = t.constructor;\n    return e === void 0 ? i = F(t, t.e <= r.toExpNeg || t.e >= r.toExpPos) : (_(e, 1, $), n === void 0 ? n = r.rounding : _(n, 0, 8), t = p(new r(t), e, n), i = F(t, e <= t.e || t.e <= r.toExpNeg, e)), t.isNeg() && !t.isZero() ? \"-\" + i : i;\n};\nh.toSignificantDigits = h.toSD = function(e, n) {\n    var i = this, t = i.constructor;\n    return e === void 0 ? (e = t.precision, n = t.rounding) : (_(e, 1, $), n === void 0 ? n = t.rounding : _(n, 0, 8)), p(new t(i), e, n);\n};\nh.toString = function() {\n    var e = this, n = e.constructor, i = F(e, e.e <= n.toExpNeg || e.e >= n.toExpPos);\n    return e.isNeg() && !e.isZero() ? \"-\" + i : i;\n};\nh.truncated = h.trunc = function() {\n    return p(new this.constructor(this), this.e + 1, 1);\n};\nh.valueOf = h.toJSON = function() {\n    var e = this, n = e.constructor, i = F(e, e.e <= n.toExpNeg || e.e >= n.toExpPos);\n    return e.isNeg() ? \"-\" + i : i;\n};\nfunction O(e) {\n    var n, i, t, r = e.length - 1, s = \"\", o = e[0];\n    if (r > 0) {\n        for(s += o, n = 1; n < r; n++)t = e[n] + \"\", i = m - t.length, i && (s += U(i)), s += t;\n        o = e[n], t = o + \"\", i = m - t.length, i && (s += U(i));\n    } else if (o === 0) return \"0\";\n    for(; o % 10 === 0;)o /= 10;\n    return s + o;\n}\n_c4 = O;\nfunction _(e, n, i) {\n    if (e !== ~~e || e < n || e > i) throw Error(V + e);\n}\nfunction x(e, n, i, t) {\n    var r, s, o, u;\n    for(s = e[0]; s >= 10; s /= 10)--n;\n    return --n < 0 ? (n += m, r = 0) : (r = Math.ceil((n + 1) / m), n %= m), s = C(10, m - n), u = e[r] % s | 0, t == null ? n < 3 ? (n == 0 ? u = u / 100 | 0 : n == 1 && (u = u / 10 | 0), o = i < 4 && u == 99999 || i > 3 && u == 49999 || u == 5e4 || u == 0) : o = (i < 4 && u + 1 == s || i > 3 && u + 1 == s / 2) && (e[r + 1] / s / 100 | 0) == C(10, n - 2) - 1 || (u == s / 2 || u == 0) && (e[r + 1] / s / 100 | 0) == 0 : n < 4 ? (n == 0 ? u = u / 1e3 | 0 : n == 1 ? u = u / 100 | 0 : n == 2 && (u = u / 10 | 0), o = (t || i < 4) && u == 9999 || !t && i > 3 && u == 4999) : o = ((t || i < 4) && u + 1 == s || !t && i > 3 && u + 1 == s / 2) && (e[r + 1] / s / 1e3 | 0) == C(10, n - 3) - 1, o;\n}\nfunction ie(e, n, i) {\n    for(var t, r = [\n        0\n    ], s, o = 0, u = e.length; o < u;){\n        for(s = r.length; s--;)r[s] *= n;\n        for(r[0] += we.indexOf(e.charAt(o++)), t = 0; t < r.length; t++)r[t] > i - 1 && (r[t + 1] === void 0 && (r[t + 1] = 0), r[t + 1] += r[t] / i | 0, r[t] %= i);\n    }\n    return r.reverse();\n}\nfunction sn(e, n) {\n    var i, t, r;\n    if (n.isZero()) return n;\n    t = n.d.length, t < 32 ? (i = Math.ceil(t / 3), r = (1 / fe(4, i)).toString()) : (i = 16, r = \"2.3283064365386962890625e-10\"), e.precision += i, n = j(e, 1, n.times(r), new e(1));\n    for(var s = i; s--;){\n        var o = n.times(n);\n        n = o.times(o).minus(o).times(8).plus(1);\n    }\n    return e.precision -= i, n;\n}\nvar S = function() {\n    function e(t, r, s) {\n        var o, u = 0, l = t.length;\n        for(t = t.slice(); l--;)o = t[l] * r + u, t[l] = o % s | 0, u = o / s | 0;\n        return u && t.unshift(u), t;\n    }\n    function n(t, r, s, o) {\n        var u, l;\n        if (s != o) l = s > o ? 1 : -1;\n        else for(u = l = 0; u < s; u++)if (t[u] != r[u]) {\n            l = t[u] > r[u] ? 1 : -1;\n            break;\n        }\n        return l;\n    }\n    function i(t, r, s, o) {\n        for(var u = 0; s--;)t[s] -= u, u = t[s] < r[s] ? 1 : 0, t[s] = u * o + t[s] - r[s];\n        for(; !t[0] && t.length > 1;)t.shift();\n    }\n    return function(t, r, s, o, u, l) {\n        var f, c, a, d, g, v, N, A, M, q, E, P, Y, I, le, z, W, ce, T, y, ee = t.constructor, ae = t.s == r.s ? 1 : -1, R = t.d, k = r.d;\n        if (!R || !R[0] || !k || !k[0]) return new ee(!t.s || !r.s || (R ? k && R[0] == k[0] : !k) ? NaN : R && R[0] == 0 || !k ? ae * 0 : ae / 0);\n        for(l ? (g = 1, c = t.e - r.e) : (l = D, g = m, c = b(t.e / g) - b(r.e / g)), T = k.length, W = R.length, M = new ee(ae), q = M.d = [], a = 0; k[a] == (R[a] || 0); a++);\n        if (k[a] > (R[a] || 0) && c--, s == null ? (I = s = ee.precision, o = ee.rounding) : u ? I = s + (t.e - r.e) + 1 : I = s, I < 0) q.push(1), v = !0;\n        else {\n            if (I = I / g + 2 | 0, a = 0, T == 1) {\n                for(d = 0, k = k[0], I++; (a < W || d) && I--; a++)le = d * l + (R[a] || 0), q[a] = le / k | 0, d = le % k | 0;\n                v = d || a < W;\n            } else {\n                for(d = l / (k[0] + 1) | 0, d > 1 && (k = e(k, d, l), R = e(R, d, l), T = k.length, W = R.length), z = T, E = R.slice(0, T), P = E.length; P < T;)E[P++] = 0;\n                y = k.slice(), y.unshift(0), ce = k[0], k[1] >= l / 2 && ++ce;\n                do d = 0, f = n(k, E, T, P), f < 0 ? (Y = E[0], T != P && (Y = Y * l + (E[1] || 0)), d = Y / ce | 0, d > 1 ? (d >= l && (d = l - 1), N = e(k, d, l), A = N.length, P = E.length, f = n(N, E, A, P), f == 1 && (d--, i(N, T < A ? y : k, A, l))) : (d == 0 && (f = d = 1), N = k.slice()), A = N.length, A < P && N.unshift(0), i(E, N, P, l), f == -1 && (P = E.length, f = n(k, E, T, P), f < 1 && (d++, i(E, T < P ? y : k, P, l))), P = E.length) : f === 0 && (d++, E = [\n                    0\n                ]), q[a++] = d, f && E[0] ? E[P++] = R[z] || 0 : (E = [\n                    R[z]\n                ], P = 1);\n                while ((z++ < W || E[0] !== void 0) && I--);\n                v = E[0] !== void 0;\n            }\n            q[0] || q.shift();\n        }\n        if (g == 1) M.e = c, Te = v;\n        else {\n            for(a = 1, d = q[0]; d >= 10; d /= 10)a++;\n            M.e = a + c * g - 1, p(M, u ? s + M.e + 1 : s, o, v);\n        }\n        return M;\n    };\n}();\nfunction p(e, n, i, t) {\n    var r, s, o, u, l, f, c, a, d, g = e.constructor;\n    e: if (n != null) {\n        if (a = e.d, !a) return e;\n        for(r = 1, u = a[0]; u >= 10; u /= 10)r++;\n        if (s = n - r, s < 0) s += m, o = n, c = a[d = 0], l = c / C(10, r - o - 1) % 10 | 0;\n        else if (d = Math.ceil((s + 1) / m), u = a.length, d >= u) if (t) {\n            for(; u++ <= d;)a.push(0);\n            c = l = 0, r = 1, s %= m, o = s - m + 1;\n        } else break e;\n        else {\n            for(c = u = a[d], r = 1; u >= 10; u /= 10)r++;\n            s %= m, o = s - m + r, l = o < 0 ? 0 : c / C(10, r - o - 1) % 10 | 0;\n        }\n        if (t = t || n < 0 || a[d + 1] !== void 0 || (o < 0 ? c : c % C(10, r - o - 1)), f = i < 4 ? (l || t) && (i == 0 || i == (e.s < 0 ? 3 : 2)) : l > 5 || l == 5 && (i == 4 || t || i == 6 && (s > 0 ? o > 0 ? c / C(10, r - o) : 0 : a[d - 1]) % 10 & 1 || i == (e.s < 0 ? 8 : 7)), n < 1 || !a[0]) return a.length = 0, f ? (n -= e.e + 1, a[0] = C(10, (m - n % m) % m), e.e = -n || 0) : a[0] = e.e = 0, e;\n        if (s == 0 ? (a.length = d, u = 1, d--) : (a.length = d + 1, u = C(10, m - s), a[d] = o > 0 ? (c / C(10, r - o) % C(10, o) | 0) * u : 0), f) for(;;)if (d == 0) {\n            for(s = 1, o = a[0]; o >= 10; o /= 10)s++;\n            for(o = a[0] += u, u = 1; o >= 10; o /= 10)u++;\n            s != u && (e.e++, a[0] == D && (a[0] = 1));\n            break;\n        } else {\n            if (a[d] += u, a[d] != D) break;\n            a[d--] = 0, u = 1;\n        }\n        for(s = a.length; a[--s] === 0;)a.pop();\n    }\n    return w && (e.e > g.maxE ? (e.d = null, e.e = NaN) : e.e < g.minE && (e.e = 0, e.d = [\n        0\n    ])), e;\n}\nfunction F(e, n, i) {\n    if (!e.isFinite()) return Ve(e);\n    var t, r = e.e, s = O(e.d), o = s.length;\n    return n ? (i && (t = i - o) > 0 ? s = s.charAt(0) + \".\" + s.slice(1) + U(t) : o > 1 && (s = s.charAt(0) + \".\" + s.slice(1)), s = s + (e.e < 0 ? \"e\" : \"e+\") + e.e) : r < 0 ? (s = \"0.\" + U(-r - 1) + s, i && (t = i - o) > 0 && (s += U(t))) : r >= o ? (s += U(r + 1 - o), i && (t = i - r - 1) > 0 && (s = s + \".\" + U(t))) : ((t = r + 1) < o && (s = s.slice(0, t) + \".\" + s.slice(t)), i && (t = i - o) > 0 && (r + 1 === o && (s += \".\"), s += U(t))), s;\n}\n_c5 = F;\nfunction ue(e, n) {\n    var i = e[0];\n    for(n *= m; i >= 10; i /= 10)n++;\n    return n;\n}\nfunction se(e, n, i) {\n    if (n > rn) throw w = !0, i && (e.precision = i), Error(Le);\n    return p(new e(te), n, 1, !0);\n}\nfunction L(e, n, i) {\n    if (n > ve) throw Error(Le);\n    return p(new e(re), n, i, !0);\n}\n_c6 = L;\nfunction Ze(e) {\n    var n = e.length - 1, i = n * m + 1;\n    if (n = e[n], n) {\n        for(; n % 10 == 0; n /= 10)i--;\n        for(n = e[0]; n >= 10; n /= 10)i++;\n    }\n    return i;\n}\n_c7 = Ze;\nfunction U(e) {\n    for(var n = \"\"; e--;)n += \"0\";\n    return n;\n}\n_c8 = U;\nfunction Ue(e, n, i, t) {\n    var r, s = new e(1), o = Math.ceil(t / m + 4);\n    for(w = !1;;){\n        if (i % 2 && (s = s.times(n), _e(s.d, o) && (r = !0)), i = b(i / 2), i === 0) {\n            i = s.d.length - 1, r && s.d[i] === 0 && ++s.d[i];\n            break;\n        }\n        n = n.times(n), _e(n.d, o);\n    }\n    return w = !0, s;\n}\n_c9 = Ue;\nfunction Ae(e) {\n    return e.d[e.d.length - 1] & 1;\n}\n_c10 = Ae;\nfunction Be(e, n, i) {\n    for(var t, r = new e(n[0]), s = 0; ++s < n.length;)if (t = new e(n[s]), t.s) r[i](t) && (r = t);\n    else {\n        r = t;\n        break;\n    }\n    return r;\n}\n_c11 = Be;\nfunction Ee(e, n) {\n    var i, t, r, s, o, u, l, f = 0, c = 0, a = 0, d = e.constructor, g = d.rounding, v = d.precision;\n    if (!e.d || !e.d[0] || e.e > 17) return new d(e.d ? e.d[0] ? e.s < 0 ? 0 : 1 / 0 : 1 : e.s ? e.s < 0 ? 0 : e : NaN);\n    for(n == null ? (w = !1, l = v) : l = n, u = new d(.03125); e.e > -2;)e = e.times(u), a += 5;\n    for(t = Math.log(C(2, a)) / Math.LN10 * 2 + 5 | 0, l += t, i = s = o = new d(1), d.precision = l;;){\n        if (s = p(s.times(e), l, 1), i = i.times(++c), u = o.plus(S(s, i, l, 1)), O(u.d).slice(0, l) === O(o.d).slice(0, l)) {\n            for(r = a; r--;)o = p(o.times(o), l, 1);\n            if (n == null) if (f < 3 && x(o.d, l - t, g, f)) d.precision = l += 10, i = s = u = new d(1), c = 0, f++;\n            else return p(o, d.precision = v, g, w = !0);\n            else return d.precision = v, o;\n        }\n        o = u;\n    }\n}\n_c12 = Ee;\nfunction B(e, n) {\n    var i, t, r, s, o, u, l, f, c, a, d, g = 1, v = 10, N = e, A = N.d, M = N.constructor, q = M.rounding, E = M.precision;\n    if (N.s < 0 || !A || !A[0] || !N.e && A[0] == 1 && A.length == 1) return new M(A && !A[0] ? -1 / 0 : N.s != 1 ? NaN : A ? 0 : N);\n    if (n == null ? (w = !1, c = E) : c = n, M.precision = c += v, i = O(A), t = i.charAt(0), Math.abs(s = N.e) < 15e14) {\n        for(; t < 7 && t != 1 || t == 1 && i.charAt(1) > 3;)N = N.times(e), i = O(N.d), t = i.charAt(0), g++;\n        s = N.e, t > 1 ? (N = new M(\"0.\" + i), s++) : N = new M(t + \".\" + i.slice(1));\n    } else return f = se(M, c + 2, E).times(s + \"\"), N = B(new M(t + \".\" + i.slice(1)), c - v).plus(f), M.precision = E, n == null ? p(N, E, q, w = !0) : N;\n    for(a = N, l = o = N = S(N.minus(1), N.plus(1), c, 1), d = p(N.times(N), c, 1), r = 3;;){\n        if (o = p(o.times(d), c, 1), f = l.plus(S(o, new M(r), c, 1)), O(f.d).slice(0, c) === O(l.d).slice(0, c)) if (l = l.times(2), s !== 0 && (l = l.plus(se(M, c + 2, E).times(s + \"\"))), l = S(l, new M(g), c, 1), n == null) if (x(l.d, c - v, q, u)) M.precision = c += v, f = o = N = S(a.minus(1), a.plus(1), c, 1), d = p(N.times(N), c, 1), r = u = 1;\n        else return p(l, M.precision = E, q, w = !0);\n        else return M.precision = E, l;\n        l = f, r += 2;\n    }\n}\n_c13 = B;\nfunction Ve(e) {\n    return String(e.s * e.s / 0);\n}\n_c14 = Ve;\nfunction Se(e, n) {\n    var i, t, r;\n    for((i = n.indexOf(\".\")) > -1 && (n = n.replace(\".\", \"\")), (t = n.search(/e/i)) > 0 ? (i < 0 && (i = t), i += +n.slice(t + 1), n = n.substring(0, t)) : i < 0 && (i = n.length), t = 0; n.charCodeAt(t) === 48; t++);\n    for(r = n.length; n.charCodeAt(r - 1) === 48; --r);\n    if (n = n.slice(t, r), n) {\n        if (r -= t, e.e = i = i - t - 1, e.d = [], t = (i + 1) % m, i < 0 && (t += m), t < r) {\n            for(t && e.d.push(+n.slice(0, t)), r -= m; t < r;)e.d.push(+n.slice(t, t += m));\n            n = n.slice(t), t = m - n.length;\n        } else t -= r;\n        for(; t--;)n += \"0\";\n        e.d.push(+n), w && (e.e > e.constructor.maxE ? (e.d = null, e.e = NaN) : e.e < e.constructor.minE && (e.e = 0, e.d = [\n            0\n        ]));\n    } else e.e = 0, e.d = [\n        0\n    ];\n    return e;\n}\n_c15 = Se;\nfunction on(e, n) {\n    var i, t, r, s, o, u, l, f, c;\n    if (n.indexOf(\"_\") > -1) {\n        if (n = n.replace(/(\\d)_(?=\\d)/g, \"$1\"), Ie.test(n)) return Se(e, n);\n    } else if (n === \"Infinity\" || n === \"NaN\") return +n || (e.s = NaN), e.e = NaN, e.d = null, e;\n    if (en.test(n)) i = 16, n = n.toLowerCase();\n    else if (ye.test(n)) i = 2;\n    else if (nn.test(n)) i = 8;\n    else throw Error(V + n);\n    for(s = n.search(/p/i), s > 0 ? (l = +n.slice(s + 1), n = n.substring(2, s)) : n = n.slice(2), s = n.indexOf(\".\"), o = s >= 0, t = e.constructor, o && (n = n.replace(\".\", \"\"), u = n.length, s = u - s, r = Ue(t, new t(i), s, s * 2)), f = ie(n, i, D), c = f.length - 1, s = c; f[s] === 0; --s)f.pop();\n    return s < 0 ? new t(e.s * 0) : (e.e = ue(f, c), e.d = f, w = !1, o && (e = S(e, r, u * 4)), l && (e = e.times(Math.abs(l) < 54 ? C(2, l) : Q.pow(2, l))), w = !0, e);\n}\nfunction un(e, n) {\n    var i, t = n.d.length;\n    if (t < 3) return n.isZero() ? n : j(e, 2, n, n);\n    i = 1.4 * Math.sqrt(t), i = i > 16 ? 16 : i | 0, n = n.times(1 / fe(5, i)), n = j(e, 2, n, n);\n    for(var r, s = new e(5), o = new e(16), u = new e(20); i--;)r = n.times(n), n = n.times(s.plus(r.times(o.times(r).minus(u))));\n    return n;\n}\nfunction j(e, n, i, t, r) {\n    var s, o, u, l, f = 1, c = e.precision, a = Math.ceil(c / m);\n    for(w = !1, l = i.times(i), u = new e(t);;){\n        if (o = S(u.times(l), new e(n++ * n++), c, 1), u = r ? t.plus(o) : t.minus(o), t = S(o.times(l), new e(n++ * n++), c, 1), o = u.plus(t), o.d[a] !== void 0) {\n            for(s = a; o.d[s] === u.d[s] && s--;);\n            if (s == -1) break;\n        }\n        s = u, u = t, t = o, o = s, f++;\n    }\n    return w = !0, o.d.length = a + 1, o;\n}\nfunction fe(e, n) {\n    for(var i = e; --n;)i *= e;\n    return i;\n}\nfunction $e(e, n) {\n    var i, t = n.s < 0, r = L(e, e.precision, 1), s = r.times(.5);\n    if (n = n.abs(), n.lte(s)) return Z = t ? 4 : 1, n;\n    if (i = n.divToInt(r), i.isZero()) Z = t ? 3 : 2;\n    else {\n        if (n = n.minus(i.times(r)), n.lte(s)) return Z = Ae(i) ? t ? 2 : 3 : t ? 4 : 1, n;\n        Z = Ae(i) ? t ? 1 : 4 : t ? 3 : 2;\n    }\n    return n.minus(r).abs();\n}\nfunction ke(e, n, i, t) {\n    var r, s, o, u, l, f, c, a, d, g = e.constructor, v = i !== void 0;\n    if (v ? (_(i, 1, $), t === void 0 ? t = g.rounding : _(t, 0, 8)) : (i = g.precision, t = g.rounding), !e.isFinite()) c = Ve(e);\n    else {\n        for(c = F(e), o = c.indexOf(\".\"), v ? (r = 2, n == 16 ? i = i * 4 - 3 : n == 8 && (i = i * 3 - 2)) : r = n, o >= 0 && (c = c.replace(\".\", \"\"), d = new g(1), d.e = c.length - o, d.d = ie(F(d), 10, r), d.e = d.d.length), a = ie(c, 10, r), s = l = a.length; a[--l] == 0;)a.pop();\n        if (!a[0]) c = v ? \"0p+0\" : \"0\";\n        else {\n            if (o < 0 ? s-- : (e = new g(e), e.d = a, e.e = s, e = S(e, d, i, t, 0, r), a = e.d, s = e.e, f = Te), o = a[i], u = r / 2, f = f || a[i + 1] !== void 0, f = t < 4 ? (o !== void 0 || f) && (t === 0 || t === (e.s < 0 ? 3 : 2)) : o > u || o === u && (t === 4 || f || t === 6 && a[i - 1] & 1 || t === (e.s < 0 ? 8 : 7)), a.length = i, f) for(; ++a[--i] > r - 1;)a[i] = 0, i || (++s, a.unshift(1));\n            for(l = a.length; !a[l - 1]; --l);\n            for(o = 0, c = \"\"; o < l; o++)c += we.charAt(a[o]);\n            if (v) {\n                if (l > 1) if (n == 16 || n == 8) {\n                    for(o = n == 16 ? 4 : 3, --l; l % o; l++)c += \"0\";\n                    for(a = ie(c, r, n), l = a.length; !a[l - 1]; --l);\n                    for(o = 1, c = \"1.\"; o < l; o++)c += we.charAt(a[o]);\n                } else c = c.charAt(0) + \".\" + c.slice(1);\n                c = c + (s < 0 ? \"p\" : \"p+\") + s;\n            } else if (s < 0) {\n                for(; ++s;)c = \"0\" + c;\n                c = \"0.\" + c;\n            } else if (++s > l) for(s -= l; s--;)c += \"0\";\n            else s < l && (c = c.slice(0, s) + \".\" + c.slice(s));\n        }\n        c = (n == 16 ? \"0x\" : n == 2 ? \"0b\" : n == 8 ? \"0o\" : \"\") + c;\n    }\n    return e.s < 0 ? \"-\" + c : c;\n}\nfunction _e(e, n) {\n    if (e.length > n) return e.length = n, !0;\n}\nfunction fn(e) {\n    return new this(e).abs();\n}\nfunction ln(e) {\n    return new this(e).acos();\n}\nfunction cn(e) {\n    return new this(e).acosh();\n}\nfunction an(e, n) {\n    return new this(e).plus(n);\n}\nfunction dn(e) {\n    return new this(e).asin();\n}\nfunction hn(e) {\n    return new this(e).asinh();\n}\nfunction pn(e) {\n    return new this(e).atan();\n}\nfunction gn(e) {\n    return new this(e).atanh();\n}\nfunction mn(e, n) {\n    e = new this(e), n = new this(n);\n    var i, t = this.precision, r = this.rounding, s = t + 4;\n    return !e.s || !n.s ? i = new this(NaN) : !e.d && !n.d ? (i = L(this, s, 1).times(n.s > 0 ? .25 : .75), i.s = e.s) : !n.d || e.isZero() ? (i = n.s < 0 ? L(this, t, r) : new this(0), i.s = e.s) : !e.d || n.isZero() ? (i = L(this, s, 1).times(.5), i.s = e.s) : n.s < 0 ? (this.precision = s, this.rounding = 1, i = this.atan(S(e, n, s, 1)), n = L(this, s, 1), this.precision = t, this.rounding = r, i = e.s < 0 ? i.minus(n) : i.plus(n)) : i = this.atan(S(e, n, s, 1)), i;\n}\nfunction wn(e) {\n    return new this(e).cbrt();\n}\nfunction Nn(e) {\n    return p(e = new this(e), e.e + 1, 2);\n}\n_c16 = Nn;\nfunction vn(e, n, i) {\n    return new this(e).clamp(n, i);\n}\nfunction En(e) {\n    if (!e || typeof e != \"object\") throw Error(oe + \"Object expected\");\n    var n, i, t, r = e.defaults === !0, s = [\n        \"precision\",\n        1,\n        $,\n        \"rounding\",\n        0,\n        8,\n        \"toExpNeg\",\n        -H,\n        0,\n        \"toExpPos\",\n        0,\n        H,\n        \"maxE\",\n        0,\n        H,\n        \"minE\",\n        -H,\n        0,\n        \"modulo\",\n        0,\n        9\n    ];\n    for(n = 0; n < s.length; n += 3)if (i = s[n], r && (this[i] = Ne[i]), (t = e[i]) !== void 0) if (b(t) === t && t >= s[n + 1] && t <= s[n + 2]) this[i] = t;\n    else throw Error(V + i + \": \" + t);\n    if (i = \"crypto\", r && (this[i] = Ne[i]), (t = e[i]) !== void 0) if (t === !0 || t === !1 || t === 0 || t === 1) if (t) if (typeof crypto < \"u\" && crypto && (crypto.getRandomValues || crypto.randomBytes)) this[i] = !0;\n    else throw Error(De);\n    else this[i] = !1;\n    else throw Error(V + i + \": \" + t);\n    return this;\n}\n_c17 = En;\nfunction Sn(e) {\n    return new this(e).cos();\n}\n_c18 = Sn;\nfunction kn(e) {\n    return new this(e).cosh();\n}\nfunction He(e) {\n    var n, i, t;\n    function r(s) {\n        var o, u, l, f = this;\n        if (!(f instanceof r)) return new r(s);\n        if (f.constructor = r, qe(s)) {\n            f.s = s.s, w ? !s.d || s.e > r.maxE ? (f.e = NaN, f.d = null) : s.e < r.minE ? (f.e = 0, f.d = [\n                0\n            ]) : (f.e = s.e, f.d = s.d.slice()) : (f.e = s.e, f.d = s.d ? s.d.slice() : s.d);\n            return;\n        }\n        if (l = typeof s, l === \"number\") {\n            if (s === 0) {\n                f.s = 1 / s < 0 ? -1 : 1, f.e = 0, f.d = [\n                    0\n                ];\n                return;\n            }\n            if (s < 0 ? (s = -s, f.s = -1) : f.s = 1, s === ~~s && s < 1e7) {\n                for(o = 0, u = s; u >= 10; u /= 10)o++;\n                w ? o > r.maxE ? (f.e = NaN, f.d = null) : o < r.minE ? (f.e = 0, f.d = [\n                    0\n                ]) : (f.e = o, f.d = [\n                    s\n                ]) : (f.e = o, f.d = [\n                    s\n                ]);\n                return;\n            } else if (s * 0 !== 0) {\n                s || (f.s = NaN), f.e = NaN, f.d = null;\n                return;\n            }\n            return Se(f, s.toString());\n        } else if (l !== \"string\") throw Error(V + s);\n        return (u = s.charCodeAt(0)) === 45 ? (s = s.slice(1), f.s = -1) : (u === 43 && (s = s.slice(1)), f.s = 1), Ie.test(s) ? Se(f, s) : on(f, s);\n    }\n    if (r.prototype = h, r.ROUND_UP = 0, r.ROUND_DOWN = 1, r.ROUND_CEIL = 2, r.ROUND_FLOOR = 3, r.ROUND_HALF_UP = 4, r.ROUND_HALF_DOWN = 5, r.ROUND_HALF_EVEN = 6, r.ROUND_HALF_CEIL = 7, r.ROUND_HALF_FLOOR = 8, r.EUCLID = 9, r.config = r.set = En, r.clone = He, r.isDecimal = qe, r.abs = fn, r.acos = ln, r.acosh = cn, r.add = an, r.asin = dn, r.asinh = hn, r.atan = pn, r.atanh = gn, r.atan2 = mn, r.cbrt = wn, r.ceil = Nn, r.clamp = vn, r.cos = Sn, r.cosh = kn, r.div = Mn, r.exp = Cn, r.floor = On, r.hypot = Pn, r.ln = Rn, r.log = bn, r.log10 = _n, r.log2 = An, r.max = qn, r.min = Tn, r.mod = Ln, r.mul = Dn, r.pow = Fn, r.random = In, r.round = Zn, r.sign = Un, r.sin = Bn, r.sinh = Vn, r.sqrt = $n, r.sub = Hn, r.sum = jn, r.tan = Wn, r.tanh = Gn, r.trunc = Jn, e === void 0 && (e = {}), e && e.defaults !== !0) for(t = [\n        \"precision\",\n        \"rounding\",\n        \"toExpNeg\",\n        \"toExpPos\",\n        \"maxE\",\n        \"minE\",\n        \"modulo\",\n        \"crypto\"\n    ], n = 0; n < t.length;)e.hasOwnProperty(i = t[n++]) || (e[i] = this[i]);\n    return r.config(e), r;\n}\n_c19 = He;\nfunction Mn(e, n) {\n    return new this(e).div(n);\n}\n_c20 = Mn;\nfunction Cn(e) {\n    return new this(e).exp();\n}\n_c21 = Cn;\nfunction On(e) {\n    return p(e = new this(e), e.e + 1, 3);\n}\n_c22 = On;\nfunction Pn() {\n    var e, n, i = new this(0);\n    for(w = !1, e = 0; e < arguments.length;)if (n = new this(arguments[e++]), n.d) i.d && (i = i.plus(n.times(n)));\n    else {\n        if (n.s) return w = !0, new this(1 / 0);\n        i = n;\n    }\n    return w = !0, i.sqrt();\n}\n_c23 = Pn;\nfunction qe(e) {\n    return e instanceof Q || e && e.toStringTag === Fe || !1;\n}\nfunction Rn(e) {\n    return new this(e).ln();\n}\n_c24 = Rn;\nfunction bn(e, n) {\n    return new this(e).log(n);\n}\nfunction An(e) {\n    return new this(e).log(2);\n}\n_c25 = An;\nfunction _n(e) {\n    return new this(e).log(10);\n}\nfunction qn() {\n    return Be(this, arguments, \"lt\");\n}\nfunction Tn() {\n    return Be(this, arguments, \"gt\");\n}\n_c26 = Tn;\nfunction Ln(e, n) {\n    return new this(e).mod(n);\n}\n_c27 = Ln;\nfunction Dn(e, n) {\n    return new this(e).mul(n);\n}\n_c28 = Dn;\nfunction Fn(e, n) {\n    return new this(e).pow(n);\n}\n_c29 = Fn;\nfunction In(e) {\n    var n, i, t, r, s = 0, o = new this(1), u = [];\n    if (e === void 0 ? e = this.precision : _(e, 1, $), t = Math.ceil(e / m), this.crypto) if (crypto.getRandomValues) for(n = crypto.getRandomValues(new Uint32Array(t)); s < t;)r = n[s], r >= 429e7 ? n[s] = crypto.getRandomValues(new Uint32Array(1))[0] : u[s++] = r % 1e7;\n    else if (crypto.randomBytes) {\n        for(n = crypto.randomBytes(t *= 4); s < t;)r = n[s] + (n[s + 1] << 8) + (n[s + 2] << 16) + ((n[s + 3] & 127) << 24), r >= 214e7 ? crypto.randomBytes(4).copy(n, s) : (u.push(r % 1e7), s += 4);\n        s = t / 4;\n    } else throw Error(De);\n    else for(; s < t;)u[s++] = Math.random() * 1e7 | 0;\n    for(t = u[--s], e %= m, t && e && (r = C(10, m - e), u[s] = (t / r | 0) * r); u[s] === 0; s--)u.pop();\n    if (s < 0) i = 0, u = [\n        0\n    ];\n    else {\n        for(i = -1; u[0] === 0; i -= m)u.shift();\n        for(t = 1, r = u[0]; r >= 10; r /= 10)t++;\n        t < m && (i -= m - t);\n    }\n    return o.e = i, o.d = u, o;\n}\n_c30 = In;\nfunction Zn(e) {\n    return p(e = new this(e), e.e + 1, this.rounding);\n}\n_c31 = Zn;\nfunction Un(e) {\n    return e = new this(e), e.d ? e.d[0] ? e.s : 0 * e.s : e.s || NaN;\n}\n_c32 = Un;\nfunction Bn(e) {\n    return new this(e).sin();\n}\n_c33 = Bn;\nfunction Vn(e) {\n    return new this(e).sinh();\n}\n_c34 = Vn;\nfunction $n(e) {\n    return new this(e).sqrt();\n}\nfunction Hn(e, n) {\n    return new this(e).sub(n);\n}\n_c35 = Hn;\nfunction jn() {\n    var e = 0, n = arguments, i = new this(n[e]);\n    for(w = !1; i.s && ++e < n.length;)i = i.plus(n[e]);\n    return w = !0, p(i, this.precision, this.rounding);\n}\nfunction Wn(e) {\n    return new this(e).tan();\n}\n_c36 = Wn;\nfunction Gn(e) {\n    return new this(e).tanh();\n}\n_c37 = Gn;\nfunction Jn(e) {\n    return p(e = new this(e), e.e + 1, 1);\n}\n_c38 = Jn;\nh[Symbol.for(\"nodejs.util.inspect.custom\")] = h.toString;\nh[Symbol.toStringTag] = \"Decimal\";\nvar Q = h.constructor = He(Ne);\nte = new Q(te);\nre = new Q(re);\nvar je = Q;\n0 && (0); /*! Bundled license information:\n\ndecimal.js/decimal.mjs:\n  (*!\n   *  decimal.js v10.4.3\n   *  An arbitrary-precision Decimal type for JavaScript.\n   *  https://github.com/MikeMcl/decimal.js\n   *  Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\n   *  MIT Licence\n   *)\n*/  //# sourceMappingURL=index-browser.js.map\nvar _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18, _c19, _c20, _c21, _c22, _c23, _c24, _c25, _c26, _c27, _c28, _c29, _c30, _c31, _c32, _c33, _c34, _c35, _c36, _c37, _c38;\n$RefreshReg$(_c, \"Ke\");\n$RefreshReg$(_c1, \"Ce\");\n$RefreshReg$(_c2, \"Pe\");\n$RefreshReg$(_c3, \"Re\");\n$RefreshReg$(_c4, \"O\");\n$RefreshReg$(_c5, \"F\");\n$RefreshReg$(_c6, \"L\");\n$RefreshReg$(_c7, \"Ze\");\n$RefreshReg$(_c8, \"U\");\n$RefreshReg$(_c9, \"Ue\");\n$RefreshReg$(_c10, \"Ae\");\n$RefreshReg$(_c11, \"Be\");\n$RefreshReg$(_c12, \"Ee\");\n$RefreshReg$(_c13, \"B\");\n$RefreshReg$(_c14, \"Ve\");\n$RefreshReg$(_c15, \"Se\");\n$RefreshReg$(_c16, \"Nn\");\n$RefreshReg$(_c17, \"En\");\n$RefreshReg$(_c18, \"Sn\");\n$RefreshReg$(_c19, \"He\");\n$RefreshReg$(_c20, \"Mn\");\n$RefreshReg$(_c21, \"Cn\");\n$RefreshReg$(_c22, \"On\");\n$RefreshReg$(_c23, \"Pn\");\n$RefreshReg$(_c24, \"Rn\");\n$RefreshReg$(_c25, \"An\");\n$RefreshReg$(_c26, \"Tn\");\n$RefreshReg$(_c27, \"Ln\");\n$RefreshReg$(_c28, \"Dn\");\n$RefreshReg$(_c29, \"Fn\");\n$RefreshReg$(_c30, \"In\");\n$RefreshReg$(_c31, \"Zn\");\n$RefreshReg$(_c32, \"Un\");\n$RefreshReg$(_c33, \"Bn\");\n$RefreshReg$(_c34, \"Vn\");\n$RefreshReg$(_c35, \"Hn\");\n$RefreshReg$(_c36, \"Wn\");\n$RefreshReg$(_c37, \"Gn\");\n$RefreshReg$(_c38, \"Jn\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@prisma/client/runtime/index-browser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/framer-motion/dist/cjs/index.js":
/*!******************************************************!*\
  !*** ./node_modules/framer-motion/dist/cjs/index.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$(), _s3 = $RefreshSig$(), _s4 = $RefreshSig$(), _s5 = $RefreshSig$(), _s6 = $RefreshSig$(), _s7 = $RefreshSig$(), _s8 = $RefreshSig$(), _s9 = $RefreshSig$(), _s10 = $RefreshSig$(), _s11 = $RefreshSig$(), _s12 = $RefreshSig$(), _s13 = $RefreshSig$(), _s14 = $RefreshSig$(), _s15 = $RefreshSig$(), _s16 = $RefreshSig$(), _s17 = $RefreshSig$(), _s18 = $RefreshSig$(), _s19 = $RefreshSig$(), _s20 = $RefreshSig$(), _s21 = $RefreshSig$(), _s22 = $RefreshSig$(), _s23 = $RefreshSig$(), _s24 = $RefreshSig$(), _s25 = $RefreshSig$(), _s26 = $RefreshSig$(), _s27 = $RefreshSig$(), _s28 = $RefreshSig$(), _s29 = $RefreshSig$(), _s30 = $RefreshSig$(), _s31 = $RefreshSig$(), _s32 = $RefreshSig$(), _s33 = $RefreshSig$(), _s34 = $RefreshSig$(), _s35 = $RefreshSig$(), _s36 = $RefreshSig$(), _s37 = $RefreshSig$(), _s38 = $RefreshSig$(), _s39 = $RefreshSig$(), _s40 = $RefreshSig$(), _s41 = $RefreshSig$(), _s42 = $RefreshSig$(), _s43 = $RefreshSig$(), _s44 = $RefreshSig$(), _s45 = $RefreshSig$(), _s46 = $RefreshSig$(), _s47 = $RefreshSig$(), _s48 = $RefreshSig$(), _s49 = $RefreshSig$(), _s50 = $RefreshSig$(), _s51 = $RefreshSig$(), _s52 = $RefreshSig$(), _s53 = $RefreshSig$(), _s54 = $RefreshSig$();\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar motionUtils = __webpack_require__(/*! motion-utils */ \"(app-pages-browser)/./node_modules/motion-utils/dist/cjs/index.js\");\nvar motionDom = __webpack_require__(/*! motion-dom */ \"(app-pages-browser)/./node_modules/motion-dom/dist/cjs/index.js\");\nvar jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-runtime.js\");\nvar React = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\nfunction _interopNamespaceDefault(e) {\n    var n = Object.create(null);\n    if (e) {\n        Object.keys(e).forEach(function(k) {\n            if (k !== \"default\") {\n                var d = Object.getOwnPropertyDescriptor(e, k);\n                Object.defineProperty(n, k, d.get ? d : {\n                    enumerable: true,\n                    get: function() {\n                        return e[k];\n                    }\n                });\n            }\n        });\n    }\n    n.default = e;\n    return Object.freeze(n);\n}\nvar React__namespace = /*#__PURE__*/ _interopNamespaceDefault(React);\n_c = React__namespace;\nconst warned = new Set();\nfunction warnOnce(condition, message, element) {\n    if (condition || warned.has(message)) return;\n    console.warn(message);\n    if (element) console.warn(element);\n    warned.add(message);\n}\nfunction createDOMMotionComponentProxy(componentFactory) {\n    if (typeof Proxy === \"undefined\") {\n        return componentFactory;\n    }\n    /**\n     * A cache of generated `motion` components, e.g `motion.div`, `motion.input` etc.\n     * Rather than generating them anew every render.\n     */ const componentCache = new Map();\n    const deprecatedFactoryFunction = function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        if (true) {\n            warnOnce(false, \"motion() is deprecated. Use motion.create() instead.\");\n        }\n        return componentFactory(...args);\n    };\n    return new Proxy(deprecatedFactoryFunction, {\n        /**\n         * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.\n         * The prop name is passed through as `key` and we can use that to generate a `motion`\n         * DOM component with that name.\n         */ get: (_target, key)=>{\n            if (key === \"create\") return componentFactory;\n            /**\n             * If this element doesn't exist in the component cache, create it and cache.\n             */ if (!componentCache.has(key)) {\n                componentCache.set(key, componentFactory(key));\n            }\n            return componentCache.get(key);\n        }\n    });\n}\nfunction isAnimationControls(v) {\n    return v !== null && typeof v === \"object\" && typeof v.start === \"function\";\n}\nconst isKeyframesTarget = (v)=>{\n    return Array.isArray(v);\n};\nfunction shallowCompare(next, prev) {\n    if (!Array.isArray(prev)) return false;\n    const prevLength = prev.length;\n    if (prevLength !== next.length) return false;\n    for(let i = 0; i < prevLength; i++){\n        if (prev[i] !== next[i]) return false;\n    }\n    return true;\n}\n/**\n * Decides if the supplied variable is variant label\n */ function isVariantLabel(v) {\n    return typeof v === \"string\" || Array.isArray(v);\n}\nfunction getValueState(visualElement) {\n    const state = [\n        {},\n        {}\n    ];\n    visualElement === null || visualElement === void 0 ? void 0 : visualElement.values.forEach((value, key)=>{\n        state[0][key] = value.get();\n        state[1][key] = value.getVelocity();\n    });\n    return state;\n}\nfunction resolveVariantFromProps(props, definition, custom, visualElement) {\n    /**\n     * If the variant definition is a function, resolve.\n     */ if (typeof definition === \"function\") {\n        const [current, velocity] = getValueState(visualElement);\n        definition = definition(custom !== undefined ? custom : props.custom, current, velocity);\n    }\n    /**\n     * If the variant definition is a variant label, or\n     * the function returned a variant label, resolve.\n     */ if (typeof definition === \"string\") {\n        definition = props.variants && props.variants[definition];\n    }\n    /**\n     * At this point we've resolved both functions and variant labels,\n     * but the resolved variant label might itself have been a function.\n     * If so, resolve. This can only have returned a valid target object.\n     */ if (typeof definition === \"function\") {\n        const [current, velocity] = getValueState(visualElement);\n        definition = definition(custom !== undefined ? custom : props.custom, current, velocity);\n    }\n    return definition;\n}\nfunction resolveVariant(visualElement, definition, custom) {\n    const props = visualElement.getProps();\n    return resolveVariantFromProps(props, definition, custom !== undefined ? custom : props.custom, visualElement);\n}\nconst variantPriorityOrder = [\n    \"animate\",\n    \"whileInView\",\n    \"whileFocus\",\n    \"whileHover\",\n    \"whileTap\",\n    \"whileDrag\",\n    \"exit\"\n];\nconst variantProps = [\n    \"initial\",\n    ...variantPriorityOrder\n];\n/**\n * Generate a list of every possible transform key.\n */ const transformPropOrder = [\n    \"transformPerspective\",\n    \"x\",\n    \"y\",\n    \"z\",\n    \"translateX\",\n    \"translateY\",\n    \"translateZ\",\n    \"scale\",\n    \"scaleX\",\n    \"scaleY\",\n    \"rotate\",\n    \"rotateX\",\n    \"rotateY\",\n    \"rotateZ\",\n    \"skew\",\n    \"skewX\",\n    \"skewY\"\n];\n/**\n * A quick lookup for transform props.\n */ const transformProps = new Set(transformPropOrder);\n/**\n * Converts seconds to milliseconds\n *\n * @param seconds - Time in seconds.\n * @return milliseconds - Converted time in milliseconds.\n */ const secondsToMilliseconds = (seconds)=>seconds * 1000;\nconst millisecondsToSeconds = (milliseconds)=>milliseconds / 1000;\nconst underDampedSpring = {\n    type: \"spring\",\n    stiffness: 500,\n    damping: 25,\n    restSpeed: 10\n};\nconst criticallyDampedSpring = (target)=>({\n        type: \"spring\",\n        stiffness: 550,\n        damping: target === 0 ? 2 * Math.sqrt(550) : 30,\n        restSpeed: 10\n    });\nconst keyframesTransition = {\n    type: \"keyframes\",\n    duration: 0.8\n};\n/**\n * Default easing curve is a slightly shallower version of\n * the default browser easing curve.\n */ const ease = {\n    type: \"keyframes\",\n    ease: [\n        0.25,\n        0.1,\n        0.35,\n        1\n    ],\n    duration: 0.3\n};\nconst getDefaultTransition = (valueKey, param)=>{\n    let { keyframes } = param;\n    if (keyframes.length > 2) {\n        return keyframesTransition;\n    } else if (transformProps.has(valueKey)) {\n        return valueKey.startsWith(\"scale\") ? criticallyDampedSpring(keyframes[1]) : underDampedSpring;\n    }\n    return ease;\n};\nfunction getValueTransition$1(transition, key) {\n    return transition ? transition[key] || transition[\"default\"] || transition : undefined;\n}\nconst MotionGlobalConfig = {\n    skipAnimations: false,\n    useManualTiming: false\n};\nconst instantAnimationState = {\n    current: false\n};\nconst isNotNull = (value)=>value !== null;\nfunction getFinalKeyframe(keyframes, param, finalKeyframe) {\n    let { repeat, repeatType = \"loop\" } = param;\n    const resolvedKeyframes = keyframes.filter(isNotNull);\n    const index = repeat && repeatType !== \"loop\" && repeat % 2 === 1 ? 0 : resolvedKeyframes.length - 1;\n    return !index || finalKeyframe === undefined ? resolvedKeyframes[index] : finalKeyframe;\n}\nfunction createRenderStep(runNextFrame) {\n    /**\n     * We create and reuse two queues, one to queue jobs for the current frame\n     * and one for the next. We reuse to avoid triggering GC after x frames.\n     */ let thisFrame = new Set();\n    let nextFrame = new Set();\n    /**\n     * Track whether we're currently processing jobs in this step. This way\n     * we can decide whether to schedule new jobs for this frame or next.\n     */ let isProcessing = false;\n    let flushNextFrame = false;\n    /**\n     * A set of processes which were marked keepAlive when scheduled.\n     */ const toKeepAlive = new WeakSet();\n    let latestFrameData = {\n        delta: 0.0,\n        timestamp: 0.0,\n        isProcessing: false\n    };\n    function triggerCallback(callback) {\n        if (toKeepAlive.has(callback)) {\n            step.schedule(callback);\n            runNextFrame();\n        }\n        callback(latestFrameData);\n    }\n    const step = {\n        /**\n         * Schedule a process to run on the next frame.\n         */ schedule: function(callback) {\n            let keepAlive = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false, immediate = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;\n            const addToCurrentFrame = immediate && isProcessing;\n            const queue = addToCurrentFrame ? thisFrame : nextFrame;\n            if (keepAlive) toKeepAlive.add(callback);\n            if (!queue.has(callback)) queue.add(callback);\n            return callback;\n        },\n        /**\n         * Cancel the provided callback from running on the next frame.\n         */ cancel: (callback)=>{\n            nextFrame.delete(callback);\n            toKeepAlive.delete(callback);\n        },\n        /**\n         * Execute all schedule callbacks.\n         */ process: (frameData)=>{\n            latestFrameData = frameData;\n            /**\n             * If we're already processing we've probably been triggered by a flushSync\n             * inside an existing process. Instead of executing, mark flushNextFrame\n             * as true and ensure we flush the following frame at the end of this one.\n             */ if (isProcessing) {\n                flushNextFrame = true;\n                return;\n            }\n            isProcessing = true;\n            [thisFrame, nextFrame] = [\n                nextFrame,\n                thisFrame\n            ];\n            // Execute this frame\n            thisFrame.forEach(triggerCallback);\n            // Clear the frame so no callbacks remain. This is to avoid\n            // memory leaks should this render step not run for a while.\n            thisFrame.clear();\n            isProcessing = false;\n            if (flushNextFrame) {\n                flushNextFrame = false;\n                step.process(frameData);\n            }\n        }\n    };\n    return step;\n}\nconst stepsOrder = [\n    \"read\",\n    \"resolveKeyframes\",\n    \"update\",\n    \"preRender\",\n    \"render\",\n    \"postRender\"\n];\nconst maxElapsed$1 = 40;\nfunction createRenderBatcher(scheduleNextBatch, allowKeepAlive) {\n    let runNextFrame = false;\n    let useDefaultElapsed = true;\n    const state = {\n        delta: 0.0,\n        timestamp: 0.0,\n        isProcessing: false\n    };\n    const flagRunNextFrame = ()=>runNextFrame = true;\n    const steps = stepsOrder.reduce((acc, key)=>{\n        acc[key] = createRenderStep(flagRunNextFrame);\n        return acc;\n    }, {});\n    const { read, resolveKeyframes, update, preRender, render, postRender } = steps;\n    const processBatch = ()=>{\n        const timestamp = MotionGlobalConfig.useManualTiming ? state.timestamp : performance.now();\n        runNextFrame = false;\n        state.delta = useDefaultElapsed ? 1000 / 60 : Math.max(Math.min(timestamp - state.timestamp, maxElapsed$1), 1);\n        state.timestamp = timestamp;\n        state.isProcessing = true;\n        // Unrolled render loop for better per-frame performance\n        read.process(state);\n        resolveKeyframes.process(state);\n        update.process(state);\n        preRender.process(state);\n        render.process(state);\n        postRender.process(state);\n        state.isProcessing = false;\n        if (runNextFrame && allowKeepAlive) {\n            useDefaultElapsed = false;\n            scheduleNextBatch(processBatch);\n        }\n    };\n    const wake = ()=>{\n        runNextFrame = true;\n        useDefaultElapsed = true;\n        if (!state.isProcessing) {\n            scheduleNextBatch(processBatch);\n        }\n    };\n    const schedule = stepsOrder.reduce((acc, key)=>{\n        const step = steps[key];\n        acc[key] = function(process) {\n            let keepAlive = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false, immediate = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;\n            if (!runNextFrame) wake();\n            return step.schedule(process, keepAlive, immediate);\n        };\n        return acc;\n    }, {});\n    const cancel = (process)=>{\n        for(let i = 0; i < stepsOrder.length; i++){\n            steps[stepsOrder[i]].cancel(process);\n        }\n    };\n    return {\n        schedule,\n        cancel,\n        state,\n        steps\n    };\n}\nconst { schedule: frame, cancel: cancelFrame, state: frameData, steps: frameSteps } = createRenderBatcher(typeof requestAnimationFrame !== \"undefined\" ? requestAnimationFrame : motionUtils.noop, true);\n/*\n  Bezier function generator\n  This has been modified from Gaëtan Renaudeau's BezierEasing\n  https://github.com/gre/bezier-easing/blob/master/src/index.js\n  https://github.com/gre/bezier-easing/blob/master/LICENSE\n  \n  I've removed the newtonRaphsonIterate algo because in benchmarking it\n  wasn't noticiably faster than binarySubdivision, indeed removing it\n  usually improved times, depending on the curve.\n  I also removed the lookup table, as for the added bundle size and loop we're\n  only cutting ~4 or so subdivision iterations. I bumped the max iterations up\n  to 12 to compensate and this still tended to be faster for no perceivable\n  loss in accuracy.\n  Usage\n    const easeOut = cubicBezier(.17,.67,.83,.67);\n    const x = easeOut(0.5); // returns 0.627...\n*/ // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nconst calcBezier = (t, a1, a2)=>(((1.0 - 3.0 * a2 + 3.0 * a1) * t + (3.0 * a2 - 6.0 * a1)) * t + 3.0 * a1) * t;\nconst subdivisionPrecision = 0.0000001;\nconst subdivisionMaxIterations = 12;\nfunction binarySubdivide(x, lowerBound, upperBound, mX1, mX2) {\n    let currentX;\n    let currentT;\n    let i = 0;\n    do {\n        currentT = lowerBound + (upperBound - lowerBound) / 2.0;\n        currentX = calcBezier(currentT, mX1, mX2) - x;\n        if (currentX > 0.0) {\n            upperBound = currentT;\n        } else {\n            lowerBound = currentT;\n        }\n    }while (Math.abs(currentX) > subdivisionPrecision && ++i < subdivisionMaxIterations);\n    return currentT;\n}\nfunction cubicBezier(mX1, mY1, mX2, mY2) {\n    // If this is a linear gradient, return linear easing\n    if (mX1 === mY1 && mX2 === mY2) return motionUtils.noop;\n    const getTForX = (aX)=>binarySubdivide(aX, 0, 1, mX1, mX2);\n    // If animation is at start/end, return t without easing\n    return (t)=>t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);\n}\n// Accepts an easing function and returns a new one that outputs mirrored values for\n// the second half of the animation. Turns easeIn into easeInOut.\nconst mirrorEasing = (easing)=>(p)=>p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;\n// Accepts an easing function and returns a new one that outputs reversed values.\n// Turns easeIn into easeOut.\nconst reverseEasing = (easing)=>(p)=>1 - easing(1 - p);\nconst backOut = /*@__PURE__*/ cubicBezier(0.33, 1.53, 0.69, 0.99);\nconst backIn = /*@__PURE__*/ reverseEasing(backOut);\nconst backInOut = /*@__PURE__*/ mirrorEasing(backIn);\nconst anticipate = (p)=>(p *= 2) < 1 ? 0.5 * backIn(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));\nconst circIn = (p)=>1 - Math.sin(Math.acos(p));\nconst circOut = reverseEasing(circIn);\nconst circInOut = mirrorEasing(circIn);\n/**\n * Check if the value is a zero value string like \"0px\" or \"0%\"\n */ const isZeroValueString = (v)=>/^0[^.\\s]+$/u.test(v);\nfunction isNone(value) {\n    if (typeof value === \"number\") {\n        return value === 0;\n    } else if (value !== null) {\n        return value === \"none\" || value === \"0\" || isZeroValueString(value);\n    } else {\n        return true;\n    }\n}\n/**\n * Check if value is a numerical string, ie a string that is purely a number eg \"100\" or \"-100.1\"\n */ const isNumericalString = (v)=>/^-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)$/u.test(v);\nconst checkStringStartsWith = (token)=>(key)=>typeof key === \"string\" && key.startsWith(token);\nconst isCSSVariableName = /*@__PURE__*/ checkStringStartsWith(\"--\");\nconst startsAsVariableToken = /*@__PURE__*/ checkStringStartsWith(\"var(--\");\nconst isCSSVariableToken = (value)=>{\n    const startsWithToken = startsAsVariableToken(value);\n    if (!startsWithToken) return false;\n    // Ensure any comments are stripped from the value as this can harm performance of the regex.\n    return singleCssVariableRegex.test(value.split(\"/*\")[0].trim());\n};\nconst singleCssVariableRegex = /var\\(--(?:[\\w-]+\\s*|[\\w-]+\\s*,(?:\\s*[^)(\\s]|\\s*\\((?:[^)(]|\\([^)(]*\\))*\\))+\\s*)\\)$/iu;\n/**\n * Parse Framer's special CSS variable format into a CSS token and a fallback.\n *\n * ```\n * `var(--foo, #fff)` => [`--foo`, '#fff']\n * ```\n *\n * @param current\n */ const splitCSSVariableRegex = // eslint-disable-next-line redos-detector/no-unsafe-regex -- false positive, as it can match a lot of words\n/^var\\(--(?:([\\w-]+)|([\\w-]+), ?([a-zA-Z\\d ()%#.,-]+))\\)/u;\nfunction parseCSSVariable(current) {\n    const match = splitCSSVariableRegex.exec(current);\n    if (!match) return [\n        , \n    ];\n    const [, token1, token2, fallback] = match;\n    return [\n        \"--\".concat(token1 !== null && token1 !== void 0 ? token1 : token2),\n        fallback\n    ];\n}\nconst maxDepth = 4;\nfunction getVariableValue(current, element) {\n    let depth = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;\n    motionUtils.invariant(depth <= maxDepth, 'Max CSS variable fallback depth detected in property \"'.concat(current, '\". This may indicate a circular fallback dependency.'));\n    const [token, fallback] = parseCSSVariable(current);\n    // No CSS variable detected\n    if (!token) return;\n    // Attempt to read this CSS variable off the element\n    const resolved = window.getComputedStyle(element).getPropertyValue(token);\n    if (resolved) {\n        const trimmed = resolved.trim();\n        return isNumericalString(trimmed) ? parseFloat(trimmed) : trimmed;\n    }\n    return isCSSVariableToken(fallback) ? getVariableValue(fallback, element, depth + 1) : fallback;\n}\nconst clamp = (min, max, v)=>{\n    if (v > max) return max;\n    if (v < min) return min;\n    return v;\n};\nconst number = {\n    test: (v)=>typeof v === \"number\",\n    parse: parseFloat,\n    transform: (v)=>v\n};\nconst alpha = {\n    ...number,\n    transform: (v)=>clamp(0, 1, v)\n};\nconst scale = {\n    ...number,\n    default: 1\n};\nconst createUnitType = (unit)=>({\n        test: (v)=>typeof v === \"string\" && v.endsWith(unit) && v.split(\" \").length === 1,\n        parse: parseFloat,\n        transform: (v)=>\"\".concat(v).concat(unit)\n    });\nconst degrees = /*@__PURE__*/ createUnitType(\"deg\");\nconst percent = /*@__PURE__*/ createUnitType(\"%\");\nconst px = /*@__PURE__*/ createUnitType(\"px\");\nconst vh = /*@__PURE__*/ createUnitType(\"vh\");\nconst vw = /*@__PURE__*/ createUnitType(\"vw\");\nconst progressPercentage = {\n    ...percent,\n    parse: (v)=>percent.parse(v) / 100,\n    transform: (v)=>percent.transform(v * 100)\n};\nconst positionalKeys = new Set([\n    \"width\",\n    \"height\",\n    \"top\",\n    \"left\",\n    \"right\",\n    \"bottom\",\n    \"x\",\n    \"y\",\n    \"translateX\",\n    \"translateY\"\n]);\nconst isNumOrPxType = (v)=>v === number || v === px;\nconst getPosFromMatrix = (matrix, pos)=>parseFloat(matrix.split(\", \")[pos]);\nconst getTranslateFromMatrix = (pos2, pos3)=>(_bbox, param)=>{\n        let { transform } = param;\n        if (transform === \"none\" || !transform) return 0;\n        const matrix3d = transform.match(/^matrix3d\\((.+)\\)$/u);\n        if (matrix3d) {\n            return getPosFromMatrix(matrix3d[1], pos3);\n        } else {\n            const matrix = transform.match(/^matrix\\((.+)\\)$/u);\n            if (matrix) {\n                return getPosFromMatrix(matrix[1], pos2);\n            } else {\n                return 0;\n            }\n        }\n    };\nconst transformKeys = new Set([\n    \"x\",\n    \"y\",\n    \"z\"\n]);\nconst nonTranslationalTransformKeys = transformPropOrder.filter((key)=>!transformKeys.has(key));\nfunction removeNonTranslationalTransform(visualElement) {\n    const removedTransforms = [];\n    nonTranslationalTransformKeys.forEach((key)=>{\n        const value = visualElement.getValue(key);\n        if (value !== undefined) {\n            removedTransforms.push([\n                key,\n                value.get()\n            ]);\n            value.set(key.startsWith(\"scale\") ? 1 : 0);\n        }\n    });\n    return removedTransforms;\n}\nconst positionalValues = {\n    // Dimensions\n    width: (param, param1)=>{\n        let { x } = param, { paddingLeft = \"0\", paddingRight = \"0\" } = param1;\n        return x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight);\n    },\n    height: (param, param1)=>{\n        let { y } = param, { paddingTop = \"0\", paddingBottom = \"0\" } = param1;\n        return y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom);\n    },\n    top: (_bbox, param)=>{\n        let { top } = param;\n        return parseFloat(top);\n    },\n    left: (_bbox, param)=>{\n        let { left } = param;\n        return parseFloat(left);\n    },\n    bottom: (param, param1)=>{\n        let { y } = param, { top } = param1;\n        return parseFloat(top) + (y.max - y.min);\n    },\n    right: (param, param1)=>{\n        let { x } = param, { left } = param1;\n        return parseFloat(left) + (x.max - x.min);\n    },\n    // Transform\n    x: getTranslateFromMatrix(4, 13),\n    y: getTranslateFromMatrix(5, 14)\n};\n// Alias translate longform names\npositionalValues.translateX = positionalValues.x;\npositionalValues.translateY = positionalValues.y;\n/**\n * Tests a provided value against a ValueType\n */ const testValueType = (v)=>(type)=>type.test(v);\n/**\n * ValueType for \"auto\"\n */ const auto = {\n    test: (v)=>v === \"auto\",\n    parse: (v)=>v\n};\n/**\n * A list of value types commonly used for dimensions\n */ const dimensionValueTypes = [\n    number,\n    px,\n    percent,\n    degrees,\n    vw,\n    vh,\n    auto\n];\n/**\n * Tests a dimensional value against the list of dimension ValueTypes\n */ const findDimensionValueType = (v)=>dimensionValueTypes.find(testValueType(v));\nconst toResolve = new Set();\nlet isScheduled = false;\nlet anyNeedsMeasurement = false;\nfunction measureAllKeyframes() {\n    if (anyNeedsMeasurement) {\n        const resolversToMeasure = Array.from(toResolve).filter((resolver)=>resolver.needsMeasurement);\n        const elementsToMeasure = new Set(resolversToMeasure.map((resolver)=>resolver.element));\n        const transformsToRestore = new Map();\n        /**\n         * Write pass\n         * If we're measuring elements we want to remove bounding box-changing transforms.\n         */ elementsToMeasure.forEach((element)=>{\n            const removedTransforms = removeNonTranslationalTransform(element);\n            if (!removedTransforms.length) return;\n            transformsToRestore.set(element, removedTransforms);\n            element.render();\n        });\n        // Read\n        resolversToMeasure.forEach((resolver)=>resolver.measureInitialState());\n        // Write\n        elementsToMeasure.forEach((element)=>{\n            element.render();\n            const restore = transformsToRestore.get(element);\n            if (restore) {\n                restore.forEach((param)=>{\n                    let [key, value] = param;\n                    var _a;\n                    (_a = element.getValue(key)) === null || _a === void 0 ? void 0 : _a.set(value);\n                });\n            }\n        });\n        // Read\n        resolversToMeasure.forEach((resolver)=>resolver.measureEndState());\n        // Write\n        resolversToMeasure.forEach((resolver)=>{\n            if (resolver.suspendedScrollY !== undefined) {\n                window.scrollTo(0, resolver.suspendedScrollY);\n            }\n        });\n    }\n    anyNeedsMeasurement = false;\n    isScheduled = false;\n    toResolve.forEach((resolver)=>resolver.complete());\n    toResolve.clear();\n}\nfunction readAllKeyframes() {\n    toResolve.forEach((resolver)=>{\n        resolver.readKeyframes();\n        if (resolver.needsMeasurement) {\n            anyNeedsMeasurement = true;\n        }\n    });\n}\nfunction flushKeyframeResolvers() {\n    readAllKeyframes();\n    measureAllKeyframes();\n}\nclass KeyframeResolver {\n    scheduleResolve() {\n        this.isScheduled = true;\n        if (this.isAsync) {\n            toResolve.add(this);\n            if (!isScheduled) {\n                isScheduled = true;\n                frame.read(readAllKeyframes);\n                frame.resolveKeyframes(measureAllKeyframes);\n            }\n        } else {\n            this.readKeyframes();\n            this.complete();\n        }\n    }\n    readKeyframes() {\n        const { unresolvedKeyframes, name, element, motionValue } = this;\n        /**\n         * If a keyframe is null, we hydrate it either by reading it from\n         * the instance, or propagating from previous keyframes.\n         */ for(let i = 0; i < unresolvedKeyframes.length; i++){\n            if (unresolvedKeyframes[i] === null) {\n                /**\n                 * If the first keyframe is null, we need to find its value by sampling the element\n                 */ if (i === 0) {\n                    const currentValue = motionValue === null || motionValue === void 0 ? void 0 : motionValue.get();\n                    const finalKeyframe = unresolvedKeyframes[unresolvedKeyframes.length - 1];\n                    if (currentValue !== undefined) {\n                        unresolvedKeyframes[0] = currentValue;\n                    } else if (element && name) {\n                        const valueAsRead = element.readValue(name, finalKeyframe);\n                        if (valueAsRead !== undefined && valueAsRead !== null) {\n                            unresolvedKeyframes[0] = valueAsRead;\n                        }\n                    }\n                    if (unresolvedKeyframes[0] === undefined) {\n                        unresolvedKeyframes[0] = finalKeyframe;\n                    }\n                    if (motionValue && currentValue === undefined) {\n                        motionValue.set(unresolvedKeyframes[0]);\n                    }\n                } else {\n                    unresolvedKeyframes[i] = unresolvedKeyframes[i - 1];\n                }\n            }\n        }\n    }\n    setFinalKeyframe() {}\n    measureInitialState() {}\n    renderEndStyles() {}\n    measureEndState() {}\n    complete() {\n        this.isComplete = true;\n        this.onComplete(this.unresolvedKeyframes, this.finalKeyframe);\n        toResolve.delete(this);\n    }\n    cancel() {\n        if (!this.isComplete) {\n            this.isScheduled = false;\n            toResolve.delete(this);\n        }\n    }\n    resume() {\n        if (!this.isComplete) this.scheduleResolve();\n    }\n    constructor(unresolvedKeyframes, onComplete, name, motionValue, element, isAsync = false){\n        /**\n         * Track whether this resolver has completed. Once complete, it never\n         * needs to attempt keyframe resolution again.\n         */ this.isComplete = false;\n        /**\n         * Track whether this resolver is async. If it is, it'll be added to the\n         * resolver queue and flushed in the next frame. Resolvers that aren't going\n         * to trigger read/write thrashing don't need to be async.\n         */ this.isAsync = false;\n        /**\n         * Track whether this resolver needs to perform a measurement\n         * to resolve its keyframes.\n         */ this.needsMeasurement = false;\n        /**\n         * Track whether this resolver is currently scheduled to resolve\n         * to allow it to be cancelled and resumed externally.\n         */ this.isScheduled = false;\n        this.unresolvedKeyframes = [\n            ...unresolvedKeyframes\n        ];\n        this.onComplete = onComplete;\n        this.name = name;\n        this.motionValue = motionValue;\n        this.element = element;\n        this.isAsync = isAsync;\n    }\n}\n// If this number is a decimal, make it just five decimal places\n// to avoid exponents\nconst sanitize = (v)=>Math.round(v * 100000) / 100000;\nconst floatRegex = /-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/gu;\nfunction isNullish(v) {\n    return v == null;\n}\nconst singleColorRegex = /^(?:#[\\da-f]{3,8}|(?:rgb|hsl)a?\\((?:-?[\\d.]+%?[,\\s]+){2}-?[\\d.]+%?\\s*(?:[,/]\\s*)?(?:\\b\\d+(?:\\.\\d+)?|\\.\\d+)?%?\\))$/iu;\n/**\n * Returns true if the provided string is a color, ie rgba(0,0,0,0) or #000,\n * but false if a number or multiple colors\n */ const isColorString = (type, testProp)=>(v)=>{\n        return Boolean(typeof v === \"string\" && singleColorRegex.test(v) && v.startsWith(type) || testProp && !isNullish(v) && Object.prototype.hasOwnProperty.call(v, testProp));\n    };\nconst splitColor = (aName, bName, cName)=>(v)=>{\n        if (typeof v !== \"string\") return v;\n        const [a, b, c, alpha] = v.match(floatRegex);\n        return {\n            [aName]: parseFloat(a),\n            [bName]: parseFloat(b),\n            [cName]: parseFloat(c),\n            alpha: alpha !== undefined ? parseFloat(alpha) : 1\n        };\n    };\nconst clampRgbUnit = (v)=>clamp(0, 255, v);\nconst rgbUnit = {\n    ...number,\n    transform: (v)=>Math.round(clampRgbUnit(v))\n};\nconst rgba = {\n    test: /*@__PURE__*/ isColorString(\"rgb\", \"red\"),\n    parse: /*@__PURE__*/ splitColor(\"red\", \"green\", \"blue\"),\n    transform: (param)=>{\n        let { red, green, blue, alpha: alpha$1 = 1 } = param;\n        return \"rgba(\" + rgbUnit.transform(red) + \", \" + rgbUnit.transform(green) + \", \" + rgbUnit.transform(blue) + \", \" + sanitize(alpha.transform(alpha$1)) + \")\";\n    }\n};\nfunction parseHex(v) {\n    let r = \"\";\n    let g = \"\";\n    let b = \"\";\n    let a = \"\";\n    // If we have 6 characters, ie #FF0000\n    if (v.length > 5) {\n        r = v.substring(1, 3);\n        g = v.substring(3, 5);\n        b = v.substring(5, 7);\n        a = v.substring(7, 9);\n    // Or we have 3 characters, ie #F00\n    } else {\n        r = v.substring(1, 2);\n        g = v.substring(2, 3);\n        b = v.substring(3, 4);\n        a = v.substring(4, 5);\n        r += r;\n        g += g;\n        b += b;\n        a += a;\n    }\n    return {\n        red: parseInt(r, 16),\n        green: parseInt(g, 16),\n        blue: parseInt(b, 16),\n        alpha: a ? parseInt(a, 16) / 255 : 1\n    };\n}\nconst hex = {\n    test: /*@__PURE__*/ isColorString(\"#\"),\n    parse: parseHex,\n    transform: rgba.transform\n};\nconst hsla = {\n    test: /*@__PURE__*/ isColorString(\"hsl\", \"hue\"),\n    parse: /*@__PURE__*/ splitColor(\"hue\", \"saturation\", \"lightness\"),\n    transform: (param)=>{\n        let { hue, saturation, lightness, alpha: alpha$1 = 1 } = param;\n        return \"hsla(\" + Math.round(hue) + \", \" + percent.transform(sanitize(saturation)) + \", \" + percent.transform(sanitize(lightness)) + \", \" + sanitize(alpha.transform(alpha$1)) + \")\";\n    }\n};\nconst color = {\n    test: (v)=>rgba.test(v) || hex.test(v) || hsla.test(v),\n    parse: (v)=>{\n        if (rgba.test(v)) {\n            return rgba.parse(v);\n        } else if (hsla.test(v)) {\n            return hsla.parse(v);\n        } else {\n            return hex.parse(v);\n        }\n    },\n    transform: (v)=>{\n        return typeof v === \"string\" ? v : v.hasOwnProperty(\"red\") ? rgba.transform(v) : hsla.transform(v);\n    }\n};\nconst colorRegex = /(?:#[\\da-f]{3,8}|(?:rgb|hsl)a?\\((?:-?[\\d.]+%?[,\\s]+){2}-?[\\d.]+%?\\s*(?:[,/]\\s*)?(?:\\b\\d+(?:\\.\\d+)?|\\.\\d+)?%?\\))/giu;\nfunction test(v) {\n    var _a, _b;\n    return isNaN(v) && typeof v === \"string\" && (((_a = v.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) || 0) + (((_b = v.match(colorRegex)) === null || _b === void 0 ? void 0 : _b.length) || 0) > 0;\n}\nconst NUMBER_TOKEN = \"number\";\nconst COLOR_TOKEN = \"color\";\nconst VAR_TOKEN = \"var\";\nconst VAR_FUNCTION_TOKEN = \"var(\";\nconst SPLIT_TOKEN = \"${}\";\n// this regex consists of the `singleCssVariableRegex|rgbHSLValueRegex|digitRegex`\nconst complexRegex = /var\\s*\\(\\s*--(?:[\\w-]+\\s*|[\\w-]+\\s*,(?:\\s*[^)(\\s]|\\s*\\((?:[^)(]|\\([^)(]*\\))*\\))+\\s*)\\)|#[\\da-f]{3,8}|(?:rgb|hsl)a?\\((?:-?[\\d.]+%?[,\\s]+){2}-?[\\d.]+%?\\s*(?:[,/]\\s*)?(?:\\b\\d+(?:\\.\\d+)?|\\.\\d+)?%?\\)|-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/giu;\nfunction analyseComplexValue(value) {\n    const originalValue = value.toString();\n    const values = [];\n    const indexes = {\n        color: [],\n        number: [],\n        var: []\n    };\n    const types = [];\n    let i = 0;\n    const tokenised = originalValue.replace(complexRegex, (parsedValue)=>{\n        if (color.test(parsedValue)) {\n            indexes.color.push(i);\n            types.push(COLOR_TOKEN);\n            values.push(color.parse(parsedValue));\n        } else if (parsedValue.startsWith(VAR_FUNCTION_TOKEN)) {\n            indexes.var.push(i);\n            types.push(VAR_TOKEN);\n            values.push(parsedValue);\n        } else {\n            indexes.number.push(i);\n            types.push(NUMBER_TOKEN);\n            values.push(parseFloat(parsedValue));\n        }\n        ++i;\n        return SPLIT_TOKEN;\n    });\n    const split = tokenised.split(SPLIT_TOKEN);\n    return {\n        values,\n        split,\n        indexes,\n        types\n    };\n}\nfunction parseComplexValue(v) {\n    return analyseComplexValue(v).values;\n}\nfunction createTransformer(source) {\n    const { split, types } = analyseComplexValue(source);\n    const numSections = split.length;\n    return (v)=>{\n        let output = \"\";\n        for(let i = 0; i < numSections; i++){\n            output += split[i];\n            if (v[i] !== undefined) {\n                const type = types[i];\n                if (type === NUMBER_TOKEN) {\n                    output += sanitize(v[i]);\n                } else if (type === COLOR_TOKEN) {\n                    output += color.transform(v[i]);\n                } else {\n                    output += v[i];\n                }\n            }\n        }\n        return output;\n    };\n}\nconst convertNumbersToZero = (v)=>typeof v === \"number\" ? 0 : v;\nfunction getAnimatableNone$1(v) {\n    const parsed = parseComplexValue(v);\n    const transformer = createTransformer(v);\n    return transformer(parsed.map(convertNumbersToZero));\n}\nconst complex = {\n    test,\n    parse: parseComplexValue,\n    createTransformer,\n    getAnimatableNone: getAnimatableNone$1\n};\n/**\n * Properties that should default to 1 or 100%\n */ const maxDefaults = new Set([\n    \"brightness\",\n    \"contrast\",\n    \"saturate\",\n    \"opacity\"\n]);\nfunction applyDefaultFilter(v) {\n    const [name, value] = v.slice(0, -1).split(\"(\");\n    if (name === \"drop-shadow\") return v;\n    const [number] = value.match(floatRegex) || [];\n    if (!number) return v;\n    const unit = value.replace(number, \"\");\n    let defaultValue = maxDefaults.has(name) ? 1 : 0;\n    if (number !== value) defaultValue *= 100;\n    return name + \"(\" + defaultValue + unit + \")\";\n}\nconst functionRegex = /\\b([a-z-]*)\\(.*?\\)/gu;\nconst filter = {\n    ...complex,\n    getAnimatableNone: (v)=>{\n        const functions = v.match(functionRegex);\n        return functions ? functions.map(applyDefaultFilter).join(\" \") : v;\n    }\n};\nconst browserNumberValueTypes = {\n    // Border props\n    borderWidth: px,\n    borderTopWidth: px,\n    borderRightWidth: px,\n    borderBottomWidth: px,\n    borderLeftWidth: px,\n    borderRadius: px,\n    radius: px,\n    borderTopLeftRadius: px,\n    borderTopRightRadius: px,\n    borderBottomRightRadius: px,\n    borderBottomLeftRadius: px,\n    // Positioning props\n    width: px,\n    maxWidth: px,\n    height: px,\n    maxHeight: px,\n    top: px,\n    right: px,\n    bottom: px,\n    left: px,\n    // Spacing props\n    padding: px,\n    paddingTop: px,\n    paddingRight: px,\n    paddingBottom: px,\n    paddingLeft: px,\n    margin: px,\n    marginTop: px,\n    marginRight: px,\n    marginBottom: px,\n    marginLeft: px,\n    // Misc\n    backgroundPositionX: px,\n    backgroundPositionY: px\n};\nconst transformValueTypes = {\n    rotate: degrees,\n    rotateX: degrees,\n    rotateY: degrees,\n    rotateZ: degrees,\n    scale,\n    scaleX: scale,\n    scaleY: scale,\n    scaleZ: scale,\n    skew: degrees,\n    skewX: degrees,\n    skewY: degrees,\n    distance: px,\n    translateX: px,\n    translateY: px,\n    translateZ: px,\n    x: px,\n    y: px,\n    z: px,\n    perspective: px,\n    transformPerspective: px,\n    opacity: alpha,\n    originX: progressPercentage,\n    originY: progressPercentage,\n    originZ: px\n};\nconst int = {\n    ...number,\n    transform: Math.round\n};\nconst numberValueTypes = {\n    ...browserNumberValueTypes,\n    ...transformValueTypes,\n    zIndex: int,\n    size: px,\n    // SVG\n    fillOpacity: alpha,\n    strokeOpacity: alpha,\n    numOctaves: int\n};\n/**\n * A map of default value types for common values\n */ const defaultValueTypes = {\n    ...numberValueTypes,\n    // Color props\n    color,\n    backgroundColor: color,\n    outlineColor: color,\n    fill: color,\n    stroke: color,\n    // Border props\n    borderColor: color,\n    borderTopColor: color,\n    borderRightColor: color,\n    borderBottomColor: color,\n    borderLeftColor: color,\n    filter,\n    WebkitFilter: filter\n};\n/**\n * Gets the default ValueType for the provided value key\n */ const getDefaultValueType = (key)=>defaultValueTypes[key];\nfunction getAnimatableNone(key, value) {\n    let defaultValueType = getDefaultValueType(key);\n    if (defaultValueType !== filter) defaultValueType = complex;\n    // If value is not recognised as animatable, ie \"none\", create an animatable version origin based on the target\n    return defaultValueType.getAnimatableNone ? defaultValueType.getAnimatableNone(value) : undefined;\n}\n/**\n * If we encounter keyframes like \"none\" or \"0\" and we also have keyframes like\n * \"#fff\" or \"200px 200px\" we want to find a keyframe to serve as a template for\n * the \"none\" keyframes. In this case \"#fff\" or \"200px 200px\" - then these get turned into\n * zero equivalents, i.e. \"#fff0\" or \"0px 0px\".\n */ const invalidTemplates = new Set([\n    \"auto\",\n    \"none\",\n    \"0\"\n]);\nfunction makeNoneKeyframesAnimatable(unresolvedKeyframes, noneKeyframeIndexes, name) {\n    let i = 0;\n    let animatableTemplate = undefined;\n    while(i < unresolvedKeyframes.length && !animatableTemplate){\n        const keyframe = unresolvedKeyframes[i];\n        if (typeof keyframe === \"string\" && !invalidTemplates.has(keyframe) && analyseComplexValue(keyframe).values.length) {\n            animatableTemplate = unresolvedKeyframes[i];\n        }\n        i++;\n    }\n    if (animatableTemplate && name) {\n        for (const noneIndex of noneKeyframeIndexes){\n            unresolvedKeyframes[noneIndex] = getAnimatableNone(name, animatableTemplate);\n        }\n    }\n}\nclass DOMKeyframesResolver extends KeyframeResolver {\n    readKeyframes() {\n        const { unresolvedKeyframes, element, name } = this;\n        if (!element || !element.current) return;\n        super.readKeyframes();\n        /**\n         * If any keyframe is a CSS variable, we need to find its value by sampling the element\n         */ for(let i = 0; i < unresolvedKeyframes.length; i++){\n            let keyframe = unresolvedKeyframes[i];\n            if (typeof keyframe === \"string\") {\n                keyframe = keyframe.trim();\n                if (isCSSVariableToken(keyframe)) {\n                    const resolved = getVariableValue(keyframe, element.current);\n                    if (resolved !== undefined) {\n                        unresolvedKeyframes[i] = resolved;\n                    }\n                    if (i === unresolvedKeyframes.length - 1) {\n                        this.finalKeyframe = keyframe;\n                    }\n                }\n            }\n        }\n        /**\n         * Resolve \"none\" values. We do this potentially twice - once before and once after measuring keyframes.\n         * This could be seen as inefficient but it's a trade-off to avoid measurements in more situations, which\n         * have a far bigger performance impact.\n         */ this.resolveNoneKeyframes();\n        /**\n         * Check to see if unit type has changed. If so schedule jobs that will\n         * temporarily set styles to the destination keyframes.\n         * Skip if we have more than two keyframes or this isn't a positional value.\n         * TODO: We can throw if there are multiple keyframes and the value type changes.\n         */ if (!positionalKeys.has(name) || unresolvedKeyframes.length !== 2) {\n            return;\n        }\n        const [origin, target] = unresolvedKeyframes;\n        const originType = findDimensionValueType(origin);\n        const targetType = findDimensionValueType(target);\n        /**\n         * Either we don't recognise these value types or we can animate between them.\n         */ if (originType === targetType) return;\n        /**\n         * If both values are numbers or pixels, we can animate between them by\n         * converting them to numbers.\n         */ if (isNumOrPxType(originType) && isNumOrPxType(targetType)) {\n            for(let i = 0; i < unresolvedKeyframes.length; i++){\n                const value = unresolvedKeyframes[i];\n                if (typeof value === \"string\") {\n                    unresolvedKeyframes[i] = parseFloat(value);\n                }\n            }\n        } else {\n            /**\n             * Else, the only way to resolve this is by measuring the element.\n             */ this.needsMeasurement = true;\n        }\n    }\n    resolveNoneKeyframes() {\n        const { unresolvedKeyframes, name } = this;\n        const noneKeyframeIndexes = [];\n        for(let i = 0; i < unresolvedKeyframes.length; i++){\n            if (isNone(unresolvedKeyframes[i])) {\n                noneKeyframeIndexes.push(i);\n            }\n        }\n        if (noneKeyframeIndexes.length) {\n            makeNoneKeyframesAnimatable(unresolvedKeyframes, noneKeyframeIndexes, name);\n        }\n    }\n    measureInitialState() {\n        const { element, unresolvedKeyframes, name } = this;\n        if (!element || !element.current) return;\n        if (name === \"height\") {\n            this.suspendedScrollY = window.pageYOffset;\n        }\n        this.measuredOrigin = positionalValues[name](element.measureViewportBox(), window.getComputedStyle(element.current));\n        unresolvedKeyframes[0] = this.measuredOrigin;\n        // Set final key frame to measure after next render\n        const measureKeyframe = unresolvedKeyframes[unresolvedKeyframes.length - 1];\n        if (measureKeyframe !== undefined) {\n            element.getValue(name, measureKeyframe).jump(measureKeyframe, false);\n        }\n    }\n    measureEndState() {\n        var _a;\n        const { element, name, unresolvedKeyframes } = this;\n        if (!element || !element.current) return;\n        const value = element.getValue(name);\n        value && value.jump(this.measuredOrigin, false);\n        const finalKeyframeIndex = unresolvedKeyframes.length - 1;\n        const finalKeyframe = unresolvedKeyframes[finalKeyframeIndex];\n        unresolvedKeyframes[finalKeyframeIndex] = positionalValues[name](element.measureViewportBox(), window.getComputedStyle(element.current));\n        if (finalKeyframe !== null && this.finalKeyframe === undefined) {\n            this.finalKeyframe = finalKeyframe;\n        }\n        // If we removed transform values, reapply them before the next render\n        if ((_a = this.removedTransforms) === null || _a === void 0 ? void 0 : _a.length) {\n            this.removedTransforms.forEach((param)=>{\n                let [unsetTransformName, unsetTransformValue] = param;\n                element.getValue(unsetTransformName).set(unsetTransformValue);\n            });\n        }\n        this.resolveNoneKeyframes();\n    }\n    constructor(unresolvedKeyframes, onComplete, name, motionValue, element){\n        super(unresolvedKeyframes, onComplete, name, motionValue, element, true);\n    }\n}\nfunction isGenerator(type) {\n    return typeof type === \"function\";\n}\nlet now;\nfunction clearTime() {\n    now = undefined;\n}\n/**\n * An eventloop-synchronous alternative to performance.now().\n *\n * Ensures that time measurements remain consistent within a synchronous context.\n * Usually calling performance.now() twice within the same synchronous context\n * will return different values which isn't useful for animations when we're usually\n * trying to sync animations to the same frame.\n */ const time = {\n    now: ()=>{\n        if (now === undefined) {\n            time.set(frameData.isProcessing || MotionGlobalConfig.useManualTiming ? frameData.timestamp : performance.now());\n        }\n        return now;\n    },\n    set: (newTime)=>{\n        now = newTime;\n        queueMicrotask(clearTime);\n    }\n};\n/**\n * Check if a value is animatable. Examples:\n *\n * ✅: 100, \"100px\", \"#fff\"\n * ❌: \"block\", \"url(2.jpg)\"\n * @param value\n *\n * @internal\n */ const isAnimatable = (value, name)=>{\n    // If the list of keys tat might be non-animatable grows, replace with Set\n    if (name === \"zIndex\") return false;\n    // If it's a number or a keyframes array, we can animate it. We might at some point\n    // need to do a deep isAnimatable check of keyframes, or let Popmotion handle this,\n    // but for now lets leave it like this for performance reasons\n    if (typeof value === \"number\" || Array.isArray(value)) return true;\n    if (typeof value === \"string\" && // It's animatable if we have a string\n    (complex.test(value) || value === \"0\") && // And it contains numbers and/or colors\n    !value.startsWith(\"url(\") // Unless it starts with \"url(\"\n    ) {\n        return true;\n    }\n    return false;\n};\nfunction hasKeyframesChanged(keyframes) {\n    const current = keyframes[0];\n    if (keyframes.length === 1) return true;\n    for(let i = 0; i < keyframes.length; i++){\n        if (keyframes[i] !== current) return true;\n    }\n}\nfunction canAnimate(keyframes, name, type, velocity) {\n    /**\n     * Check if we're able to animate between the start and end keyframes,\n     * and throw a warning if we're attempting to animate between one that's\n     * animatable and another that isn't.\n     */ const originKeyframe = keyframes[0];\n    if (originKeyframe === null) return false;\n    /**\n     * These aren't traditionally animatable but we do support them.\n     * In future we could look into making this more generic or replacing\n     * this function with mix() === mixImmediate\n     */ if (name === \"display\" || name === \"visibility\") return true;\n    const targetKeyframe = keyframes[keyframes.length - 1];\n    const isOriginAnimatable = isAnimatable(originKeyframe, name);\n    const isTargetAnimatable = isAnimatable(targetKeyframe, name);\n    motionUtils.warning(isOriginAnimatable === isTargetAnimatable, \"You are trying to animate \".concat(name, ' from \"').concat(originKeyframe, '\" to \"').concat(targetKeyframe, '\". ').concat(originKeyframe, \" is not an animatable value - to enable this animation set \").concat(originKeyframe, \" to a value animatable to \").concat(targetKeyframe, \" via the `style` property.\"));\n    // Always skip if any of these are true\n    if (!isOriginAnimatable || !isTargetAnimatable) {\n        return false;\n    }\n    return hasKeyframesChanged(keyframes) || (type === \"spring\" || isGenerator(type)) && velocity;\n}\n/**\n * Maximum time allowed between an animation being created and it being\n * resolved for us to use the latter as the start time.\n *\n * This is to ensure that while we prefer to \"start\" an animation as soon\n * as it's triggered, we also want to avoid a visual jump if there's a big delay\n * between these two moments.\n */ const MAX_RESOLVE_DELAY = 40;\nclass BaseAnimation {\n    /**\n     * This method uses the createdAt and resolvedAt to calculate the\n     * animation startTime. *Ideally*, we would use the createdAt time as t=0\n     * as the following frame would then be the first frame of the animation in\n     * progress, which would feel snappier.\n     *\n     * However, if there's a delay (main thread work) between the creation of\n     * the animation and the first commited frame, we prefer to use resolvedAt\n     * to avoid a sudden jump into the animation.\n     */ calcStartTime() {\n        if (!this.resolvedAt) return this.createdAt;\n        return this.resolvedAt - this.createdAt > MAX_RESOLVE_DELAY ? this.resolvedAt : this.createdAt;\n    }\n    /**\n     * A getter for resolved data. If keyframes are not yet resolved, accessing\n     * this.resolved will synchronously flush all pending keyframe resolvers.\n     * This is a deoptimisation, but at its worst still batches read/writes.\n     */ get resolved() {\n        if (!this._resolved && !this.hasAttemptedResolve) {\n            flushKeyframeResolvers();\n        }\n        return this._resolved;\n    }\n    /**\n     * A method to be called when the keyframes resolver completes. This method\n     * will check if its possible to run the animation and, if not, skip it.\n     * Otherwise, it will call initPlayback on the implementing class.\n     */ onKeyframesResolved(keyframes, finalKeyframe) {\n        this.resolvedAt = time.now();\n        this.hasAttemptedResolve = true;\n        const { name, type, velocity, delay, onComplete, onUpdate, isGenerator } = this.options;\n        /**\n         * If we can't animate this value with the resolved keyframes\n         * then we should complete it immediately.\n         */ if (!isGenerator && !canAnimate(keyframes, name, type, velocity)) {\n            // Finish immediately\n            if (instantAnimationState.current || !delay) {\n                onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(getFinalKeyframe(keyframes, this.options, finalKeyframe));\n                onComplete === null || onComplete === void 0 ? void 0 : onComplete();\n                this.resolveFinishedPromise();\n                return;\n            } else {\n                this.options.duration = 0;\n            }\n        }\n        const resolvedAnimation = this.initPlayback(keyframes, finalKeyframe);\n        if (resolvedAnimation === false) return;\n        this._resolved = {\n            keyframes,\n            finalKeyframe,\n            ...resolvedAnimation\n        };\n        this.onPostResolved();\n    }\n    onPostResolved() {}\n    /**\n     * Allows the returned animation to be awaited or promise-chained. Currently\n     * resolves when the animation finishes at all but in a future update could/should\n     * reject if its cancels.\n     */ then(resolve, reject) {\n        return this.currentFinishedPromise.then(resolve, reject);\n    }\n    flatten() {\n        this.options.type = \"keyframes\";\n        this.options.ease = \"linear\";\n    }\n    updateFinishedPromise() {\n        this.currentFinishedPromise = new Promise((resolve)=>{\n            this.resolveFinishedPromise = resolve;\n        });\n    }\n    constructor({ autoplay = true, delay = 0, type = \"keyframes\", repeat = 0, repeatDelay = 0, repeatType = \"loop\", ...options }){\n        // Track whether the animation has been stopped. Stopped animations won't restart.\n        this.isStopped = false;\n        this.hasAttemptedResolve = false;\n        this.createdAt = time.now();\n        this.options = {\n            autoplay,\n            delay,\n            type,\n            repeat,\n            repeatDelay,\n            repeatType,\n            ...options\n        };\n        this.updateFinishedPromise();\n    }\n}\n/*\n  Progress within given range\n\n  Given a lower limit and an upper limit, we return the progress\n  (expressed as a number 0-1) represented by the given value, and\n  limit that progress to within 0-1.\n\n  @param [number]: Lower limit\n  @param [number]: Upper limit\n  @param [number]: Value to find progress within given range\n  @return [number]: Progress of value within range as expressed 0-1\n*/ const progress = (from, to, value)=>{\n    const toFromDifference = to - from;\n    return toFromDifference === 0 ? 1 : (value - from) / toFromDifference;\n};\nconst generateLinearEasing = function(easing, duration) {\n    let resolution = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 10 // as milliseconds\n    ;\n    let points = \"\";\n    const numPoints = Math.max(Math.round(duration / resolution), 2);\n    for(let i = 0; i < numPoints; i++){\n        points += easing(progress(0, numPoints - 1, i)) + \", \";\n    }\n    return \"linear(\".concat(points.substring(0, points.length - 2), \")\");\n};\n/*\n  Convert velocity into velocity per second\n\n  @param [number]: Unit per frame\n  @param [number]: Frame duration in ms\n*/ function velocityPerSecond(velocity, frameDuration) {\n    return frameDuration ? velocity * (1000 / frameDuration) : 0;\n}\nconst velocitySampleDuration = 5; // ms\nfunction calcGeneratorVelocity(resolveValue, t, current) {\n    const prevT = Math.max(t - velocitySampleDuration, 0);\n    return velocityPerSecond(current - resolveValue(prevT), t - prevT);\n}\nconst springDefaults = {\n    // Default spring physics\n    stiffness: 100,\n    damping: 10,\n    mass: 1.0,\n    velocity: 0.0,\n    // Default duration/bounce-based options\n    duration: 800,\n    bounce: 0.3,\n    visualDuration: 0.3,\n    // Rest thresholds\n    restSpeed: {\n        granular: 0.01,\n        default: 2\n    },\n    restDelta: {\n        granular: 0.005,\n        default: 0.5\n    },\n    // Limits\n    minDuration: 0.01,\n    maxDuration: 10.0,\n    minDamping: 0.05,\n    maxDamping: 1\n};\nconst safeMin = 0.001;\nfunction findSpring(param) {\n    let { duration = springDefaults.duration, bounce = springDefaults.bounce, velocity = springDefaults.velocity, mass = springDefaults.mass } = param;\n    let envelope;\n    let derivative;\n    motionUtils.warning(duration <= secondsToMilliseconds(springDefaults.maxDuration), \"Spring duration must be 10 seconds or less\");\n    let dampingRatio = 1 - bounce;\n    /**\n     * Restrict dampingRatio and duration to within acceptable ranges.\n     */ dampingRatio = clamp(springDefaults.minDamping, springDefaults.maxDamping, dampingRatio);\n    duration = clamp(springDefaults.minDuration, springDefaults.maxDuration, millisecondsToSeconds(duration));\n    if (dampingRatio < 1) {\n        /**\n         * Underdamped spring\n         */ envelope = (undampedFreq)=>{\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const a = exponentialDecay - velocity;\n            const b = calcAngularFreq(undampedFreq, dampingRatio);\n            const c = Math.exp(-delta);\n            return safeMin - a / b * c;\n        };\n        derivative = (undampedFreq)=>{\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const d = delta * velocity + velocity;\n            const e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq, 2) * duration;\n            const f = Math.exp(-delta);\n            const g = calcAngularFreq(Math.pow(undampedFreq, 2), dampingRatio);\n            const factor = -envelope(undampedFreq) + safeMin > 0 ? -1 : 1;\n            return factor * ((d - e) * f) / g;\n        };\n    } else {\n        /**\n         * Critically-damped spring\n         */ envelope = (undampedFreq)=>{\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (undampedFreq - velocity) * duration + 1;\n            return -safeMin + a * b;\n        };\n        derivative = (undampedFreq)=>{\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (velocity - undampedFreq) * (duration * duration);\n            return a * b;\n        };\n    }\n    const initialGuess = 5 / duration;\n    const undampedFreq = approximateRoot(envelope, derivative, initialGuess);\n    duration = secondsToMilliseconds(duration);\n    if (isNaN(undampedFreq)) {\n        return {\n            stiffness: springDefaults.stiffness,\n            damping: springDefaults.damping,\n            duration\n        };\n    } else {\n        const stiffness = Math.pow(undampedFreq, 2) * mass;\n        return {\n            stiffness,\n            damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),\n            duration\n        };\n    }\n}\nconst rootIterations = 12;\nfunction approximateRoot(envelope, derivative, initialGuess) {\n    let result = initialGuess;\n    for(let i = 1; i < rootIterations; i++){\n        result = result - envelope(result) / derivative(result);\n    }\n    return result;\n}\nfunction calcAngularFreq(undampedFreq, dampingRatio) {\n    return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);\n}\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */ const maxGeneratorDuration = 20000;\nfunction calcGeneratorDuration(generator) {\n    let duration = 0;\n    const timeStep = 50;\n    let state = generator.next(duration);\n    while(!state.done && duration < maxGeneratorDuration){\n        duration += timeStep;\n        state = generator.next(duration);\n    }\n    return duration >= maxGeneratorDuration ? Infinity : duration;\n}\nconst durationKeys = [\n    \"duration\",\n    \"bounce\"\n];\nconst physicsKeys = [\n    \"stiffness\",\n    \"damping\",\n    \"mass\"\n];\nfunction isSpringType(options, keys) {\n    return keys.some((key)=>options[key] !== undefined);\n}\nfunction getSpringOptions(options) {\n    let springOptions = {\n        velocity: springDefaults.velocity,\n        stiffness: springDefaults.stiffness,\n        damping: springDefaults.damping,\n        mass: springDefaults.mass,\n        isResolvedFromDuration: false,\n        ...options\n    };\n    // stiffness/damping/mass overrides duration/bounce\n    if (!isSpringType(options, physicsKeys) && isSpringType(options, durationKeys)) {\n        if (options.visualDuration) {\n            const visualDuration = options.visualDuration;\n            const root = 2 * Math.PI / (visualDuration * 1.2);\n            const stiffness = root * root;\n            const damping = 2 * clamp(0.05, 1, 1 - options.bounce) * Math.sqrt(stiffness);\n            springOptions = {\n                ...springOptions,\n                mass: springDefaults.mass,\n                stiffness,\n                damping\n            };\n        } else {\n            const derived = findSpring(options);\n            springOptions = {\n                ...springOptions,\n                ...derived,\n                mass: springDefaults.mass\n            };\n            springOptions.isResolvedFromDuration = true;\n        }\n    }\n    return springOptions;\n}\nfunction spring() {\n    let optionsOrVisualDuration = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : springDefaults.visualDuration, bounce = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : springDefaults.bounce;\n    const options = typeof optionsOrVisualDuration !== \"object\" ? {\n        visualDuration: optionsOrVisualDuration,\n        keyframes: [\n            0,\n            1\n        ],\n        bounce\n    } : optionsOrVisualDuration;\n    let { restSpeed, restDelta } = options;\n    const origin = options.keyframes[0];\n    const target = options.keyframes[options.keyframes.length - 1];\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */ const state = {\n        done: false,\n        value: origin\n    };\n    const { stiffness, damping, mass, duration, velocity, isResolvedFromDuration } = getSpringOptions({\n        ...options,\n        velocity: -millisecondsToSeconds(options.velocity || 0)\n    });\n    const initialVelocity = velocity || 0.0;\n    const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));\n    const initialDelta = target - origin;\n    const undampedAngularFreq = millisecondsToSeconds(Math.sqrt(stiffness / mass));\n    /**\n     * If we're working on a granular scale, use smaller defaults for determining\n     * when the spring is finished.\n     *\n     * These defaults have been selected emprically based on what strikes a good\n     * ratio between feeling good and finishing as soon as changes are imperceptible.\n     */ const isGranularScale = Math.abs(initialDelta) < 5;\n    restSpeed || (restSpeed = isGranularScale ? springDefaults.restSpeed.granular : springDefaults.restSpeed.default);\n    restDelta || (restDelta = isGranularScale ? springDefaults.restDelta.granular : springDefaults.restDelta.default);\n    let resolveSpring;\n    if (dampingRatio < 1) {\n        const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);\n        // Underdamped spring\n        resolveSpring = (t)=>{\n            const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n            return target - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq * Math.sin(angularFreq * t) + initialDelta * Math.cos(angularFreq * t));\n        };\n    } else if (dampingRatio === 1) {\n        // Critically damped spring\n        resolveSpring = (t)=>target - Math.exp(-undampedAngularFreq * t) * (initialDelta + (initialVelocity + undampedAngularFreq * initialDelta) * t);\n    } else {\n        // Overdamped spring\n        const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);\n        resolveSpring = (t)=>{\n            const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n            // When performing sinh or cosh values can hit Infinity so we cap them here\n            const freqForT = Math.min(dampedAngularFreq * t, 300);\n            return target - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) * Math.sinh(freqForT) + dampedAngularFreq * initialDelta * Math.cosh(freqForT)) / dampedAngularFreq;\n        };\n    }\n    const generator = {\n        calculatedDuration: isResolvedFromDuration ? duration || null : null,\n        next: (t)=>{\n            const current = resolveSpring(t);\n            if (!isResolvedFromDuration) {\n                let currentVelocity = 0.0;\n                /**\n                 * We only need to calculate velocity for under-damped springs\n                 * as over- and critically-damped springs can't overshoot, so\n                 * checking only for displacement is enough.\n                 */ if (dampingRatio < 1) {\n                    currentVelocity = t === 0 ? secondsToMilliseconds(initialVelocity) : calcGeneratorVelocity(resolveSpring, t, current);\n                }\n                const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;\n                const isBelowDisplacementThreshold = Math.abs(target - current) <= restDelta;\n                state.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;\n            } else {\n                state.done = t >= duration;\n            }\n            state.value = state.done ? target : current;\n            return state;\n        },\n        toString: ()=>{\n            const calculatedDuration = Math.min(calcGeneratorDuration(generator), maxGeneratorDuration);\n            const easing = generateLinearEasing((progress)=>generator.next(calculatedDuration * progress).value, calculatedDuration, 30);\n            return calculatedDuration + \"ms \" + easing;\n        }\n    };\n    return generator;\n}\nfunction inertia(param) {\n    let { keyframes, velocity = 0.0, power = 0.8, timeConstant = 325, bounceDamping = 10, bounceStiffness = 500, modifyTarget, min, max, restDelta = 0.5, restSpeed } = param;\n    const origin = keyframes[0];\n    const state = {\n        done: false,\n        value: origin\n    };\n    const isOutOfBounds = (v)=>min !== undefined && v < min || max !== undefined && v > max;\n    const nearestBoundary = (v)=>{\n        if (min === undefined) return max;\n        if (max === undefined) return min;\n        return Math.abs(min - v) < Math.abs(max - v) ? min : max;\n    };\n    let amplitude = power * velocity;\n    const ideal = origin + amplitude;\n    const target = modifyTarget === undefined ? ideal : modifyTarget(ideal);\n    /**\n     * If the target has changed we need to re-calculate the amplitude, otherwise\n     * the animation will start from the wrong position.\n     */ if (target !== ideal) amplitude = target - origin;\n    const calcDelta = (t)=>-amplitude * Math.exp(-t / timeConstant);\n    const calcLatest = (t)=>target + calcDelta(t);\n    const applyFriction = (t)=>{\n        const delta = calcDelta(t);\n        const latest = calcLatest(t);\n        state.done = Math.abs(delta) <= restDelta;\n        state.value = state.done ? target : latest;\n    };\n    /**\n     * Ideally this would resolve for t in a stateless way, we could\n     * do that by always precalculating the animation but as we know\n     * this will be done anyway we can assume that spring will\n     * be discovered during that.\n     */ let timeReachedBoundary;\n    let spring$1;\n    const checkCatchBoundary = (t)=>{\n        if (!isOutOfBounds(state.value)) return;\n        timeReachedBoundary = t;\n        spring$1 = spring({\n            keyframes: [\n                state.value,\n                nearestBoundary(state.value)\n            ],\n            velocity: calcGeneratorVelocity(calcLatest, t, state.value),\n            damping: bounceDamping,\n            stiffness: bounceStiffness,\n            restDelta,\n            restSpeed\n        });\n    };\n    checkCatchBoundary(0);\n    return {\n        calculatedDuration: null,\n        next: (t)=>{\n            /**\n             * We need to resolve the friction to figure out if we need a\n             * spring but we don't want to do this twice per frame. So here\n             * we flag if we updated for this frame and later if we did\n             * we can skip doing it again.\n             */ let hasUpdatedFrame = false;\n            if (!spring$1 && timeReachedBoundary === undefined) {\n                hasUpdatedFrame = true;\n                applyFriction(t);\n                checkCatchBoundary(t);\n            }\n            /**\n             * If we have a spring and the provided t is beyond the moment the friction\n             * animation crossed the min/max boundary, use the spring.\n             */ if (timeReachedBoundary !== undefined && t >= timeReachedBoundary) {\n                return spring$1.next(t - timeReachedBoundary);\n            } else {\n                !hasUpdatedFrame && applyFriction(t);\n                return state;\n            }\n        }\n    };\n}\nconst easeIn = /*@__PURE__*/ cubicBezier(0.42, 0, 1, 1);\nconst easeOut = /*@__PURE__*/ cubicBezier(0, 0, 0.58, 1);\nconst easeInOut = /*@__PURE__*/ cubicBezier(0.42, 0, 0.58, 1);\nconst isEasingArray = (ease)=>{\n    return Array.isArray(ease) && typeof ease[0] !== \"number\";\n};\nconst isBezierDefinition = (easing)=>Array.isArray(easing) && typeof easing[0] === \"number\";\nconst easingLookup = {\n    linear: motionUtils.noop,\n    easeIn,\n    easeInOut,\n    easeOut,\n    circIn,\n    circInOut,\n    circOut,\n    backIn,\n    backInOut,\n    backOut,\n    anticipate\n};\nconst easingDefinitionToFunction = (definition)=>{\n    if (isBezierDefinition(definition)) {\n        // If cubic bezier definition, create bezier curve\n        motionUtils.invariant(definition.length === 4, \"Cubic bezier arrays must contain four numerical values.\");\n        const [x1, y1, x2, y2] = definition;\n        return cubicBezier(x1, y1, x2, y2);\n    } else if (typeof definition === \"string\") {\n        // Else lookup from table\n        motionUtils.invariant(easingLookup[definition] !== undefined, \"Invalid easing type '\".concat(definition, \"'\"));\n        return easingLookup[definition];\n    }\n    return definition;\n};\n/**\n * Pipe\n * Compose other transformers to run linearily\n * pipe(min(20), max(40))\n * @param  {...functions} transformers\n * @return {function}\n */ const combineFunctions = (a, b)=>(v)=>b(a(v));\nconst pipe = function() {\n    for(var _len = arguments.length, transformers = new Array(_len), _key = 0; _key < _len; _key++){\n        transformers[_key] = arguments[_key];\n    }\n    return transformers.reduce(combineFunctions);\n};\n/*\n  Value in range from progress\n\n  Given a lower limit and an upper limit, we return the value within\n  that range as expressed by progress (usually a number from 0 to 1)\n\n  So progress = 0.5 would change\n\n  from -------- to\n\n  to\n\n  from ---- to\n\n  E.g. from = 10, to = 20, progress = 0.5 => 15\n\n  @param [number]: Lower limit of range\n  @param [number]: Upper limit of range\n  @param [number]: The progress between lower and upper limits expressed 0-1\n  @return [number]: Value as calculated from progress within range (not limited within range)\n*/ const mixNumber$1 = (from, to, progress)=>{\n    return from + (to - from) * progress;\n};\n// Adapted from https://gist.github.com/mjackson/5311256\nfunction hueToRgb(p, q, t) {\n    if (t < 0) t += 1;\n    if (t > 1) t -= 1;\n    if (t < 1 / 6) return p + (q - p) * 6 * t;\n    if (t < 1 / 2) return q;\n    if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n    return p;\n}\nfunction hslaToRgba(param) {\n    let { hue, saturation, lightness, alpha } = param;\n    hue /= 360;\n    saturation /= 100;\n    lightness /= 100;\n    let red = 0;\n    let green = 0;\n    let blue = 0;\n    if (!saturation) {\n        red = green = blue = lightness;\n    } else {\n        const q = lightness < 0.5 ? lightness * (1 + saturation) : lightness + saturation - lightness * saturation;\n        const p = 2 * lightness - q;\n        red = hueToRgb(p, q, hue + 1 / 3);\n        green = hueToRgb(p, q, hue);\n        blue = hueToRgb(p, q, hue - 1 / 3);\n    }\n    return {\n        red: Math.round(red * 255),\n        green: Math.round(green * 255),\n        blue: Math.round(blue * 255),\n        alpha\n    };\n}\nfunction mixImmediate(a, b) {\n    return (p)=>p > 0 ? b : a;\n}\n// Linear color space blending\n// Explained https://www.youtube.com/watch?v=LKnqECcg6Gw\n// Demonstrated http://codepen.io/osublake/pen/xGVVaN\nconst mixLinearColor = (from, to, v)=>{\n    const fromExpo = from * from;\n    const expo = v * (to * to - fromExpo) + fromExpo;\n    return expo < 0 ? 0 : Math.sqrt(expo);\n};\nconst colorTypes = [\n    hex,\n    rgba,\n    hsla\n];\nconst getColorType = (v)=>colorTypes.find((type)=>type.test(v));\nfunction asRGBA(color) {\n    const type = getColorType(color);\n    motionUtils.warning(Boolean(type), \"'\".concat(color, \"' is not an animatable color. Use the equivalent color code instead.\"));\n    if (!Boolean(type)) return false;\n    let model = type.parse(color);\n    if (type === hsla) {\n        // TODO Remove this cast - needed since Motion's stricter typing\n        model = hslaToRgba(model);\n    }\n    return model;\n}\nconst mixColor = (from, to)=>{\n    const fromRGBA = asRGBA(from);\n    const toRGBA = asRGBA(to);\n    if (!fromRGBA || !toRGBA) {\n        return mixImmediate(from, to);\n    }\n    const blended = {\n        ...fromRGBA\n    };\n    return (v)=>{\n        blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v);\n        blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v);\n        blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v);\n        blended.alpha = mixNumber$1(fromRGBA.alpha, toRGBA.alpha, v);\n        return rgba.transform(blended);\n    };\n};\nconst invisibleValues = new Set([\n    \"none\",\n    \"hidden\"\n]);\n/**\n * Returns a function that, when provided a progress value between 0 and 1,\n * will return the \"none\" or \"hidden\" string only when the progress is that of\n * the origin or target.\n */ function mixVisibility(origin, target) {\n    if (invisibleValues.has(origin)) {\n        return (p)=>p <= 0 ? origin : target;\n    } else {\n        return (p)=>p >= 1 ? target : origin;\n    }\n}\nfunction mixNumber(a, b) {\n    return (p)=>mixNumber$1(a, b, p);\n}\nfunction getMixer$1(a) {\n    if (typeof a === \"number\") {\n        return mixNumber;\n    } else if (typeof a === \"string\") {\n        return isCSSVariableToken(a) ? mixImmediate : color.test(a) ? mixColor : mixComplex;\n    } else if (Array.isArray(a)) {\n        return mixArray;\n    } else if (typeof a === \"object\") {\n        return color.test(a) ? mixColor : mixObject;\n    }\n    return mixImmediate;\n}\nfunction mixArray(a, b) {\n    const output = [\n        ...a\n    ];\n    const numValues = output.length;\n    const blendValue = a.map((v, i)=>getMixer$1(v)(v, b[i]));\n    return (p)=>{\n        for(let i = 0; i < numValues; i++){\n            output[i] = blendValue[i](p);\n        }\n        return output;\n    };\n}\nfunction mixObject(a, b) {\n    const output = {\n        ...a,\n        ...b\n    };\n    const blendValue = {};\n    for(const key in output){\n        if (a[key] !== undefined && b[key] !== undefined) {\n            blendValue[key] = getMixer$1(a[key])(a[key], b[key]);\n        }\n    }\n    return (v)=>{\n        for(const key in blendValue){\n            output[key] = blendValue[key](v);\n        }\n        return output;\n    };\n}\nfunction matchOrder(origin, target) {\n    var _a;\n    const orderedOrigin = [];\n    const pointers = {\n        color: 0,\n        var: 0,\n        number: 0\n    };\n    for(let i = 0; i < target.values.length; i++){\n        const type = target.types[i];\n        const originIndex = origin.indexes[type][pointers[type]];\n        const originValue = (_a = origin.values[originIndex]) !== null && _a !== void 0 ? _a : 0;\n        orderedOrigin[i] = originValue;\n        pointers[type]++;\n    }\n    return orderedOrigin;\n}\nconst mixComplex = (origin, target)=>{\n    const template = complex.createTransformer(target);\n    const originStats = analyseComplexValue(origin);\n    const targetStats = analyseComplexValue(target);\n    const canInterpolate = originStats.indexes.var.length === targetStats.indexes.var.length && originStats.indexes.color.length === targetStats.indexes.color.length && originStats.indexes.number.length >= targetStats.indexes.number.length;\n    if (canInterpolate) {\n        if (invisibleValues.has(origin) && !targetStats.values.length || invisibleValues.has(target) && !originStats.values.length) {\n            return mixVisibility(origin, target);\n        }\n        return pipe(mixArray(matchOrder(originStats, targetStats), targetStats.values), template);\n    } else {\n        motionUtils.warning(true, \"Complex values '\".concat(origin, \"' and '\").concat(target, \"' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.\"));\n        return mixImmediate(origin, target);\n    }\n};\nfunction mix(from, to, p) {\n    if (typeof from === \"number\" && typeof to === \"number\" && typeof p === \"number\") {\n        return mixNumber$1(from, to, p);\n    }\n    const mixer = getMixer$1(from);\n    return mixer(from, to);\n}\nfunction createMixers(output, ease, customMixer) {\n    const mixers = [];\n    const mixerFactory = customMixer || mix;\n    const numMixers = output.length - 1;\n    for(let i = 0; i < numMixers; i++){\n        let mixer = mixerFactory(output[i], output[i + 1]);\n        if (ease) {\n            const easingFunction = Array.isArray(ease) ? ease[i] || motionUtils.noop : ease;\n            mixer = pipe(easingFunction, mixer);\n        }\n        mixers.push(mixer);\n    }\n    return mixers;\n}\n/**\n * Create a function that maps from a numerical input array to a generic output array.\n *\n * Accepts:\n *   - Numbers\n *   - Colors (hex, hsl, hsla, rgb, rgba)\n *   - Complex (combinations of one or more numbers or strings)\n *\n * ```jsx\n * const mixColor = interpolate([0, 1], ['#fff', '#000'])\n *\n * mixColor(0.5) // 'rgba(128, 128, 128, 1)'\n * ```\n *\n * TODO Revist this approach once we've moved to data models for values,\n * probably not needed to pregenerate mixer functions.\n *\n * @public\n */ function interpolate(input, output) {\n    let { clamp: isClamp = true, ease, mixer } = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    const inputLength = input.length;\n    motionUtils.invariant(inputLength === output.length, \"Both input and output ranges must be the same length\");\n    /**\n     * If we're only provided a single input, we can just make a function\n     * that returns the output.\n     */ if (inputLength === 1) return ()=>output[0];\n    if (inputLength === 2 && input[0] === input[1]) return ()=>output[1];\n    // If input runs highest -> lowest, reverse both arrays\n    if (input[0] > input[inputLength - 1]) {\n        input = [\n            ...input\n        ].reverse();\n        output = [\n            ...output\n        ].reverse();\n    }\n    const mixers = createMixers(output, ease, mixer);\n    const numMixers = mixers.length;\n    const interpolator = (v)=>{\n        let i = 0;\n        if (numMixers > 1) {\n            for(; i < input.length - 2; i++){\n                if (v < input[i + 1]) break;\n            }\n        }\n        const progressInRange = progress(input[i], input[i + 1], v);\n        return mixers[i](progressInRange);\n    };\n    return isClamp ? (v)=>interpolator(clamp(input[0], input[inputLength - 1], v)) : interpolator;\n}\nfunction fillOffset(offset, remaining) {\n    const min = offset[offset.length - 1];\n    for(let i = 1; i <= remaining; i++){\n        const offsetProgress = progress(0, remaining, i);\n        offset.push(mixNumber$1(min, 1, offsetProgress));\n    }\n}\nfunction defaultOffset$1(arr) {\n    const offset = [\n        0\n    ];\n    fillOffset(offset, arr.length - 1);\n    return offset;\n}\nfunction convertOffsetToTimes(offset, duration) {\n    return offset.map((o)=>o * duration);\n}\nfunction defaultEasing$1(values, easing) {\n    return values.map(()=>easing || easeInOut).splice(0, values.length - 1);\n}\nfunction keyframes(param) {\n    let { duration = 300, keyframes: keyframeValues, times, ease = \"easeInOut\" } = param;\n    /**\n     * Easing functions can be externally defined as strings. Here we convert them\n     * into actual functions.\n     */ const easingFunctions = isEasingArray(ease) ? ease.map(easingDefinitionToFunction) : easingDefinitionToFunction(ease);\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */ const state = {\n        done: false,\n        value: keyframeValues[0]\n    };\n    /**\n     * Create a times array based on the provided 0-1 offsets\n     */ const absoluteTimes = convertOffsetToTimes(// Only use the provided offsets if they're the correct length\n    // TODO Maybe we should warn here if there's a length mismatch\n    times && times.length === keyframeValues.length ? times : defaultOffset$1(keyframeValues), duration);\n    const mapTimeToKeyframe = interpolate(absoluteTimes, keyframeValues, {\n        ease: Array.isArray(easingFunctions) ? easingFunctions : defaultEasing$1(keyframeValues, easingFunctions)\n    });\n    return {\n        calculatedDuration: duration,\n        next: (t)=>{\n            state.value = mapTimeToKeyframe(t);\n            state.done = t >= duration;\n            return state;\n        }\n    };\n}\nconst frameloopDriver = (update)=>{\n    const passTimestamp = (param)=>{\n        let { timestamp } = param;\n        return update(timestamp);\n    };\n    return {\n        start: ()=>frame.update(passTimestamp, true),\n        stop: ()=>cancelFrame(passTimestamp),\n        /**\n         * If we're processing this frame we can use the\n         * framelocked timestamp to keep things in sync.\n         */ now: ()=>frameData.isProcessing ? frameData.timestamp : time.now()\n    };\n};\nconst generators = {\n    decay: inertia,\n    inertia,\n    tween: keyframes,\n    keyframes: keyframes,\n    spring\n};\nconst percentToProgress = (percent)=>percent / 100;\n/**\n * Animation that runs on the main thread. Designed to be WAAPI-spec in the subset of\n * features we expose publically. Mostly the compatibility is to ensure visual identity\n * between both WAAPI and main thread animations.\n */ class MainThreadAnimation extends BaseAnimation {\n    flatten() {\n        super.flatten();\n        // If we've already resolved the animation, re-initialise it\n        if (this._resolved) {\n            Object.assign(this._resolved, this.initPlayback(this._resolved.keyframes));\n        }\n    }\n    initPlayback(keyframes$1) {\n        const { type = \"keyframes\", repeat = 0, repeatDelay = 0, repeatType, velocity = 0 } = this.options;\n        const generatorFactory = isGenerator(type) ? type : generators[type] || keyframes;\n        /**\n         * If our generator doesn't support mixing numbers, we need to replace keyframes with\n         * [0, 100] and then make a function that maps that to the actual keyframes.\n         *\n         * 100 is chosen instead of 1 as it works nicer with spring animations.\n         */ let mapPercentToKeyframes;\n        let mirroredGenerator;\n        if (generatorFactory !== keyframes && typeof keyframes$1[0] !== \"number\") {\n            if (true) {\n                motionUtils.invariant(keyframes$1.length === 2, \"Only two keyframes currently supported with spring and inertia animations. Trying to animate \".concat(keyframes$1));\n            }\n            mapPercentToKeyframes = pipe(percentToProgress, mix(keyframes$1[0], keyframes$1[1]));\n            keyframes$1 = [\n                0,\n                100\n            ];\n        }\n        const generator = generatorFactory({\n            ...this.options,\n            keyframes: keyframes$1\n        });\n        /**\n         * If we have a mirror repeat type we need to create a second generator that outputs the\n         * mirrored (not reversed) animation and later ping pong between the two generators.\n         */ if (repeatType === \"mirror\") {\n            mirroredGenerator = generatorFactory({\n                ...this.options,\n                keyframes: [\n                    ...keyframes$1\n                ].reverse(),\n                velocity: -velocity\n            });\n        }\n        /**\n         * If duration is undefined and we have repeat options,\n         * we need to calculate a duration from the generator.\n         *\n         * We set it to the generator itself to cache the duration.\n         * Any timeline resolver will need to have already precalculated\n         * the duration by this step.\n         */ if (generator.calculatedDuration === null) {\n            generator.calculatedDuration = calcGeneratorDuration(generator);\n        }\n        const { calculatedDuration } = generator;\n        const resolvedDuration = calculatedDuration + repeatDelay;\n        const totalDuration = resolvedDuration * (repeat + 1) - repeatDelay;\n        return {\n            generator,\n            mirroredGenerator,\n            mapPercentToKeyframes,\n            calculatedDuration,\n            resolvedDuration,\n            totalDuration\n        };\n    }\n    onPostResolved() {\n        const { autoplay = true } = this.options;\n        this.play();\n        if (this.pendingPlayState === \"paused\" || !autoplay) {\n            this.pause();\n        } else {\n            this.state = this.pendingPlayState;\n        }\n    }\n    tick(timestamp) {\n        let sample = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n        const { resolved } = this;\n        // If the animations has failed to resolve, return the final keyframe.\n        if (!resolved) {\n            const { keyframes } = this.options;\n            return {\n                done: true,\n                value: keyframes[keyframes.length - 1]\n            };\n        }\n        const { finalKeyframe, generator, mirroredGenerator, mapPercentToKeyframes, keyframes, calculatedDuration, totalDuration, resolvedDuration } = resolved;\n        if (this.startTime === null) return generator.next(0);\n        const { delay, repeat, repeatType, repeatDelay, onUpdate } = this.options;\n        /**\n         * requestAnimationFrame timestamps can come through as lower than\n         * the startTime as set by performance.now(). Here we prevent this,\n         * though in the future it could be possible to make setting startTime\n         * a pending operation that gets resolved here.\n         */ if (this.speed > 0) {\n            this.startTime = Math.min(this.startTime, timestamp);\n        } else if (this.speed < 0) {\n            this.startTime = Math.min(timestamp - totalDuration / this.speed, this.startTime);\n        }\n        // Update currentTime\n        if (sample) {\n            this.currentTime = timestamp;\n        } else if (this.holdTime !== null) {\n            this.currentTime = this.holdTime;\n        } else {\n            // Rounding the time because floating point arithmetic is not always accurate, e.g. 3000.367 - 1000.367 =\n            // 2000.0000000000002. This is a problem when we are comparing the currentTime with the duration, for\n            // example.\n            this.currentTime = Math.round(timestamp - this.startTime) * this.speed;\n        }\n        // Rebase on delay\n        const timeWithoutDelay = this.currentTime - delay * (this.speed >= 0 ? 1 : -1);\n        const isInDelayPhase = this.speed >= 0 ? timeWithoutDelay < 0 : timeWithoutDelay > totalDuration;\n        this.currentTime = Math.max(timeWithoutDelay, 0);\n        // If this animation has finished, set the current time  to the total duration.\n        if (this.state === \"finished\" && this.holdTime === null) {\n            this.currentTime = totalDuration;\n        }\n        let elapsed = this.currentTime;\n        let frameGenerator = generator;\n        if (repeat) {\n            /**\n             * Get the current progress (0-1) of the animation. If t is >\n             * than duration we'll get values like 2.5 (midway through the\n             * third iteration)\n             */ const progress = Math.min(this.currentTime, totalDuration) / resolvedDuration;\n            /**\n             * Get the current iteration (0 indexed). For instance the floor of\n             * 2.5 is 2.\n             */ let currentIteration = Math.floor(progress);\n            /**\n             * Get the current progress of the iteration by taking the remainder\n             * so 2.5 is 0.5 through iteration 2\n             */ let iterationProgress = progress % 1.0;\n            /**\n             * If iteration progress is 1 we count that as the end\n             * of the previous iteration.\n             */ if (!iterationProgress && progress >= 1) {\n                iterationProgress = 1;\n            }\n            iterationProgress === 1 && currentIteration--;\n            currentIteration = Math.min(currentIteration, repeat + 1);\n            /**\n             * Reverse progress if we're not running in \"normal\" direction\n             */ const isOddIteration = Boolean(currentIteration % 2);\n            if (isOddIteration) {\n                if (repeatType === \"reverse\") {\n                    iterationProgress = 1 - iterationProgress;\n                    if (repeatDelay) {\n                        iterationProgress -= repeatDelay / resolvedDuration;\n                    }\n                } else if (repeatType === \"mirror\") {\n                    frameGenerator = mirroredGenerator;\n                }\n            }\n            elapsed = clamp(0, 1, iterationProgress) * resolvedDuration;\n        }\n        /**\n         * If we're in negative time, set state as the initial keyframe.\n         * This prevents delay: x, duration: 0 animations from finishing\n         * instantly.\n         */ const state = isInDelayPhase ? {\n            done: false,\n            value: keyframes[0]\n        } : frameGenerator.next(elapsed);\n        if (mapPercentToKeyframes) {\n            state.value = mapPercentToKeyframes(state.value);\n        }\n        let { done } = state;\n        if (!isInDelayPhase && calculatedDuration !== null) {\n            done = this.speed >= 0 ? this.currentTime >= totalDuration : this.currentTime <= 0;\n        }\n        const isAnimationFinished = this.holdTime === null && (this.state === \"finished\" || this.state === \"running\" && done);\n        if (isAnimationFinished && finalKeyframe !== undefined) {\n            state.value = getFinalKeyframe(keyframes, this.options, finalKeyframe);\n        }\n        if (onUpdate) {\n            onUpdate(state.value);\n        }\n        if (isAnimationFinished) {\n            this.finish();\n        }\n        return state;\n    }\n    get duration() {\n        const { resolved } = this;\n        return resolved ? millisecondsToSeconds(resolved.calculatedDuration) : 0;\n    }\n    get time() {\n        return millisecondsToSeconds(this.currentTime);\n    }\n    set time(newTime) {\n        newTime = secondsToMilliseconds(newTime);\n        this.currentTime = newTime;\n        if (this.holdTime !== null || this.speed === 0) {\n            this.holdTime = newTime;\n        } else if (this.driver) {\n            this.startTime = this.driver.now() - newTime / this.speed;\n        }\n    }\n    get speed() {\n        return this.playbackSpeed;\n    }\n    set speed(newSpeed) {\n        const hasChanged = this.playbackSpeed !== newSpeed;\n        this.playbackSpeed = newSpeed;\n        if (hasChanged) {\n            this.time = millisecondsToSeconds(this.currentTime);\n        }\n    }\n    play() {\n        if (!this.resolver.isScheduled) {\n            this.resolver.resume();\n        }\n        if (!this._resolved) {\n            this.pendingPlayState = \"running\";\n            return;\n        }\n        if (this.isStopped) return;\n        const { driver = frameloopDriver, onPlay, startTime } = this.options;\n        if (!this.driver) {\n            this.driver = driver((timestamp)=>this.tick(timestamp));\n        }\n        onPlay && onPlay();\n        const now = this.driver.now();\n        if (this.holdTime !== null) {\n            this.startTime = now - this.holdTime;\n        } else if (!this.startTime) {\n            this.startTime = startTime !== null && startTime !== void 0 ? startTime : this.calcStartTime();\n        } else if (this.state === \"finished\") {\n            this.startTime = now;\n        }\n        if (this.state === \"finished\") {\n            this.updateFinishedPromise();\n        }\n        this.cancelTime = this.startTime;\n        this.holdTime = null;\n        /**\n         * Set playState to running only after we've used it in\n         * the previous logic.\n         */ this.state = \"running\";\n        this.driver.start();\n    }\n    pause() {\n        var _a;\n        if (!this._resolved) {\n            this.pendingPlayState = \"paused\";\n            return;\n        }\n        this.state = \"paused\";\n        this.holdTime = (_a = this.currentTime) !== null && _a !== void 0 ? _a : 0;\n    }\n    complete() {\n        if (this.state !== \"running\") {\n            this.play();\n        }\n        this.pendingPlayState = this.state = \"finished\";\n        this.holdTime = null;\n    }\n    finish() {\n        this.teardown();\n        this.state = \"finished\";\n        const { onComplete } = this.options;\n        onComplete && onComplete();\n    }\n    cancel() {\n        if (this.cancelTime !== null) {\n            this.tick(this.cancelTime);\n        }\n        this.teardown();\n        this.updateFinishedPromise();\n    }\n    teardown() {\n        this.state = \"idle\";\n        this.stopDriver();\n        this.resolveFinishedPromise();\n        this.updateFinishedPromise();\n        this.startTime = this.cancelTime = null;\n        this.resolver.cancel();\n    }\n    stopDriver() {\n        if (!this.driver) return;\n        this.driver.stop();\n        this.driver = undefined;\n    }\n    sample(time) {\n        this.startTime = 0;\n        return this.tick(time, true);\n    }\n    constructor(options){\n        super(options);\n        /**\n         * The time at which the animation was paused.\n         */ this.holdTime = null;\n        /**\n         * The time at which the animation was cancelled.\n         */ this.cancelTime = null;\n        /**\n         * The current time of the animation.\n         */ this.currentTime = 0;\n        /**\n         * Playback speed as a factor. 0 would be stopped, -1 reverse and 2 double speed.\n         */ this.playbackSpeed = 1;\n        /**\n         * The state of the animation to apply when the animation is resolved. This\n         * allows calls to the public API to control the animation before it is resolved,\n         * without us having to resolve it first.\n         */ this.pendingPlayState = \"running\";\n        /**\n         * The time at which the animation was started.\n         */ this.startTime = null;\n        this.state = \"idle\";\n        /**\n         * This method is bound to the instance to fix a pattern where\n         * animation.stop is returned as a reference from a useEffect.\n         */ this.stop = ()=>{\n            this.resolver.cancel();\n            this.isStopped = true;\n            if (this.state === \"idle\") return;\n            this.teardown();\n            const { onStop } = this.options;\n            onStop && onStop();\n        };\n        const { name, motionValue, element, keyframes } = this.options;\n        const KeyframeResolver$1 = (element === null || element === void 0 ? void 0 : element.KeyframeResolver) || KeyframeResolver;\n        const onResolved = (resolvedKeyframes, finalKeyframe)=>this.onKeyframesResolved(resolvedKeyframes, finalKeyframe);\n        this.resolver = new KeyframeResolver$1(keyframes, onResolved, name, motionValue, element);\n        this.resolver.scheduleResolve();\n    }\n}\n// Legacy interface\nfunction animateValue(options) {\n    return new MainThreadAnimation(options);\n}\n/**\n * A list of values that can be hardware-accelerated.\n */ const acceleratedValues = new Set([\n    \"opacity\",\n    \"clipPath\",\n    \"filter\",\n    \"transform\"\n]);\nfunction memo(callback) {\n    let result;\n    return ()=>{\n        if (result === undefined) result = callback();\n        return result;\n    };\n}\n/**\n * Add the ability for test suites to manually set support flags\n * to better test more environments.\n */ const supportsFlags = {\n    linearEasing: undefined\n};\nfunction memoSupports(callback, supportsFlag) {\n    const memoized = memo(callback);\n    return ()=>{\n        var _a;\n        return (_a = supportsFlags[supportsFlag]) !== null && _a !== void 0 ? _a : memoized();\n    };\n}\nconst supportsLinearEasing = /*@__PURE__*/ memoSupports(()=>{\n    try {\n        document.createElement(\"div\").animate({\n            opacity: 0\n        }, {\n            easing: \"linear(0, 1)\"\n        });\n    } catch (e) {\n        return false;\n    }\n    return true;\n}, \"linearEasing\");\nfunction isWaapiSupportedEasing(easing) {\n    return Boolean(typeof easing === \"function\" && supportsLinearEasing() || !easing || typeof easing === \"string\" && (easing in supportedWaapiEasing || supportsLinearEasing()) || isBezierDefinition(easing) || Array.isArray(easing) && easing.every(isWaapiSupportedEasing));\n}\nconst cubicBezierAsString = (param)=>{\n    let [a, b, c, d] = param;\n    return \"cubic-bezier(\".concat(a, \", \").concat(b, \", \").concat(c, \", \").concat(d, \")\");\n};\nconst supportedWaapiEasing = {\n    linear: \"linear\",\n    ease: \"ease\",\n    easeIn: \"ease-in\",\n    easeOut: \"ease-out\",\n    easeInOut: \"ease-in-out\",\n    circIn: /*@__PURE__*/ cubicBezierAsString([\n        0,\n        0.65,\n        0.55,\n        1\n    ]),\n    circOut: /*@__PURE__*/ cubicBezierAsString([\n        0.55,\n        0,\n        1,\n        0.45\n    ]),\n    backIn: /*@__PURE__*/ cubicBezierAsString([\n        0.31,\n        0.01,\n        0.66,\n        -0.59\n    ]),\n    backOut: /*@__PURE__*/ cubicBezierAsString([\n        0.33,\n        1.53,\n        0.69,\n        0.99\n    ])\n};\nfunction mapEasingToNativeEasing(easing, duration) {\n    if (!easing) {\n        return undefined;\n    } else if (typeof easing === \"function\" && supportsLinearEasing()) {\n        return generateLinearEasing(easing, duration);\n    } else if (isBezierDefinition(easing)) {\n        return cubicBezierAsString(easing);\n    } else if (Array.isArray(easing)) {\n        return easing.map((segmentEasing)=>mapEasingToNativeEasing(segmentEasing, duration) || supportedWaapiEasing.easeOut);\n    } else {\n        return supportedWaapiEasing[easing];\n    }\n}\nfunction startWaapiAnimation(element, valueName, keyframes) {\n    let { delay = 0, duration = 300, repeat = 0, repeatType = \"loop\", ease = \"easeInOut\", times } = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};\n    const keyframeOptions = {\n        [valueName]: keyframes\n    };\n    if (times) keyframeOptions.offset = times;\n    const easing = mapEasingToNativeEasing(ease, duration);\n    /**\n     * If this is an easing array, apply to keyframes, not animation as a whole\n     */ if (Array.isArray(easing)) keyframeOptions.easing = easing;\n    return element.animate(keyframeOptions, {\n        delay,\n        duration,\n        easing: !Array.isArray(easing) ? easing : \"linear\",\n        fill: \"both\",\n        iterations: repeat + 1,\n        direction: repeatType === \"reverse\" ? \"alternate\" : \"normal\"\n    });\n}\nfunction attachTimeline(animation, timeline) {\n    animation.timeline = timeline;\n    animation.onfinish = null;\n}\nconst supportsWaapi = /*@__PURE__*/ memo(()=>Object.hasOwnProperty.call(Element.prototype, \"animate\"));\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */ const sampleDelta = 10; //ms\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */ const maxDuration = 20000;\n/**\n * Check if an animation can run natively via WAAPI or requires pregenerated keyframes.\n * WAAPI doesn't support spring or function easings so we run these as JS animation before\n * handing off.\n */ function requiresPregeneratedKeyframes(options) {\n    return isGenerator(options.type) || options.type === \"spring\" || !isWaapiSupportedEasing(options.ease);\n}\nfunction pregenerateKeyframes(keyframes, options) {\n    /**\n     * Create a main-thread animation to pregenerate keyframes.\n     * We sample this at regular intervals to generate keyframes that we then\n     * linearly interpolate between.\n     */ const sampleAnimation = new MainThreadAnimation({\n        ...options,\n        keyframes,\n        repeat: 0,\n        delay: 0,\n        isGenerator: true\n    });\n    let state = {\n        done: false,\n        value: keyframes[0]\n    };\n    const pregeneratedKeyframes = [];\n    /**\n     * Bail after 20 seconds of pre-generated keyframes as it's likely\n     * we're heading for an infinite loop.\n     */ let t = 0;\n    while(!state.done && t < maxDuration){\n        state = sampleAnimation.sample(t);\n        pregeneratedKeyframes.push(state.value);\n        t += sampleDelta;\n    }\n    return {\n        times: undefined,\n        keyframes: pregeneratedKeyframes,\n        duration: t - sampleDelta,\n        ease: \"linear\"\n    };\n}\nconst unsupportedEasingFunctions = {\n    anticipate,\n    backInOut,\n    circInOut\n};\nfunction isUnsupportedEase(key) {\n    return key in unsupportedEasingFunctions;\n}\nclass AcceleratedAnimation extends BaseAnimation {\n    initPlayback(keyframes, finalKeyframe) {\n        var _a;\n        let { duration = 300, times, ease, type, motionValue, name, startTime } = this.options;\n        /**\n         * If element has since been unmounted, return false to indicate\n         * the animation failed to initialised.\n         */ if (!((_a = motionValue.owner) === null || _a === void 0 ? void 0 : _a.current)) {\n            return false;\n        }\n        /**\n         * If the user has provided an easing function name that isn't supported\n         * by WAAPI (like \"anticipate\"), we need to provide the corressponding\n         * function. This will later get converted to a linear() easing function.\n         */ if (typeof ease === \"string\" && supportsLinearEasing() && isUnsupportedEase(ease)) {\n            ease = unsupportedEasingFunctions[ease];\n        }\n        /**\n         * If this animation needs pre-generated keyframes then generate.\n         */ if (requiresPregeneratedKeyframes(this.options)) {\n            const { onComplete, onUpdate, motionValue, element, ...options } = this.options;\n            const pregeneratedAnimation = pregenerateKeyframes(keyframes, options);\n            keyframes = pregeneratedAnimation.keyframes;\n            // If this is a very short animation, ensure we have\n            // at least two keyframes to animate between as older browsers\n            // can't animate between a single keyframe.\n            if (keyframes.length === 1) {\n                keyframes[1] = keyframes[0];\n            }\n            duration = pregeneratedAnimation.duration;\n            times = pregeneratedAnimation.times;\n            ease = pregeneratedAnimation.ease;\n            type = \"keyframes\";\n        }\n        const animation = startWaapiAnimation(motionValue.owner.current, name, keyframes, {\n            ...this.options,\n            duration,\n            times,\n            ease\n        });\n        // Override the browser calculated startTime with one synchronised to other JS\n        // and WAAPI animations starting this event loop.\n        animation.startTime = startTime !== null && startTime !== void 0 ? startTime : this.calcStartTime();\n        if (this.pendingTimeline) {\n            attachTimeline(animation, this.pendingTimeline);\n            this.pendingTimeline = undefined;\n        } else {\n            /**\n             * Prefer the `onfinish` prop as it's more widely supported than\n             * the `finished` promise.\n             *\n             * Here, we synchronously set the provided MotionValue to the end\n             * keyframe. If we didn't, when the WAAPI animation is finished it would\n             * be removed from the element which would then revert to its old styles.\n             */ animation.onfinish = ()=>{\n                const { onComplete } = this.options;\n                motionValue.set(getFinalKeyframe(keyframes, this.options, finalKeyframe));\n                onComplete && onComplete();\n                this.cancel();\n                this.resolveFinishedPromise();\n            };\n        }\n        return {\n            animation,\n            duration,\n            times,\n            type,\n            ease,\n            keyframes: keyframes\n        };\n    }\n    get duration() {\n        const { resolved } = this;\n        if (!resolved) return 0;\n        const { duration } = resolved;\n        return millisecondsToSeconds(duration);\n    }\n    get time() {\n        const { resolved } = this;\n        if (!resolved) return 0;\n        const { animation } = resolved;\n        return millisecondsToSeconds(animation.currentTime || 0);\n    }\n    set time(newTime) {\n        const { resolved } = this;\n        if (!resolved) return;\n        const { animation } = resolved;\n        animation.currentTime = secondsToMilliseconds(newTime);\n    }\n    get speed() {\n        const { resolved } = this;\n        if (!resolved) return 1;\n        const { animation } = resolved;\n        return animation.playbackRate;\n    }\n    set speed(newSpeed) {\n        const { resolved } = this;\n        if (!resolved) return;\n        const { animation } = resolved;\n        animation.playbackRate = newSpeed;\n    }\n    get state() {\n        const { resolved } = this;\n        if (!resolved) return \"idle\";\n        const { animation } = resolved;\n        return animation.playState;\n    }\n    get startTime() {\n        const { resolved } = this;\n        if (!resolved) return null;\n        const { animation } = resolved;\n        // Coerce to number as TypeScript incorrectly types this\n        // as CSSNumberish\n        return animation.startTime;\n    }\n    /**\n     * Replace the default DocumentTimeline with another AnimationTimeline.\n     * Currently used for scroll animations.\n     */ attachTimeline(timeline) {\n        if (!this._resolved) {\n            this.pendingTimeline = timeline;\n        } else {\n            const { resolved } = this;\n            if (!resolved) return motionUtils.noop;\n            const { animation } = resolved;\n            attachTimeline(animation, timeline);\n        }\n        return motionUtils.noop;\n    }\n    play() {\n        if (this.isStopped) return;\n        const { resolved } = this;\n        if (!resolved) return;\n        const { animation } = resolved;\n        if (animation.playState === \"finished\") {\n            this.updateFinishedPromise();\n        }\n        animation.play();\n    }\n    pause() {\n        const { resolved } = this;\n        if (!resolved) return;\n        const { animation } = resolved;\n        animation.pause();\n    }\n    stop() {\n        this.resolver.cancel();\n        this.isStopped = true;\n        if (this.state === \"idle\") return;\n        this.resolveFinishedPromise();\n        this.updateFinishedPromise();\n        const { resolved } = this;\n        if (!resolved) return;\n        const { animation, keyframes, duration, type, ease, times } = resolved;\n        if (animation.playState === \"idle\" || animation.playState === \"finished\") {\n            return;\n        }\n        /**\n         * WAAPI doesn't natively have any interruption capabilities.\n         *\n         * Rather than read commited styles back out of the DOM, we can\n         * create a renderless JS animation and sample it twice to calculate\n         * its current value, \"previous\" value, and therefore allow\n         * Motion to calculate velocity for any subsequent animation.\n         */ if (this.time) {\n            const { motionValue, onUpdate, onComplete, element, ...options } = this.options;\n            const sampleAnimation = new MainThreadAnimation({\n                ...options,\n                keyframes,\n                duration,\n                type,\n                ease,\n                times,\n                isGenerator: true\n            });\n            const sampleTime = secondsToMilliseconds(this.time);\n            motionValue.setWithVelocity(sampleAnimation.sample(sampleTime - sampleDelta).value, sampleAnimation.sample(sampleTime).value, sampleDelta);\n        }\n        const { onStop } = this.options;\n        onStop && onStop();\n        this.cancel();\n    }\n    complete() {\n        const { resolved } = this;\n        if (!resolved) return;\n        resolved.animation.finish();\n    }\n    cancel() {\n        const { resolved } = this;\n        if (!resolved) return;\n        resolved.animation.cancel();\n    }\n    static supports(options) {\n        const { motionValue, name, repeatDelay, repeatType, damping, type } = options;\n        return supportsWaapi() && name && acceleratedValues.has(name) && motionValue && motionValue.owner && motionValue.owner.current instanceof HTMLElement && /**\n             * If we're outputting values to onUpdate then we can't use WAAPI as there's\n             * no way to read the value from WAAPI every frame.\n             */ !motionValue.owner.getProps().onUpdate && !repeatDelay && repeatType !== \"mirror\" && damping !== 0 && type !== \"inertia\";\n    }\n    constructor(options){\n        super(options);\n        const { name, motionValue, element, keyframes } = this.options;\n        this.resolver = new DOMKeyframesResolver(keyframes, (resolvedKeyframes, finalKeyframe)=>this.onKeyframesResolved(resolvedKeyframes, finalKeyframe), name, motionValue, element);\n        this.resolver.scheduleResolve();\n    }\n}\nconst supportsScrollTimeline = memo(()=>window.ScrollTimeline !== undefined);\nclass GroupPlaybackControls {\n    then(onResolve, onReject) {\n        return Promise.all(this.animations).then(onResolve).catch(onReject);\n    }\n    /**\n     * TODO: Filter out cancelled or stopped animations before returning\n     */ getAll(propName) {\n        return this.animations[0][propName];\n    }\n    setAll(propName, newValue) {\n        for(let i = 0; i < this.animations.length; i++){\n            this.animations[i][propName] = newValue;\n        }\n    }\n    attachTimeline(timeline, fallback) {\n        const subscriptions = this.animations.map((animation)=>{\n            if (supportsScrollTimeline() && animation.attachTimeline) {\n                return animation.attachTimeline(timeline);\n            } else {\n                return fallback(animation);\n            }\n        });\n        return ()=>{\n            subscriptions.forEach((cancel, i)=>{\n                cancel && cancel();\n                this.animations[i].stop();\n            });\n        };\n    }\n    get time() {\n        return this.getAll(\"time\");\n    }\n    set time(time) {\n        this.setAll(\"time\", time);\n    }\n    get speed() {\n        return this.getAll(\"speed\");\n    }\n    set speed(speed) {\n        this.setAll(\"speed\", speed);\n    }\n    get startTime() {\n        return this.getAll(\"startTime\");\n    }\n    get duration() {\n        let max = 0;\n        for(let i = 0; i < this.animations.length; i++){\n            max = Math.max(max, this.animations[i].duration);\n        }\n        return max;\n    }\n    runAll(methodName) {\n        this.animations.forEach((controls)=>controls[methodName]());\n    }\n    flatten() {\n        this.runAll(\"flatten\");\n    }\n    play() {\n        this.runAll(\"play\");\n    }\n    pause() {\n        this.runAll(\"pause\");\n    }\n    cancel() {\n        this.runAll(\"cancel\");\n    }\n    complete() {\n        this.runAll(\"complete\");\n    }\n    constructor(animations){\n        // Bound to accomodate common `return animation.stop` pattern\n        this.stop = ()=>this.runAll(\"stop\");\n        this.animations = animations.filter(Boolean);\n    }\n}\n/**\n * Decide whether a transition is defined on a given Transition.\n * This filters out orchestration options and returns true\n * if any options are left.\n */ function isTransitionDefined(param) {\n    let { when, delay: _delay, delayChildren, staggerChildren, staggerDirection, repeat, repeatType, repeatDelay, from, elapsed, ...transition } = param;\n    return !!Object.keys(transition).length;\n}\nconst animateMotionValue = function(name, value, target) {\n    let transition = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {}, element = arguments.length > 4 ? arguments[4] : void 0, isHandoff = arguments.length > 5 ? arguments[5] : void 0;\n    return (onComplete)=>{\n        const valueTransition = getValueTransition$1(transition, name) || {};\n        /**\n     * Most transition values are currently completely overwritten by value-specific\n     * transitions. In the future it'd be nicer to blend these transitions. But for now\n     * delay actually does inherit from the root transition if not value-specific.\n     */ const delay = valueTransition.delay || transition.delay || 0;\n        /**\n     * Elapsed isn't a public transition option but can be passed through from\n     * optimized appear effects in milliseconds.\n     */ let { elapsed = 0 } = transition;\n        elapsed = elapsed - secondsToMilliseconds(delay);\n        let options = {\n            keyframes: Array.isArray(target) ? target : [\n                null,\n                target\n            ],\n            ease: \"easeOut\",\n            velocity: value.getVelocity(),\n            ...valueTransition,\n            delay: -elapsed,\n            onUpdate: (v)=>{\n                value.set(v);\n                valueTransition.onUpdate && valueTransition.onUpdate(v);\n            },\n            onComplete: ()=>{\n                onComplete();\n                valueTransition.onComplete && valueTransition.onComplete();\n            },\n            name,\n            motionValue: value,\n            element: isHandoff ? undefined : element\n        };\n        /**\n     * If there's no transition defined for this value, we can generate\n     * unqiue transition settings for this value.\n     */ if (!isTransitionDefined(valueTransition)) {\n            options = {\n                ...options,\n                ...getDefaultTransition(name, options)\n            };\n        }\n        /**\n     * Both WAAPI and our internal animation functions use durations\n     * as defined by milliseconds, while our external API defines them\n     * as seconds.\n     */ if (options.duration) {\n            options.duration = secondsToMilliseconds(options.duration);\n        }\n        if (options.repeatDelay) {\n            options.repeatDelay = secondsToMilliseconds(options.repeatDelay);\n        }\n        if (options.from !== undefined) {\n            options.keyframes[0] = options.from;\n        }\n        let shouldSkip = false;\n        if (options.type === false || options.duration === 0 && !options.repeatDelay) {\n            options.duration = 0;\n            if (options.delay === 0) {\n                shouldSkip = true;\n            }\n        }\n        if (instantAnimationState.current || MotionGlobalConfig.skipAnimations) {\n            shouldSkip = true;\n            options.duration = 0;\n            options.delay = 0;\n        }\n        /**\n     * If we can or must skip creating the animation, and apply only\n     * the final keyframe, do so. We also check once keyframes are resolved but\n     * this early check prevents the need to create an animation at all.\n     */ if (shouldSkip && !isHandoff && value.get() !== undefined) {\n            const finalKeyframe = getFinalKeyframe(options.keyframes, valueTransition);\n            if (finalKeyframe !== undefined) {\n                frame.update(()=>{\n                    options.onUpdate(finalKeyframe);\n                    options.onComplete();\n                });\n                // We still want to return some animation controls here rather\n                // than returning undefined\n                return new GroupPlaybackControls([]);\n            }\n        }\n        /**\n     * Animate via WAAPI if possible. If this is a handoff animation, the optimised animation will be running via\n     * WAAPI. Therefore, this animation must be JS to ensure it runs \"under\" the\n     * optimised animation.\n     */ if (!isHandoff && AcceleratedAnimation.supports(options)) {\n            return new AcceleratedAnimation(options);\n        } else {\n            return new MainThreadAnimation(options);\n        }\n    };\n};\nconst isCustomValue = (v)=>{\n    return Boolean(v && typeof v === \"object\" && v.mix && v.toValue);\n};\nconst resolveFinalValueInKeyframes = (v)=>{\n    // TODO maybe throw if v.length - 1 is placeholder token?\n    return isKeyframesTarget(v) ? v[v.length - 1] || 0 : v;\n};\nfunction addUniqueItem(arr, item) {\n    if (arr.indexOf(item) === -1) arr.push(item);\n}\nfunction removeItem(arr, item) {\n    const index = arr.indexOf(item);\n    if (index > -1) arr.splice(index, 1);\n}\n// Adapted from array-move\nfunction moveItem(param, fromIndex, toIndex) {\n    let [...arr] = param;\n    const startIndex = fromIndex < 0 ? arr.length + fromIndex : fromIndex;\n    if (startIndex >= 0 && startIndex < arr.length) {\n        const endIndex = toIndex < 0 ? arr.length + toIndex : toIndex;\n        const [item] = arr.splice(fromIndex, 1);\n        arr.splice(endIndex, 0, item);\n    }\n    return arr;\n}\nclass SubscriptionManager {\n    add(handler) {\n        addUniqueItem(this.subscriptions, handler);\n        return ()=>removeItem(this.subscriptions, handler);\n    }\n    notify(a, b, c) {\n        const numSubscriptions = this.subscriptions.length;\n        if (!numSubscriptions) return;\n        if (numSubscriptions === 1) {\n            /**\n             * If there's only a single handler we can just call it without invoking a loop.\n             */ this.subscriptions[0](a, b, c);\n        } else {\n            for(let i = 0; i < numSubscriptions; i++){\n                /**\n                 * Check whether the handler exists before firing as it's possible\n                 * the subscriptions were modified during this loop running.\n                 */ const handler = this.subscriptions[i];\n                handler && handler(a, b, c);\n            }\n        }\n    }\n    getSize() {\n        return this.subscriptions.length;\n    }\n    clear() {\n        this.subscriptions.length = 0;\n    }\n    constructor(){\n        this.subscriptions = [];\n    }\n}\n/**\n * Maximum time between the value of two frames, beyond which we\n * assume the velocity has since been 0.\n */ const MAX_VELOCITY_DELTA = 30;\nconst isFloat = (value)=>{\n    return !isNaN(parseFloat(value));\n};\nconst collectMotionValues = {\n    current: undefined\n};\n/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */ class MotionValue {\n    setCurrent(current) {\n        this.current = current;\n        this.updatedAt = time.now();\n        if (this.canTrackVelocity === null && current !== undefined) {\n            this.canTrackVelocity = isFloat(this.current);\n        }\n    }\n    setPrevFrameValue() {\n        let prevFrameValue = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.current;\n        this.prevFrameValue = prevFrameValue;\n        this.prevUpdatedAt = this.updatedAt;\n    }\n    /**\n     * Adds a function that will be notified when the `MotionValue` is updated.\n     *\n     * It returns a function that, when called, will cancel the subscription.\n     *\n     * When calling `onChange` inside a React component, it should be wrapped with the\n     * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n     * from the `useEffect` function to ensure you don't add duplicate subscribers..\n     *\n     * ```jsx\n     * export const MyComponent = () => {\n     *   const x = useMotionValue(0)\n     *   const y = useMotionValue(0)\n     *   const opacity = useMotionValue(1)\n     *\n     *   useEffect(() => {\n     *     function updateOpacity() {\n     *       const maxXY = Math.max(x.get(), y.get())\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n     *       opacity.set(newOpacity)\n     *     }\n     *\n     *     const unsubscribeX = x.on(\"change\", updateOpacity)\n     *     const unsubscribeY = y.on(\"change\", updateOpacity)\n     *\n     *     return () => {\n     *       unsubscribeX()\n     *       unsubscribeY()\n     *     }\n     *   }, [])\n     *\n     *   return <motion.div style={{ x }} />\n     * }\n     * ```\n     *\n     * @param subscriber - A function that receives the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @deprecated\n     */ onChange(subscription) {\n        if (true) {\n            warnOnce(false, 'value.onChange(callback) is deprecated. Switch to value.on(\"change\", callback).');\n        }\n        return this.on(\"change\", subscription);\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        const unsubscribe = this.events[eventName].add(callback);\n        if (eventName === \"change\") {\n            return ()=>{\n                unsubscribe();\n                /**\n                 * If we have no more change listeners by the start\n                 * of the next frame, stop active animations.\n                 */ frame.read(()=>{\n                    if (!this.events.change.getSize()) {\n                        this.stop();\n                    }\n                });\n            };\n        }\n        return unsubscribe;\n    }\n    clearListeners() {\n        for(const eventManagers in this.events){\n            this.events[eventManagers].clear();\n        }\n    }\n    /**\n     * Attaches a passive effect to the `MotionValue`.\n     *\n     * @internal\n     */ attach(passiveEffect, stopPassiveEffect) {\n        this.passiveEffect = passiveEffect;\n        this.stopPassiveEffect = stopPassiveEffect;\n    }\n    /**\n     * Sets the state of the `MotionValue`.\n     *\n     * @remarks\n     *\n     * ```jsx\n     * const x = useMotionValue(0)\n     * x.set(10)\n     * ```\n     *\n     * @param latest - Latest value to set.\n     * @param render - Whether to notify render subscribers. Defaults to `true`\n     *\n     * @public\n     */ set(v) {\n        let render = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;\n        if (!render || !this.passiveEffect) {\n            this.updateAndNotify(v, render);\n        } else {\n            this.passiveEffect(v, this.updateAndNotify);\n        }\n    }\n    setWithVelocity(prev, current, delta) {\n        this.set(current);\n        this.prev = undefined;\n        this.prevFrameValue = prev;\n        this.prevUpdatedAt = this.updatedAt - delta;\n    }\n    /**\n     * Set the state of the `MotionValue`, stopping any active animations,\n     * effects, and resets velocity to `0`.\n     */ jump(v) {\n        let endAnimation = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;\n        this.updateAndNotify(v);\n        this.prev = v;\n        this.prevUpdatedAt = this.prevFrameValue = undefined;\n        endAnimation && this.stop();\n        if (this.stopPassiveEffect) this.stopPassiveEffect();\n    }\n    /**\n     * Returns the latest state of `MotionValue`\n     *\n     * @returns - The latest state of `MotionValue`\n     *\n     * @public\n     */ get() {\n        if (collectMotionValues.current) {\n            collectMotionValues.current.push(this);\n        }\n        return this.current;\n    }\n    /**\n     * @public\n     */ getPrevious() {\n        return this.prev;\n    }\n    /**\n     * Returns the latest velocity of `MotionValue`\n     *\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n     *\n     * @public\n     */ getVelocity() {\n        const currentTime = time.now();\n        if (!this.canTrackVelocity || this.prevFrameValue === undefined || currentTime - this.updatedAt > MAX_VELOCITY_DELTA) {\n            return 0;\n        }\n        const delta = Math.min(this.updatedAt - this.prevUpdatedAt, MAX_VELOCITY_DELTA);\n        // Casts because of parseFloat's poor typing\n        return velocityPerSecond(parseFloat(this.current) - parseFloat(this.prevFrameValue), delta);\n    }\n    /**\n     * Registers a new animation to control this `MotionValue`. Only one\n     * animation can drive a `MotionValue` at one time.\n     *\n     * ```jsx\n     * value.start()\n     * ```\n     *\n     * @param animation - A function that starts the provided animation\n     *\n     * @internal\n     */ start(startAnimation) {\n        this.stop();\n        return new Promise((resolve)=>{\n            this.hasAnimated = true;\n            this.animation = startAnimation(resolve);\n            if (this.events.animationStart) {\n                this.events.animationStart.notify();\n            }\n        }).then(()=>{\n            if (this.events.animationComplete) {\n                this.events.animationComplete.notify();\n            }\n            this.clearAnimation();\n        });\n    }\n    /**\n     * Stop the currently active animation.\n     *\n     * @public\n     */ stop() {\n        if (this.animation) {\n            this.animation.stop();\n            if (this.events.animationCancel) {\n                this.events.animationCancel.notify();\n            }\n        }\n        this.clearAnimation();\n    }\n    /**\n     * Returns `true` if this value is currently animating.\n     *\n     * @public\n     */ isAnimating() {\n        return !!this.animation;\n    }\n    clearAnimation() {\n        delete this.animation;\n    }\n    /**\n     * Destroy and clean up subscribers to this `MotionValue`.\n     *\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n     * created a `MotionValue` via the `motionValue` function.\n     *\n     * @public\n     */ destroy() {\n        this.clearListeners();\n        this.stop();\n        if (this.stopPassiveEffect) {\n            this.stopPassiveEffect();\n        }\n    }\n    /**\n     * @param init - The initiating value\n     * @param config - Optional configuration options\n     *\n     * -  `transformer`: A function to transform incoming values with.\n     *\n     * @internal\n     */ constructor(init, options = {}){\n        var _this = this;\n        /**\n         * This will be replaced by the build step with the latest version number.\n         * When MotionValues are provided to motion components, warn if versions are mixed.\n         */ this.version = \"11.15.0\";\n        /**\n         * Tracks whether this value can output a velocity. Currently this is only true\n         * if the value is numerical, but we might be able to widen the scope here and support\n         * other value types.\n         *\n         * @internal\n         */ this.canTrackVelocity = null;\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */ this.events = {};\n        this.updateAndNotify = function(v) {\n            let render = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;\n            const currentTime = time.now();\n            /**\n             * If we're updating the value during another frame or eventloop\n             * than the previous frame, then the we set the previous frame value\n             * to current.\n             */ if (_this.updatedAt !== currentTime) {\n                _this.setPrevFrameValue();\n            }\n            _this.prev = _this.current;\n            _this.setCurrent(v);\n            // Update update subscribers\n            if (_this.current !== _this.prev && _this.events.change) {\n                _this.events.change.notify(_this.current);\n            }\n            // Update render subscribers\n            if (render && _this.events.renderRequest) {\n                _this.events.renderRequest.notify(_this.current);\n            }\n        };\n        this.hasAnimated = false;\n        this.setCurrent(init);\n        this.owner = options.owner;\n    }\n}\nfunction motionValue(init, options) {\n    return new MotionValue(init, options);\n}\n/**\n * Set VisualElement's MotionValue, creating a new MotionValue for it if\n * it doesn't exist.\n */ function setMotionValue(visualElement, key, value) {\n    if (visualElement.hasValue(key)) {\n        visualElement.getValue(key).set(value);\n    } else {\n        visualElement.addValue(key, motionValue(value));\n    }\n}\nfunction setTarget(visualElement, definition) {\n    const resolved = resolveVariant(visualElement, definition);\n    let { transitionEnd = {}, transition = {}, ...target } = resolved || {};\n    target = {\n        ...target,\n        ...transitionEnd\n    };\n    for(const key in target){\n        const value = resolveFinalValueInKeyframes(target[key]);\n        setMotionValue(visualElement, key, value);\n    }\n}\n/**\n * Convert camelCase to dash-case properties.\n */ const camelToDash = (str)=>str.replace(/([a-z])([A-Z])/gu, \"$1-$2\").toLowerCase();\nconst optimizedAppearDataId = \"framerAppearId\";\nconst optimizedAppearDataAttribute = \"data-\" + camelToDash(optimizedAppearDataId);\nfunction getOptimisedAppearId(visualElement) {\n    return visualElement.props[optimizedAppearDataAttribute];\n}\nconst isMotionValue = (value)=>Boolean(value && value.getVelocity);\nfunction isWillChangeMotionValue(value) {\n    return Boolean(isMotionValue(value) && value.add);\n}\nfunction addValueToWillChange(visualElement, key) {\n    const willChange = visualElement.getValue(\"willChange\");\n    /**\n     * It could be that a user has set willChange to a regular MotionValue,\n     * in which case we can't add the value to it.\n     */ if (isWillChangeMotionValue(willChange)) {\n        return willChange.add(key);\n    }\n}\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */ function shouldBlockAnimation(param, key) {\n    let { protectedKeys, needsAnimating } = param;\n    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\nfunction animateTarget(visualElement, targetAndTransition) {\n    let { delay = 0, transitionOverride, type } = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    var _a;\n    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = targetAndTransition;\n    if (transitionOverride) transition = transitionOverride;\n    const animations = [];\n    const animationTypeState = type && visualElement.animationState && visualElement.animationState.getState()[type];\n    for(const key in target){\n        const value = visualElement.getValue(key, (_a = visualElement.latestValues[key]) !== null && _a !== void 0 ? _a : null);\n        const valueTarget = target[key];\n        if (valueTarget === undefined || animationTypeState && shouldBlockAnimation(animationTypeState, key)) {\n            continue;\n        }\n        const valueTransition = {\n            delay,\n            ...getValueTransition$1(transition || {}, key)\n        };\n        /**\n         * If this is the first time a value is being animated, check\n         * to see if we're handling off from an existing animation.\n         */ let isHandoff = false;\n        if (window.MotionHandoffAnimation) {\n            const appearId = getOptimisedAppearId(visualElement);\n            if (appearId) {\n                const startTime = window.MotionHandoffAnimation(appearId, key, frame);\n                if (startTime !== null) {\n                    valueTransition.startTime = startTime;\n                    isHandoff = true;\n                }\n            }\n        }\n        addValueToWillChange(visualElement, key);\n        value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key) ? {\n            type: false\n        } : valueTransition, visualElement, isHandoff));\n        const animation = value.animation;\n        if (animation) {\n            animations.push(animation);\n        }\n    }\n    if (transitionEnd) {\n        Promise.all(animations).then(()=>{\n            frame.update(()=>{\n                transitionEnd && setTarget(visualElement, transitionEnd);\n            });\n        });\n    }\n    return animations;\n}\nfunction animateVariant(visualElement, variant) {\n    let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    var _a;\n    const resolved = resolveVariant(visualElement, variant, options.type === \"exit\" ? (_a = visualElement.presenceContext) === null || _a === void 0 ? void 0 : _a.custom : undefined);\n    let { transition = visualElement.getDefaultTransition() || {} } = resolved || {};\n    if (options.transitionOverride) {\n        transition = options.transitionOverride;\n    }\n    /**\n     * If we have a variant, create a callback that runs it as an animation.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */ const getAnimation = resolved ? ()=>Promise.all(animateTarget(visualElement, resolved, options)) : ()=>Promise.resolve();\n    /**\n     * If we have children, create a callback that runs all their animations.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */ const getChildAnimations = visualElement.variantChildren && visualElement.variantChildren.size ? function() {\n        let forwardDelay = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;\n        const { delayChildren = 0, staggerChildren, staggerDirection } = transition;\n        return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);\n    } : ()=>Promise.resolve();\n    /**\n     * If the transition explicitly defines a \"when\" option, we need to resolve either\n     * this animation or all children animations before playing the other.\n     */ const { when } = transition;\n    if (when) {\n        const [first, last] = when === \"beforeChildren\" ? [\n            getAnimation,\n            getChildAnimations\n        ] : [\n            getChildAnimations,\n            getAnimation\n        ];\n        return first().then(()=>last());\n    } else {\n        return Promise.all([\n            getAnimation(),\n            getChildAnimations(options.delay)\n        ]);\n    }\n}\nfunction animateChildren(visualElement, variant) {\n    let delayChildren = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0, staggerChildren = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0, staggerDirection = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 1, options = arguments.length > 5 ? arguments[5] : void 0;\n    const animations = [];\n    const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;\n    const generateStaggerDuration = staggerDirection === 1 ? function() {\n        let i = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;\n        return i * staggerChildren;\n    } : function() {\n        let i = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;\n        return maxStaggerDuration - i * staggerChildren;\n    };\n    Array.from(visualElement.variantChildren).sort(sortByTreeOrder).forEach((child, i)=>{\n        child.notify(\"AnimationStart\", variant);\n        animations.push(animateVariant(child, variant, {\n            ...options,\n            delay: delayChildren + generateStaggerDuration(i)\n        }).then(()=>child.notify(\"AnimationComplete\", variant)));\n    });\n    return Promise.all(animations);\n}\nfunction sortByTreeOrder(a, b) {\n    return a.sortNodePosition(b);\n}\nfunction animateVisualElement(visualElement, definition) {\n    let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    visualElement.notify(\"AnimationStart\", definition);\n    let animation;\n    if (Array.isArray(definition)) {\n        const animations = definition.map((variant)=>animateVariant(visualElement, variant, options));\n        animation = Promise.all(animations);\n    } else if (typeof definition === \"string\") {\n        animation = animateVariant(visualElement, definition, options);\n    } else {\n        const resolvedDefinition = typeof definition === \"function\" ? resolveVariant(visualElement, definition, options.custom) : definition;\n        animation = Promise.all(animateTarget(visualElement, resolvedDefinition, options));\n    }\n    return animation.then(()=>{\n        visualElement.notify(\"AnimationComplete\", definition);\n    });\n}\nconst numVariantProps = variantProps.length;\nfunction getVariantContext(visualElement) {\n    if (!visualElement) return undefined;\n    if (!visualElement.isControllingVariants) {\n        const context = visualElement.parent ? getVariantContext(visualElement.parent) || {} : {};\n        if (visualElement.props.initial !== undefined) {\n            context.initial = visualElement.props.initial;\n        }\n        return context;\n    }\n    const context = {};\n    for(let i = 0; i < numVariantProps; i++){\n        const name = variantProps[i];\n        const prop = visualElement.props[name];\n        if (isVariantLabel(prop) || prop === false) {\n            context[name] = prop;\n        }\n    }\n    return context;\n}\nconst reversePriorityOrder = [\n    ...variantPriorityOrder\n].reverse();\nconst numAnimationTypes = variantPriorityOrder.length;\nfunction animateList(visualElement) {\n    return (animations)=>Promise.all(animations.map((param)=>{\n            let { animation, options } = param;\n            return animateVisualElement(visualElement, animation, options);\n        }));\n}\nfunction createAnimationState(visualElement) {\n    let animate = animateList(visualElement);\n    let state = createState();\n    let isInitialRender = true;\n    /**\n     * This function will be used to reduce the animation definitions for\n     * each active animation type into an object of resolved values for it.\n     */ const buildResolvedTypeValues = (type)=>(acc, definition)=>{\n            var _a;\n            const resolved = resolveVariant(visualElement, definition, type === \"exit\" ? (_a = visualElement.presenceContext) === null || _a === void 0 ? void 0 : _a.custom : undefined);\n            if (resolved) {\n                const { transition, transitionEnd, ...target } = resolved;\n                acc = {\n                    ...acc,\n                    ...target,\n                    ...transitionEnd\n                };\n            }\n            return acc;\n        };\n    /**\n     * This just allows us to inject mocked animation functions\n     * @internal\n     */ function setAnimateFunction(makeAnimator) {\n        animate = makeAnimator(visualElement);\n    }\n    /**\n     * When we receive new props, we need to:\n     * 1. Create a list of protected keys for each type. This is a directory of\n     *    value keys that are currently being \"handled\" by types of a higher priority\n     *    so that whenever an animation is played of a given type, these values are\n     *    protected from being animated.\n     * 2. Determine if an animation type needs animating.\n     * 3. Determine if any values have been removed from a type and figure out\n     *    what to animate those to.\n     */ function animateChanges(changedActiveType) {\n        const { props } = visualElement;\n        const context = getVariantContext(visualElement.parent) || {};\n        /**\n         * A list of animations that we'll build into as we iterate through the animation\n         * types. This will get executed at the end of the function.\n         */ const animations = [];\n        /**\n         * Keep track of which values have been removed. Then, as we hit lower priority\n         * animation types, we can check if they contain removed values and animate to that.\n         */ const removedKeys = new Set();\n        /**\n         * A dictionary of all encountered keys. This is an object to let us build into and\n         * copy it without iteration. Each time we hit an animation type we set its protected\n         * keys - the keys its not allowed to animate - to the latest version of this object.\n         */ let encounteredKeys = {};\n        /**\n         * If a variant has been removed at a given index, and this component is controlling\n         * variant animations, we want to ensure lower-priority variants are forced to animate.\n         */ let removedVariantIndex = Infinity;\n        /**\n         * Iterate through all animation types in reverse priority order. For each, we want to\n         * detect which values it's handling and whether or not they've changed (and therefore\n         * need to be animated). If any values have been removed, we want to detect those in\n         * lower priority props and flag for animation.\n         */ for(let i = 0; i < numAnimationTypes; i++){\n            const type = reversePriorityOrder[i];\n            const typeState = state[type];\n            const prop = props[type] !== undefined ? props[type] : context[type];\n            const propIsVariant = isVariantLabel(prop);\n            /**\n             * If this type has *just* changed isActive status, set activeDelta\n             * to that status. Otherwise set to null.\n             */ const activeDelta = type === changedActiveType ? typeState.isActive : null;\n            if (activeDelta === false) removedVariantIndex = i;\n            /**\n             * If this prop is an inherited variant, rather than been set directly on the\n             * component itself, we want to make sure we allow the parent to trigger animations.\n             *\n             * TODO: Can probably change this to a !isControllingVariants check\n             */ let isInherited = prop === context[type] && prop !== props[type] && propIsVariant;\n            /**\n             *\n             */ if (isInherited && isInitialRender && visualElement.manuallyAnimateOnMount) {\n                isInherited = false;\n            }\n            /**\n             * Set all encountered keys so far as the protected keys for this type. This will\n             * be any key that has been animated or otherwise handled by active, higher-priortiy types.\n             */ typeState.protectedKeys = {\n                ...encounteredKeys\n            };\n            // Check if we can skip analysing this prop early\n            if (// If it isn't active and hasn't *just* been set as inactive\n            !typeState.isActive && activeDelta === null || // If we didn't and don't have any defined prop for this animation type\n            !prop && !typeState.prevProp || // Or if the prop doesn't define an animation\n            isAnimationControls(prop) || typeof prop === \"boolean\") {\n                continue;\n            }\n            /**\n             * As we go look through the values defined on this type, if we detect\n             * a changed value or a value that was removed in a higher priority, we set\n             * this to true and add this prop to the animation list.\n             */ const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);\n            let shouldAnimateType = variantDidChange || // If we're making this variant active, we want to always make it active\n            type === changedActiveType && typeState.isActive && !isInherited && propIsVariant || // If we removed a higher-priority variant (i is in reverse order)\n            i > removedVariantIndex && propIsVariant;\n            let handledRemovedValues = false;\n            /**\n             * As animations can be set as variant lists, variants or target objects, we\n             * coerce everything to an array if it isn't one already\n             */ const definitionList = Array.isArray(prop) ? prop : [\n                prop\n            ];\n            /**\n             * Build an object of all the resolved values. We'll use this in the subsequent\n             * animateChanges calls to determine whether a value has changed.\n             */ let resolvedValues = definitionList.reduce(buildResolvedTypeValues(type), {});\n            if (activeDelta === false) resolvedValues = {};\n            /**\n             * Now we need to loop through all the keys in the prev prop and this prop,\n             * and decide:\n             * 1. If the value has changed, and needs animating\n             * 2. If it has been removed, and needs adding to the removedKeys set\n             * 3. If it has been removed in a higher priority type and needs animating\n             * 4. If it hasn't been removed in a higher priority but hasn't changed, and\n             *    needs adding to the type's protectedKeys list.\n             */ const { prevResolvedValues = {} } = typeState;\n            const allKeys = {\n                ...prevResolvedValues,\n                ...resolvedValues\n            };\n            const markToAnimate = (key)=>{\n                shouldAnimateType = true;\n                if (removedKeys.has(key)) {\n                    handledRemovedValues = true;\n                    removedKeys.delete(key);\n                }\n                typeState.needsAnimating[key] = true;\n                const motionValue = visualElement.getValue(key);\n                if (motionValue) motionValue.liveStyle = false;\n            };\n            for(const key in allKeys){\n                const next = resolvedValues[key];\n                const prev = prevResolvedValues[key];\n                // If we've already handled this we can just skip ahead\n                if (encounteredKeys.hasOwnProperty(key)) continue;\n                /**\n                 * If the value has changed, we probably want to animate it.\n                 */ let valueHasChanged = false;\n                if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {\n                    valueHasChanged = !shallowCompare(next, prev);\n                } else {\n                    valueHasChanged = next !== prev;\n                }\n                if (valueHasChanged) {\n                    if (next !== undefined && next !== null) {\n                        // If next is defined and doesn't equal prev, it needs animating\n                        markToAnimate(key);\n                    } else {\n                        // If it's undefined, it's been removed.\n                        removedKeys.add(key);\n                    }\n                } else if (next !== undefined && removedKeys.has(key)) {\n                    /**\n                     * If next hasn't changed and it isn't undefined, we want to check if it's\n                     * been removed by a higher priority\n                     */ markToAnimate(key);\n                } else {\n                    /**\n                     * If it hasn't changed, we add it to the list of protected values\n                     * to ensure it doesn't get animated.\n                     */ typeState.protectedKeys[key] = true;\n                }\n            }\n            /**\n             * Update the typeState so next time animateChanges is called we can compare the\n             * latest prop and resolvedValues to these.\n             */ typeState.prevProp = prop;\n            typeState.prevResolvedValues = resolvedValues;\n            /**\n             *\n             */ if (typeState.isActive) {\n                encounteredKeys = {\n                    ...encounteredKeys,\n                    ...resolvedValues\n                };\n            }\n            if (isInitialRender && visualElement.blockInitialAnimation) {\n                shouldAnimateType = false;\n            }\n            /**\n             * If this is an inherited prop we want to skip this animation\n             * unless the inherited variants haven't changed on this render.\n             */ const willAnimateViaParent = isInherited && variantDidChange;\n            const needsAnimating = !willAnimateViaParent || handledRemovedValues;\n            if (shouldAnimateType && needsAnimating) {\n                animations.push(...definitionList.map((animation)=>({\n                        animation: animation,\n                        options: {\n                            type\n                        }\n                    })));\n            }\n        }\n        /**\n         * If there are some removed value that haven't been dealt with,\n         * we need to create a new animation that falls back either to the value\n         * defined in the style prop, or the last read value.\n         */ if (removedKeys.size) {\n            const fallbackAnimation = {};\n            removedKeys.forEach((key)=>{\n                const fallbackTarget = visualElement.getBaseTarget(key);\n                const motionValue = visualElement.getValue(key);\n                if (motionValue) motionValue.liveStyle = true;\n                // @ts-expect-error - @mattgperry to figure if we should do something here\n                fallbackAnimation[key] = fallbackTarget !== null && fallbackTarget !== void 0 ? fallbackTarget : null;\n            });\n            animations.push({\n                animation: fallbackAnimation\n            });\n        }\n        let shouldAnimate = Boolean(animations.length);\n        if (isInitialRender && (props.initial === false || props.initial === props.animate) && !visualElement.manuallyAnimateOnMount) {\n            shouldAnimate = false;\n        }\n        isInitialRender = false;\n        return shouldAnimate ? animate(animations) : Promise.resolve();\n    }\n    /**\n     * Change whether a certain animation type is active.\n     */ function setActive(type, isActive) {\n        var _a;\n        // If the active state hasn't changed, we can safely do nothing here\n        if (state[type].isActive === isActive) return Promise.resolve();\n        // Propagate active change to children\n        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach((child)=>{\n            var _a;\n            return (_a = child.animationState) === null || _a === void 0 ? void 0 : _a.setActive(type, isActive);\n        });\n        state[type].isActive = isActive;\n        const animations = animateChanges(type);\n        for(const key in state){\n            state[key].protectedKeys = {};\n        }\n        return animations;\n    }\n    return {\n        animateChanges,\n        setActive,\n        setAnimateFunction,\n        getState: ()=>state,\n        reset: ()=>{\n            state = createState();\n            isInitialRender = true;\n        }\n    };\n}\nfunction checkVariantsDidChange(prev, next) {\n    if (typeof next === \"string\") {\n        return next !== prev;\n    } else if (Array.isArray(next)) {\n        return !shallowCompare(next, prev);\n    }\n    return false;\n}\nfunction createTypeState() {\n    let isActive = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;\n    return {\n        isActive,\n        protectedKeys: {},\n        needsAnimating: {},\n        prevResolvedValues: {}\n    };\n}\nfunction createState() {\n    return {\n        animate: createTypeState(true),\n        whileInView: createTypeState(),\n        whileHover: createTypeState(),\n        whileTap: createTypeState(),\n        whileDrag: createTypeState(),\n        whileFocus: createTypeState(),\n        exit: createTypeState()\n    };\n}\nclass Feature {\n    update() {}\n    constructor(node){\n        this.isMounted = false;\n        this.node = node;\n    }\n}\nclass AnimationFeature extends Feature {\n    updateAnimationControlsSubscription() {\n        const { animate } = this.node.getProps();\n        if (isAnimationControls(animate)) {\n            this.unmountControls = animate.subscribe(this.node);\n        }\n    }\n    /**\n     * Subscribe any provided AnimationControls to the component's VisualElement\n     */ mount() {\n        this.updateAnimationControlsSubscription();\n    }\n    update() {\n        const { animate } = this.node.getProps();\n        const { animate: prevAnimate } = this.node.prevProps || {};\n        if (animate !== prevAnimate) {\n            this.updateAnimationControlsSubscription();\n        }\n    }\n    unmount() {\n        var _a;\n        this.node.animationState.reset();\n        (_a = this.unmountControls) === null || _a === void 0 ? void 0 : _a.call(this);\n    }\n    /**\n     * We dynamically generate the AnimationState manager as it contains a reference\n     * to the underlying animation library. We only want to load that if we load this,\n     * so people can optionally code split it out using the `m` component.\n     */ constructor(node){\n        super(node);\n        node.animationState || (node.animationState = createAnimationState(node));\n    }\n}\nlet id$2 = 0;\nclass ExitAnimationFeature extends Feature {\n    update() {\n        if (!this.node.presenceContext) return;\n        const { isPresent, onExitComplete } = this.node.presenceContext;\n        const { isPresent: prevIsPresent } = this.node.prevPresenceContext || {};\n        if (!this.node.animationState || isPresent === prevIsPresent) {\n            return;\n        }\n        const exitAnimation = this.node.animationState.setActive(\"exit\", !isPresent);\n        if (onExitComplete && !isPresent) {\n            exitAnimation.then(()=>onExitComplete(this.id));\n        }\n    }\n    mount() {\n        const { register } = this.node.presenceContext || {};\n        if (register) {\n            this.unmount = register(this.id);\n        }\n    }\n    unmount() {}\n    constructor(){\n        super(...arguments);\n        this.id = id$2++;\n    }\n}\nconst animations = {\n    animation: {\n        Feature: AnimationFeature\n    },\n    exit: {\n        Feature: ExitAnimationFeature\n    }\n};\nfunction extractEventInfo(event) {\n    return {\n        point: {\n            x: event.pageX,\n            y: event.pageY\n        }\n    };\n}\nconst addPointerInfo = (handler)=>{\n    return (event)=>motionDom.isPrimaryPointer(event) && handler(event, extractEventInfo(event));\n};\nfunction addDomEvent(target, eventName, handler) {\n    let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {\n        passive: true\n    };\n    target.addEventListener(eventName, handler, options);\n    return ()=>target.removeEventListener(eventName, handler);\n}\nfunction addPointerEvent(target, eventName, handler, options) {\n    return addDomEvent(target, eventName, addPointerInfo(handler), options);\n}\nconst distance = (a, b)=>Math.abs(a - b);\nfunction distance2D(a, b) {\n    // Multi-dimensional\n    const xDelta = distance(a.x, b.x);\n    const yDelta = distance(a.y, b.y);\n    return Math.sqrt(xDelta ** 2 + yDelta ** 2);\n}\n/**\n * @internal\n */ class PanSession {\n    updateHandlers(handlers) {\n        this.handlers = handlers;\n    }\n    end() {\n        this.removeListeners && this.removeListeners();\n        cancelFrame(this.updatePoint);\n    }\n    constructor(event, handlers, { transformPagePoint, contextWindow, dragSnapToOrigin = false } = {}){\n        /**\n         * @internal\n         */ this.startEvent = null;\n        /**\n         * @internal\n         */ this.lastMoveEvent = null;\n        /**\n         * @internal\n         */ this.lastMoveEventInfo = null;\n        /**\n         * @internal\n         */ this.handlers = {};\n        /**\n         * @internal\n         */ this.contextWindow = window;\n        this.updatePoint = ()=>{\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo)) return;\n            const info = getPanInfo(this.lastMoveEventInfo, this.history);\n            const isPanStarted = this.startEvent !== null;\n            // Only start panning if the offset is larger than 3 pixels. If we make it\n            // any larger than this we'll want to reset the pointer history\n            // on the first update to avoid visual snapping to the cursoe.\n            const isDistancePastThreshold = distance2D(info.offset, {\n                x: 0,\n                y: 0\n            }) >= 3;\n            if (!isPanStarted && !isDistancePastThreshold) return;\n            const { point } = info;\n            const { timestamp } = frameData;\n            this.history.push({\n                ...point,\n                timestamp\n            });\n            const { onStart, onMove } = this.handlers;\n            if (!isPanStarted) {\n                onStart && onStart(this.lastMoveEvent, info);\n                this.startEvent = this.lastMoveEvent;\n            }\n            onMove && onMove(this.lastMoveEvent, info);\n        };\n        this.handlePointerMove = (event, info)=>{\n            this.lastMoveEvent = event;\n            this.lastMoveEventInfo = transformPoint(info, this.transformPagePoint);\n            // Throttle mouse move event to once per frame\n            frame.update(this.updatePoint, true);\n        };\n        this.handlePointerUp = (event, info)=>{\n            this.end();\n            const { onEnd, onSessionEnd, resumeAnimation } = this.handlers;\n            if (this.dragSnapToOrigin) resumeAnimation && resumeAnimation();\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo)) return;\n            const panInfo = getPanInfo(event.type === \"pointercancel\" ? this.lastMoveEventInfo : transformPoint(info, this.transformPagePoint), this.history);\n            if (this.startEvent && onEnd) {\n                onEnd(event, panInfo);\n            }\n            onSessionEnd && onSessionEnd(event, panInfo);\n        };\n        // If we have more than one touch, don't start detecting this gesture\n        if (!motionDom.isPrimaryPointer(event)) return;\n        this.dragSnapToOrigin = dragSnapToOrigin;\n        this.handlers = handlers;\n        this.transformPagePoint = transformPagePoint;\n        this.contextWindow = contextWindow || window;\n        const info = extractEventInfo(event);\n        const initialInfo = transformPoint(info, this.transformPagePoint);\n        const { point } = initialInfo;\n        const { timestamp } = frameData;\n        this.history = [\n            {\n                ...point,\n                timestamp\n            }\n        ];\n        const { onSessionStart } = handlers;\n        onSessionStart && onSessionStart(event, getPanInfo(initialInfo, this.history));\n        this.removeListeners = pipe(addPointerEvent(this.contextWindow, \"pointermove\", this.handlePointerMove), addPointerEvent(this.contextWindow, \"pointerup\", this.handlePointerUp), addPointerEvent(this.contextWindow, \"pointercancel\", this.handlePointerUp));\n    }\n}\nfunction transformPoint(info, transformPagePoint) {\n    return transformPagePoint ? {\n        point: transformPagePoint(info.point)\n    } : info;\n}\nfunction subtractPoint(a, b) {\n    return {\n        x: a.x - b.x,\n        y: a.y - b.y\n    };\n}\nfunction getPanInfo(param, history) {\n    let { point } = param;\n    return {\n        point,\n        delta: subtractPoint(point, lastDevicePoint(history)),\n        offset: subtractPoint(point, startDevicePoint(history)),\n        velocity: getVelocity(history, 0.1)\n    };\n}\nfunction startDevicePoint(history) {\n    return history[0];\n}\nfunction lastDevicePoint(history) {\n    return history[history.length - 1];\n}\nfunction getVelocity(history, timeDelta) {\n    if (history.length < 2) {\n        return {\n            x: 0,\n            y: 0\n        };\n    }\n    let i = history.length - 1;\n    let timestampedPoint = null;\n    const lastPoint = lastDevicePoint(history);\n    while(i >= 0){\n        timestampedPoint = history[i];\n        if (lastPoint.timestamp - timestampedPoint.timestamp > secondsToMilliseconds(timeDelta)) {\n            break;\n        }\n        i--;\n    }\n    if (!timestampedPoint) {\n        return {\n            x: 0,\n            y: 0\n        };\n    }\n    const time = millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);\n    if (time === 0) {\n        return {\n            x: 0,\n            y: 0\n        };\n    }\n    const currentVelocity = {\n        x: (lastPoint.x - timestampedPoint.x) / time,\n        y: (lastPoint.y - timestampedPoint.y) / time\n    };\n    if (currentVelocity.x === Infinity) {\n        currentVelocity.x = 0;\n    }\n    if (currentVelocity.y === Infinity) {\n        currentVelocity.y = 0;\n    }\n    return currentVelocity;\n}\nfunction isRefObject(ref) {\n    return ref && typeof ref === \"object\" && Object.prototype.hasOwnProperty.call(ref, \"current\");\n}\nconst SCALE_PRECISION = 0.0001;\nconst SCALE_MIN = 1 - SCALE_PRECISION;\nconst SCALE_MAX = 1 + SCALE_PRECISION;\nconst TRANSLATE_PRECISION = 0.01;\nconst TRANSLATE_MIN = 0 - TRANSLATE_PRECISION;\nconst TRANSLATE_MAX = 0 + TRANSLATE_PRECISION;\nfunction calcLength(axis) {\n    return axis.max - axis.min;\n}\nfunction isNear(value, target, maxDistance) {\n    return Math.abs(value - target) <= maxDistance;\n}\nfunction calcAxisDelta(delta, source, target) {\n    let origin = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0.5;\n    delta.origin = origin;\n    delta.originPoint = mixNumber$1(source.min, source.max, delta.origin);\n    delta.scale = calcLength(target) / calcLength(source);\n    delta.translate = mixNumber$1(target.min, target.max, delta.origin) - delta.originPoint;\n    if (delta.scale >= SCALE_MIN && delta.scale <= SCALE_MAX || isNaN(delta.scale)) {\n        delta.scale = 1.0;\n    }\n    if (delta.translate >= TRANSLATE_MIN && delta.translate <= TRANSLATE_MAX || isNaN(delta.translate)) {\n        delta.translate = 0.0;\n    }\n}\nfunction calcBoxDelta(delta, source, target, origin) {\n    calcAxisDelta(delta.x, source.x, target.x, origin ? origin.originX : undefined);\n    calcAxisDelta(delta.y, source.y, target.y, origin ? origin.originY : undefined);\n}\nfunction calcRelativeAxis(target, relative, parent) {\n    target.min = parent.min + relative.min;\n    target.max = target.min + calcLength(relative);\n}\nfunction calcRelativeBox(target, relative, parent) {\n    calcRelativeAxis(target.x, relative.x, parent.x);\n    calcRelativeAxis(target.y, relative.y, parent.y);\n}\nfunction calcRelativeAxisPosition(target, layout, parent) {\n    target.min = layout.min - parent.min;\n    target.max = target.min + calcLength(layout);\n}\nfunction calcRelativePosition(target, layout, parent) {\n    calcRelativeAxisPosition(target.x, layout.x, parent.x);\n    calcRelativeAxisPosition(target.y, layout.y, parent.y);\n}\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */ function applyConstraints(point, param, elastic) {\n    let { min, max } = param;\n    if (min !== undefined && point < min) {\n        // If we have a min point defined, and this is outside of that, constrain\n        point = elastic ? mixNumber$1(min, point, elastic.min) : Math.max(point, min);\n    } else if (max !== undefined && point > max) {\n        // If we have a max point defined, and this is outside of that, constrain\n        point = elastic ? mixNumber$1(max, point, elastic.max) : Math.min(point, max);\n    }\n    return point;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */ function calcRelativeAxisConstraints(axis, min, max) {\n    return {\n        min: min !== undefined ? axis.min + min : undefined,\n        max: max !== undefined ? axis.max + max - (axis.max - axis.min) : undefined\n    };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */ function calcRelativeConstraints(layoutBox, param) {\n    let { top, left, bottom, right } = param;\n    return {\n        x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom)\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */ function calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n    let min = constraintsAxis.min - layoutAxis.min;\n    let max = constraintsAxis.max - layoutAxis.max;\n    // If the constraints axis is actually smaller than the layout axis then we can\n    // flip the constraints\n    if (constraintsAxis.max - constraintsAxis.min < layoutAxis.max - layoutAxis.min) {\n        [min, max] = [\n            max,\n            min\n        ];\n    }\n    return {\n        min,\n        max\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */ function calcViewportConstraints(layoutBox, constraintsBox) {\n    return {\n        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y)\n    };\n}\n/**\n * Calculate a transform origin relative to the source axis, between 0-1, that results\n * in an asthetically pleasing scale/transform needed to project from source to target.\n */ function calcOrigin$1(source, target) {\n    let origin = 0.5;\n    const sourceLength = calcLength(source);\n    const targetLength = calcLength(target);\n    if (targetLength > sourceLength) {\n        origin = progress(target.min, target.max - sourceLength, source.min);\n    } else if (sourceLength > targetLength) {\n        origin = progress(source.min, source.max - targetLength, target.min);\n    }\n    return clamp(0, 1, origin);\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */ function rebaseAxisConstraints(layout, constraints) {\n    const relativeConstraints = {};\n    if (constraints.min !== undefined) {\n        relativeConstraints.min = constraints.min - layout.min;\n    }\n    if (constraints.max !== undefined) {\n        relativeConstraints.max = constraints.max - layout.min;\n    }\n    return relativeConstraints;\n}\nconst defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */ function resolveDragElastic() {\n    let dragElastic = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : defaultElastic;\n    if (dragElastic === false) {\n        dragElastic = 0;\n    } else if (dragElastic === true) {\n        dragElastic = defaultElastic;\n    }\n    return {\n        x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n        y: resolveAxisElastic(dragElastic, \"top\", \"bottom\")\n    };\n}\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n    return {\n        min: resolvePointElastic(dragElastic, minLabel),\n        max: resolvePointElastic(dragElastic, maxLabel)\n    };\n}\nfunction resolvePointElastic(dragElastic, label) {\n    return typeof dragElastic === \"number\" ? dragElastic : dragElastic[label] || 0;\n}\nconst createAxisDelta = ()=>({\n        translate: 0,\n        scale: 1,\n        origin: 0,\n        originPoint: 0\n    });\nconst createDelta = ()=>({\n        x: createAxisDelta(),\n        y: createAxisDelta()\n    });\nconst createAxis = ()=>({\n        min: 0,\n        max: 0\n    });\nconst createBox = ()=>({\n        x: createAxis(),\n        y: createAxis()\n    });\nfunction eachAxis(callback) {\n    return [\n        callback(\"x\"),\n        callback(\"y\")\n    ];\n}\n/**\n * Bounding boxes tend to be defined as top, left, right, bottom. For various operations\n * it's easier to consider each axis individually. This function returns a bounding box\n * as a map of single-axis min/max values.\n */ function convertBoundingBoxToBox(param) {\n    let { top, left, right, bottom } = param;\n    return {\n        x: {\n            min: left,\n            max: right\n        },\n        y: {\n            min: top,\n            max: bottom\n        }\n    };\n}\nfunction convertBoxToBoundingBox(param) {\n    let { x, y } = param;\n    return {\n        top: y.min,\n        right: x.max,\n        bottom: y.max,\n        left: x.min\n    };\n}\n/**\n * Applies a TransformPoint function to a bounding box. TransformPoint is usually a function\n * provided by Framer to allow measured points to be corrected for device scaling. This is used\n * when measuring DOM elements and DOM event points.\n */ function transformBoxPoints(point, transformPoint) {\n    if (!transformPoint) return point;\n    const topLeft = transformPoint({\n        x: point.left,\n        y: point.top\n    });\n    const bottomRight = transformPoint({\n        x: point.right,\n        y: point.bottom\n    });\n    return {\n        top: topLeft.y,\n        left: topLeft.x,\n        bottom: bottomRight.y,\n        right: bottomRight.x\n    };\n}\nfunction isIdentityScale(scale) {\n    return scale === undefined || scale === 1;\n}\nfunction hasScale(param) {\n    let { scale, scaleX, scaleY } = param;\n    return !isIdentityScale(scale) || !isIdentityScale(scaleX) || !isIdentityScale(scaleY);\n}\nfunction hasTransform(values) {\n    return hasScale(values) || has2DTranslate(values) || values.z || values.rotate || values.rotateX || values.rotateY || values.skewX || values.skewY;\n}\nfunction has2DTranslate(values) {\n    return is2DTranslate(values.x) || is2DTranslate(values.y);\n}\nfunction is2DTranslate(value) {\n    return value && value !== \"0%\";\n}\n/**\n * Scales a point based on a factor and an originPoint\n */ function scalePoint(point, scale, originPoint) {\n    const distanceFromOrigin = point - originPoint;\n    const scaled = scale * distanceFromOrigin;\n    return originPoint + scaled;\n}\n/**\n * Applies a translate/scale delta to a point\n */ function applyPointDelta(point, translate, scale, originPoint, boxScale) {\n    if (boxScale !== undefined) {\n        point = scalePoint(point, boxScale, originPoint);\n    }\n    return scalePoint(point, scale, originPoint) + translate;\n}\n/**\n * Applies a translate/scale delta to an axis\n */ function applyAxisDelta(axis) {\n    let translate = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, scale = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1, originPoint = arguments.length > 3 ? arguments[3] : void 0, boxScale = arguments.length > 4 ? arguments[4] : void 0;\n    axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Applies a translate/scale delta to a box\n */ function applyBoxDelta(box, param) {\n    let { x, y } = param;\n    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);\n    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);\n}\nconst TREE_SCALE_SNAP_MIN = 0.999999999999;\nconst TREE_SCALE_SNAP_MAX = 1.0000000000001;\n/**\n * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms\n * in a tree upon our box before then calculating how to project it into our desired viewport-relative box\n *\n * This is the final nested loop within updateLayoutDelta for future refactoring\n */ function applyTreeDeltas(box, treeScale, treePath) {\n    let isSharedTransition = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;\n    const treeLength = treePath.length;\n    if (!treeLength) return;\n    // Reset the treeScale\n    treeScale.x = treeScale.y = 1;\n    let node;\n    let delta;\n    for(let i = 0; i < treeLength; i++){\n        node = treePath[i];\n        delta = node.projectionDelta;\n        /**\n         * TODO: Prefer to remove this, but currently we have motion components with\n         * display: contents in Framer.\n         */ const { visualElement } = node.options;\n        if (visualElement && visualElement.props.style && visualElement.props.style.display === \"contents\") {\n            continue;\n        }\n        if (isSharedTransition && node.options.layoutScroll && node.scroll && node !== node.root) {\n            transformBox(box, {\n                x: -node.scroll.offset.x,\n                y: -node.scroll.offset.y\n            });\n        }\n        if (delta) {\n            // Incoporate each ancestor's scale into a culmulative treeScale for this component\n            treeScale.x *= delta.x.scale;\n            treeScale.y *= delta.y.scale;\n            // Apply each ancestor's calculated delta into this component's recorded layout box\n            applyBoxDelta(box, delta);\n        }\n        if (isSharedTransition && hasTransform(node.latestValues)) {\n            transformBox(box, node.latestValues);\n        }\n    }\n    /**\n     * Snap tree scale back to 1 if it's within a non-perceivable threshold.\n     * This will help reduce useless scales getting rendered.\n     */ if (treeScale.x < TREE_SCALE_SNAP_MAX && treeScale.x > TREE_SCALE_SNAP_MIN) {\n        treeScale.x = 1.0;\n    }\n    if (treeScale.y < TREE_SCALE_SNAP_MAX && treeScale.y > TREE_SCALE_SNAP_MIN) {\n        treeScale.y = 1.0;\n    }\n}\nfunction translateAxis(axis, distance) {\n    axis.min = axis.min + distance;\n    axis.max = axis.max + distance;\n}\n/**\n * Apply a transform to an axis from the latest resolved motion values.\n * This function basically acts as a bridge between a flat motion value map\n * and applyAxisDelta\n */ function transformAxis(axis, axisTranslate, axisScale, boxScale) {\n    let axisOrigin = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0.5;\n    const originPoint = mixNumber$1(axis.min, axis.max, axisOrigin);\n    // Apply the axis delta to the final axis\n    applyAxisDelta(axis, axisTranslate, axisScale, originPoint, boxScale);\n}\n/**\n * Apply a transform to a box from the latest resolved motion values.\n */ function transformBox(box, transform) {\n    transformAxis(box.x, transform.x, transform.scaleX, transform.scale, transform.originX);\n    transformAxis(box.y, transform.y, transform.scaleY, transform.scale, transform.originY);\n}\nfunction measureViewportBox(instance, transformPoint) {\n    return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint));\n}\nfunction measurePageBox(element, rootProjectionNode, transformPagePoint) {\n    const viewportBox = measureViewportBox(element, transformPagePoint);\n    const { scroll } = rootProjectionNode;\n    if (scroll) {\n        translateAxis(viewportBox.x, scroll.offset.x);\n        translateAxis(viewportBox.y, scroll.offset.y);\n    }\n    return viewportBox;\n}\n// Fixes https://github.com/motiondivision/motion/issues/2270\nconst getContextWindow = (param)=>{\n    let { current } = param;\n    return current ? current.ownerDocument.defaultView : null;\n};\nconst elementDragControls = new WeakMap();\n/**\n *\n */ // let latestPointerEvent: PointerEvent\nclass VisualElementDragControls {\n    start(originEvent) {\n        let { snapToCursor = false } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        /**\n         * Don't start dragging if this component is exiting\n         */ const { presenceContext } = this.visualElement;\n        if (presenceContext && presenceContext.isPresent === false) return;\n        const onSessionStart = (event)=>{\n            const { dragSnapToOrigin } = this.getProps();\n            // Stop or pause any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            dragSnapToOrigin ? this.pauseAnimation() : this.stopAnimation();\n            if (snapToCursor) {\n                this.snapToCursor(extractEventInfo(event).point);\n            }\n        };\n        const onStart = (event, info)=>{\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            const { drag, dragPropagation, onDragStart } = this.getProps();\n            if (drag && !dragPropagation) {\n                if (this.openDragLock) this.openDragLock();\n                this.openDragLock = motionDom.setDragLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!this.openDragLock) return;\n            }\n            this.isDragging = true;\n            this.currentDirection = null;\n            this.resolveConstraints();\n            if (this.visualElement.projection) {\n                this.visualElement.projection.isAnimationBlocked = true;\n                this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */ eachAxis((axis)=>{\n                let current = this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */ if (percent.test(current)) {\n                    const { projection } = this.visualElement;\n                    if (projection && projection.layout) {\n                        const measuredAxis = projection.layout.layoutBox[axis];\n                        if (measuredAxis) {\n                            const length = calcLength(measuredAxis);\n                            current = length * (parseFloat(current) / 100);\n                        }\n                    }\n                }\n                this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            if (onDragStart) {\n                frame.postRender(()=>onDragStart(event, info));\n            }\n            addValueToWillChange(this.visualElement, \"transform\");\n            const { animationState } = this.visualElement;\n            animationState && animationState.setActive(\"whileDrag\", true);\n        };\n        const onMove = (event, info)=>{\n            // latestPointerEvent = event\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag } = this.getProps();\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !this.openDragLock) return;\n            const { offset } = info;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && this.currentDirection === null) {\n                this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (this.currentDirection !== null) {\n                    onDirectionLock && onDirectionLock(this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            this.updateAxis(\"x\", info.point, offset);\n            this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */ this.visualElement.render();\n            /**\n             * This must fire after the render call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */ onDrag && onDrag(event, info);\n        };\n        const onSessionEnd = (event, info)=>this.stop(event, info);\n        const resumeAnimation = ()=>eachAxis((axis)=>{\n                var _a;\n                return this.getAnimationState(axis) === \"paused\" && ((_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.play());\n            });\n        const { dragSnapToOrigin } = this.getProps();\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart,\n            onStart,\n            onMove,\n            onSessionEnd,\n            resumeAnimation\n        }, {\n            transformPagePoint: this.visualElement.getTransformPagePoint(),\n            dragSnapToOrigin,\n            contextWindow: getContextWindow(this.visualElement)\n        });\n    }\n    stop(event, info) {\n        const isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging) return;\n        const { velocity } = info;\n        this.startAnimation(velocity);\n        const { onDragEnd } = this.getProps();\n        if (onDragEnd) {\n            frame.postRender(()=>onDragEnd(event, info));\n        }\n    }\n    cancel() {\n        this.isDragging = false;\n        const { projection, animationState } = this.visualElement;\n        if (projection) {\n            projection.isAnimationBlocked = false;\n        }\n        this.panSession && this.panSession.end();\n        this.panSession = undefined;\n        const { dragPropagation } = this.getProps();\n        if (!dragPropagation && this.openDragLock) {\n            this.openDragLock();\n            this.openDragLock = null;\n        }\n        animationState && animationState.setActive(\"whileDrag\", false);\n    }\n    updateAxis(axis, _point, offset) {\n        const { drag } = this.getProps();\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection)) return;\n        const axisValue = this.getAxisMotionValue(axis);\n        let next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    }\n    resolveConstraints() {\n        var _a;\n        const { dragConstraints, dragElastic } = this.getProps();\n        const layout = this.visualElement.projection && !this.visualElement.projection.layout ? this.visualElement.projection.measure(false) : (_a = this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout;\n        const prevConstraints = this.constraints;\n        if (dragConstraints && isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        } else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n            } else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */ if (prevConstraints !== this.constraints && layout && this.constraints && !this.hasMutatedConstraints) {\n            eachAxis((axis)=>{\n                if (this.constraints !== false && this.getAxisMotionValue(axis)) {\n                    this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n                }\n            });\n        }\n    }\n    resolveRefConstraints() {\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\n        if (!constraints || !isRefObject(constraints)) return false;\n        const constraintsElement = constraints.current;\n        motionUtils.invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        const { projection } = this.visualElement;\n        // TODO\n        if (!projection || !projection.layout) return false;\n        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */ if (onMeasureDragConstraints) {\n            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    }\n    startAnimation(velocity) {\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd } = this.getProps();\n        const constraints = this.constraints || {};\n        const momentumAnimations = eachAxis((axis)=>{\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\n                return;\n            }\n            let transition = constraints && constraints[axis] || {};\n            if (dragSnapToOrigin) transition = {\n                min: 0,\n                max: 0\n            };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */ const bounceStiffness = dragElastic ? 200 : 1000000;\n            const bounceDamping = dragElastic ? 40 : 10000000;\n            const inertia = {\n                type: \"inertia\",\n                velocity: dragMomentum ? velocity[axis] : 0,\n                bounceStiffness,\n                bounceDamping,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10,\n                ...dragTransition,\n                ...transition\n            };\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n    startAxisValueAnimation(axis, transition) {\n        const axisValue = this.getAxisMotionValue(axis);\n        addValueToWillChange(this.visualElement, axis);\n        return axisValue.start(animateMotionValue(axis, axisValue, 0, transition, this.visualElement, false));\n    }\n    stopAnimation() {\n        eachAxis((axis)=>this.getAxisMotionValue(axis).stop());\n    }\n    pauseAnimation() {\n        eachAxis((axis)=>{\n            var _a;\n            return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.pause();\n        });\n    }\n    getAnimationState(axis) {\n        var _a;\n        return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.state;\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */ getAxisMotionValue(axis) {\n        const dragKey = \"_drag\".concat(axis.toUpperCase());\n        const props = this.visualElement.getProps();\n        const externalMotionValue = props[dragKey];\n        return externalMotionValue ? externalMotionValue : this.visualElement.getValue(axis, (props.initial ? props.initial[axis] : undefined) || 0);\n    }\n    snapToCursor(point) {\n        eachAxis((axis)=>{\n            const { drag } = this.getProps();\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, this.currentDirection)) return;\n            const { projection } = this.visualElement;\n            const axisValue = this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                const { min, max } = projection.layout.layoutBox[axis];\n                axisValue.set(point[axis] - mixNumber$1(min, max, 0.5));\n            }\n        });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */ scalePositionWithinConstraints() {\n        if (!this.visualElement.current) return;\n        const { drag, dragConstraints } = this.getProps();\n        const { projection } = this.visualElement;\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints) return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */ this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */ const boxProgress = {\n            x: 0,\n            y: 0\n        };\n        eachAxis((axis)=>{\n            const axisValue = this.getAxisMotionValue(axis);\n            if (axisValue && this.constraints !== false) {\n                const latest = axisValue.get();\n                boxProgress[axis] = calcOrigin$1({\n                    min: latest,\n                    max: latest\n                }, this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */ const { transformTemplate } = this.visualElement.getProps();\n        this.visualElement.current.style.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n        projection.root && projection.root.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */ eachAxis((axis)=>{\n            if (!shouldDrag(axis, drag, null)) return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */ const axisValue = this.getAxisMotionValue(axis);\n            const { min, max } = this.constraints[axis];\n            axisValue.set(mixNumber$1(min, max, boxProgress[axis]));\n        });\n    }\n    addListeners() {\n        if (!this.visualElement.current) return;\n        elementDragControls.set(this.visualElement, this);\n        const element = this.visualElement.current;\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */ const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event)=>{\n            const { drag, dragListener = true } = this.getProps();\n            drag && dragListener && this.start(event);\n        });\n        const measureDragConstraints = ()=>{\n            const { dragConstraints } = this.getProps();\n            if (isRefObject(dragConstraints) && dragConstraints.current) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        };\n        const { projection } = this.visualElement;\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            projection.root && projection.root.updateScroll();\n            projection.updateLayout();\n        }\n        frame.read(measureDragConstraints);\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */ const stopResizeListener = addDomEvent(window, \"resize\", ()=>this.scalePositionWithinConstraints());\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */ const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", (param)=>{\n            let { delta, hasLayoutChanged } = param;\n            if (this.isDragging && hasLayoutChanged) {\n                eachAxis((axis)=>{\n                    const motionValue = this.getAxisMotionValue(axis);\n                    if (!motionValue) return;\n                    this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                this.visualElement.render();\n            }\n        });\n        return ()=>{\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n            stopLayoutUpdateListener && stopLayoutUpdateListener();\n        };\n    }\n    getProps() {\n        const props = this.visualElement.getProps();\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true } = props;\n        return {\n            ...props,\n            drag,\n            dragDirectionLock,\n            dragPropagation,\n            dragConstraints,\n            dragElastic,\n            dragMomentum\n        };\n    }\n    constructor(visualElement){\n        this.openDragLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = {\n            x: 0,\n            y: 0\n        };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */ this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */ this.elastic = createBox();\n        this.visualElement = visualElement;\n    }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n    return (drag === true || drag === direction) && (currentDirection === null || currentDirection === direction);\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */ function getCurrentDirection(offset) {\n    let lockThreshold = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 10;\n    let direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    } else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\nclass DragGesture extends Feature {\n    mount() {\n        // If we've been provided a DragControls for manual control over the drag gesture,\n        // subscribe this component to it on mount.\n        const { dragControls } = this.node.getProps();\n        if (dragControls) {\n            this.removeGroupControls = dragControls.subscribe(this.controls);\n        }\n        this.removeListeners = this.controls.addListeners() || motionUtils.noop;\n    }\n    unmount() {\n        this.removeGroupControls();\n        this.removeListeners();\n    }\n    constructor(node){\n        super(node);\n        this.removeGroupControls = motionUtils.noop;\n        this.removeListeners = motionUtils.noop;\n        this.controls = new VisualElementDragControls(node);\n    }\n}\nconst asyncHandler = (handler)=>(event, info)=>{\n        if (handler) {\n            frame.postRender(()=>handler(event, info));\n        }\n    };\nclass PanGesture extends Feature {\n    onPointerDown(pointerDownEvent) {\n        this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), {\n            transformPagePoint: this.node.getTransformPagePoint(),\n            contextWindow: getContextWindow(this.node)\n        });\n    }\n    createPanHandlers() {\n        const { onPanSessionStart, onPanStart, onPan, onPanEnd } = this.node.getProps();\n        return {\n            onSessionStart: asyncHandler(onPanSessionStart),\n            onStart: asyncHandler(onPanStart),\n            onMove: onPan,\n            onEnd: (event, info)=>{\n                delete this.session;\n                if (onPanEnd) {\n                    frame.postRender(()=>onPanEnd(event, info));\n                }\n            }\n        };\n    }\n    mount() {\n        this.removePointerDownListener = addPointerEvent(this.node.current, \"pointerdown\", (event)=>this.onPointerDown(event));\n    }\n    update() {\n        this.session && this.session.updateHandlers(this.createPanHandlers());\n    }\n    unmount() {\n        this.removePointerDownListener();\n        this.session && this.session.end();\n    }\n    constructor(){\n        super(...arguments);\n        this.removePointerDownListener = motionUtils.noop;\n    }\n}\nconst borders = [\n    \"TopLeft\",\n    \"TopRight\",\n    \"BottomLeft\",\n    \"BottomRight\"\n];\nconst numBorders = borders.length;\nconst asNumber = (value)=>typeof value === \"string\" ? parseFloat(value) : value;\nconst isPx = (value)=>typeof value === \"number\" || px.test(value);\nfunction mixValues(target, follow, lead, progress, shouldCrossfadeOpacity, isOnlyMember) {\n    if (shouldCrossfadeOpacity) {\n        target.opacity = mixNumber$1(0, // TODO Reinstate this if only child\n        lead.opacity !== undefined ? lead.opacity : 1, easeCrossfadeIn(progress));\n        target.opacityExit = mixNumber$1(follow.opacity !== undefined ? follow.opacity : 1, 0, easeCrossfadeOut(progress));\n    } else if (isOnlyMember) {\n        target.opacity = mixNumber$1(follow.opacity !== undefined ? follow.opacity : 1, lead.opacity !== undefined ? lead.opacity : 1, progress);\n    }\n    /**\n     * Mix border radius\n     */ for(let i = 0; i < numBorders; i++){\n        const borderLabel = \"border\".concat(borders[i], \"Radius\");\n        let followRadius = getRadius(follow, borderLabel);\n        let leadRadius = getRadius(lead, borderLabel);\n        if (followRadius === undefined && leadRadius === undefined) continue;\n        followRadius || (followRadius = 0);\n        leadRadius || (leadRadius = 0);\n        const canMix = followRadius === 0 || leadRadius === 0 || isPx(followRadius) === isPx(leadRadius);\n        if (canMix) {\n            target[borderLabel] = Math.max(mixNumber$1(asNumber(followRadius), asNumber(leadRadius), progress), 0);\n            if (percent.test(leadRadius) || percent.test(followRadius)) {\n                target[borderLabel] += \"%\";\n            }\n        } else {\n            target[borderLabel] = leadRadius;\n        }\n    }\n    /**\n     * Mix rotation\n     */ if (follow.rotate || lead.rotate) {\n        target.rotate = mixNumber$1(follow.rotate || 0, lead.rotate || 0, progress);\n    }\n}\nfunction getRadius(values, radiusName) {\n    return values[radiusName] !== undefined ? values[radiusName] : values.borderRadius;\n}\n// /**\n//  * We only want to mix the background color if there's a follow element\n//  * that we're not crossfading opacity between. For instance with switch\n//  * AnimateSharedLayout animations, this helps the illusion of a continuous\n//  * element being animated but also cuts down on the number of paints triggered\n//  * for elements where opacity is doing that work for us.\n//  */\n// if (\n//     !hasFollowElement &&\n//     latestLeadValues.backgroundColor &&\n//     latestFollowValues.backgroundColor\n// ) {\n//     /**\n//      * This isn't ideal performance-wise as mixColor is creating a new function every frame.\n//      * We could probably create a mixer that runs at the start of the animation but\n//      * the idea behind the crossfader is that it runs dynamically between two potentially\n//      * changing targets (ie opacity or borderRadius may be animating independently via variants)\n//      */\n//     leadState.backgroundColor = followState.backgroundColor = mixColor(\n//         latestFollowValues.backgroundColor as string,\n//         latestLeadValues.backgroundColor as string\n//     )(p)\n// }\nconst easeCrossfadeIn = /*@__PURE__*/ compress(0, 0.5, circOut);\nconst easeCrossfadeOut = /*@__PURE__*/ compress(0.5, 0.95, motionUtils.noop);\nfunction compress(min, max, easing) {\n    return (p)=>{\n        // Could replace ifs with clamp\n        if (p < min) return 0;\n        if (p > max) return 1;\n        return easing(progress(min, max, p));\n    };\n}\n/**\n * Reset an axis to the provided origin box.\n *\n * This is a mutative operation.\n */ function copyAxisInto(axis, originAxis) {\n    axis.min = originAxis.min;\n    axis.max = originAxis.max;\n}\n/**\n * Reset a box to the provided origin box.\n *\n * This is a mutative operation.\n */ function copyBoxInto(box, originBox) {\n    copyAxisInto(box.x, originBox.x);\n    copyAxisInto(box.y, originBox.y);\n}\n/**\n * Reset a delta to the provided origin box.\n *\n * This is a mutative operation.\n */ function copyAxisDeltaInto(delta, originDelta) {\n    delta.translate = originDelta.translate;\n    delta.scale = originDelta.scale;\n    delta.originPoint = originDelta.originPoint;\n    delta.origin = originDelta.origin;\n}\n/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */ function removePointDelta(point, translate, scale, originPoint, boxScale) {\n    point -= translate;\n    point = scalePoint(point, 1 / scale, originPoint);\n    if (boxScale !== undefined) {\n        point = scalePoint(point, 1 / boxScale, originPoint);\n    }\n    return point;\n}\n/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */ function removeAxisDelta(axis) {\n    let translate = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, scale = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1, origin = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0.5, boxScale = arguments.length > 4 ? arguments[4] : void 0, originAxis = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : axis, sourceAxis = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : axis;\n    if (percent.test(translate)) {\n        translate = parseFloat(translate);\n        const relativeProgress = mixNumber$1(sourceAxis.min, sourceAxis.max, translate / 100);\n        translate = relativeProgress - sourceAxis.min;\n    }\n    if (typeof translate !== \"number\") return;\n    let originPoint = mixNumber$1(originAxis.min, originAxis.max, origin);\n    if (axis === originAxis) originPoint -= translate;\n    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */ function removeAxisTransforms(axis, transforms, param, origin, sourceAxis) {\n    let [key, scaleKey, originKey] = param;\n    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */ const xKeys = [\n    \"x\",\n    \"scaleX\",\n    \"originX\"\n];\nconst yKeys = [\n    \"y\",\n    \"scaleY\",\n    \"originY\"\n];\n/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */ function removeBoxTransforms(box, transforms, originBox, sourceBox) {\n    removeAxisTransforms(box.x, transforms, xKeys, originBox ? originBox.x : undefined, sourceBox ? sourceBox.x : undefined);\n    removeAxisTransforms(box.y, transforms, yKeys, originBox ? originBox.y : undefined, sourceBox ? sourceBox.y : undefined);\n}\nfunction isAxisDeltaZero(delta) {\n    return delta.translate === 0 && delta.scale === 1;\n}\nfunction isDeltaZero(delta) {\n    return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);\n}\nfunction axisEquals(a, b) {\n    return a.min === b.min && a.max === b.max;\n}\nfunction boxEquals(a, b) {\n    return axisEquals(a.x, b.x) && axisEquals(a.y, b.y);\n}\nfunction axisEqualsRounded(a, b) {\n    return Math.round(a.min) === Math.round(b.min) && Math.round(a.max) === Math.round(b.max);\n}\nfunction boxEqualsRounded(a, b) {\n    return axisEqualsRounded(a.x, b.x) && axisEqualsRounded(a.y, b.y);\n}\nfunction aspectRatio(box) {\n    return calcLength(box.x) / calcLength(box.y);\n}\nfunction axisDeltaEquals(a, b) {\n    return a.translate === b.translate && a.scale === b.scale && a.originPoint === b.originPoint;\n}\nclass NodeStack {\n    add(node) {\n        addUniqueItem(this.members, node);\n        node.scheduleRender();\n    }\n    remove(node) {\n        removeItem(this.members, node);\n        if (node === this.prevLead) {\n            this.prevLead = undefined;\n        }\n        if (node === this.lead) {\n            const prevLead = this.members[this.members.length - 1];\n            if (prevLead) {\n                this.promote(prevLead);\n            }\n        }\n    }\n    relegate(node) {\n        const indexOfNode = this.members.findIndex((member)=>node === member);\n        if (indexOfNode === 0) return false;\n        /**\n         * Find the next projection node that is present\n         */ let prevLead;\n        for(let i = indexOfNode; i >= 0; i--){\n            const member = this.members[i];\n            if (member.isPresent !== false) {\n                prevLead = member;\n                break;\n            }\n        }\n        if (prevLead) {\n            this.promote(prevLead);\n            return true;\n        } else {\n            return false;\n        }\n    }\n    promote(node, preserveFollowOpacity) {\n        const prevLead = this.lead;\n        if (node === prevLead) return;\n        this.prevLead = prevLead;\n        this.lead = node;\n        node.show();\n        if (prevLead) {\n            prevLead.instance && prevLead.scheduleRender();\n            node.scheduleRender();\n            node.resumeFrom = prevLead;\n            if (preserveFollowOpacity) {\n                node.resumeFrom.preserveOpacity = true;\n            }\n            if (prevLead.snapshot) {\n                node.snapshot = prevLead.snapshot;\n                node.snapshot.latestValues = prevLead.animationValues || prevLead.latestValues;\n            }\n            if (node.root && node.root.isUpdating) {\n                node.isLayoutDirty = true;\n            }\n            const { crossfade } = node.options;\n            if (crossfade === false) {\n                prevLead.hide();\n            }\n        /**\n             * TODO:\n             *   - Test border radius when previous node was deleted\n             *   - boxShadow mixing\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n             * ---\n             *   - Crossfade opacity of root nodes\n             *   - layoutId changes after animation\n             *   - layoutId changes mid animation\n             */ }\n    }\n    exitAnimationComplete() {\n        this.members.forEach((node)=>{\n            const { options, resumingFrom } = node;\n            options.onExitComplete && options.onExitComplete();\n            if (resumingFrom) {\n                resumingFrom.options.onExitComplete && resumingFrom.options.onExitComplete();\n            }\n        });\n    }\n    scheduleRender() {\n        this.members.forEach((node)=>{\n            node.instance && node.scheduleRender(false);\n        });\n    }\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */ removeLeadSnapshot() {\n        if (this.lead && this.lead.snapshot) {\n            this.lead.snapshot = undefined;\n        }\n    }\n    constructor(){\n        this.members = [];\n    }\n}\nconst scaleCorrectors = {};\nfunction addScaleCorrector(correctors) {\n    Object.assign(scaleCorrectors, correctors);\n}\nfunction buildProjectionTransform(delta, treeScale, latestTransform) {\n    let transform = \"\";\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */ const xTranslate = delta.x.translate / treeScale.x;\n    const yTranslate = delta.y.translate / treeScale.y;\n    const zTranslate = (latestTransform === null || latestTransform === void 0 ? void 0 : latestTransform.z) || 0;\n    if (xTranslate || yTranslate || zTranslate) {\n        transform = \"translate3d(\".concat(xTranslate, \"px, \").concat(yTranslate, \"px, \").concat(zTranslate, \"px) \");\n    }\n    /**\n     * Apply scale correction for the tree transform.\n     * This will apply scale to the screen-orientated axes.\n     */ if (treeScale.x !== 1 || treeScale.y !== 1) {\n        transform += \"scale(\".concat(1 / treeScale.x, \", \").concat(1 / treeScale.y, \") \");\n    }\n    if (latestTransform) {\n        const { transformPerspective, rotate, rotateX, rotateY, skewX, skewY } = latestTransform;\n        if (transformPerspective) transform = \"perspective(\".concat(transformPerspective, \"px) \").concat(transform);\n        if (rotate) transform += \"rotate(\".concat(rotate, \"deg) \");\n        if (rotateX) transform += \"rotateX(\".concat(rotateX, \"deg) \");\n        if (rotateY) transform += \"rotateY(\".concat(rotateY, \"deg) \");\n        if (skewX) transform += \"skewX(\".concat(skewX, \"deg) \");\n        if (skewY) transform += \"skewY(\".concat(skewY, \"deg) \");\n    }\n    /**\n     * Apply scale to match the size of the element to the size we want it.\n     * This will apply scale to the element-orientated axes.\n     */ const elementScaleX = delta.x.scale * treeScale.x;\n    const elementScaleY = delta.y.scale * treeScale.y;\n    if (elementScaleX !== 1 || elementScaleY !== 1) {\n        transform += \"scale(\".concat(elementScaleX, \", \").concat(elementScaleY, \")\");\n    }\n    return transform || \"none\";\n}\nconst compareByDepth = (a, b)=>a.depth - b.depth;\nclass FlatTree {\n    add(child) {\n        addUniqueItem(this.children, child);\n        this.isDirty = true;\n    }\n    remove(child) {\n        removeItem(this.children, child);\n        this.isDirty = true;\n    }\n    forEach(callback) {\n        this.isDirty && this.children.sort(compareByDepth);\n        this.isDirty = false;\n        this.children.forEach(callback);\n    }\n    constructor(){\n        this.children = [];\n        this.isDirty = false;\n    }\n}\n/**\n * If the provided value is a MotionValue, this returns the actual value, otherwise just the value itself\n *\n * TODO: Remove and move to library\n */ function resolveMotionValue(value) {\n    const unwrappedValue = isMotionValue(value) ? value.get() : value;\n    return isCustomValue(unwrappedValue) ? unwrappedValue.toValue() : unwrappedValue;\n}\n/**\n * This should only ever be modified on the client otherwise it'll\n * persist through server requests. If we need instanced states we\n * could lazy-init via root.\n */ const globalProjectionState = {\n    /**\n     * Global flag as to whether the tree has animated since the last time\n     * we resized the window\n     */ hasAnimatedSinceResize: true,\n    /**\n     * We set this to true once, on the first update. Any nodes added to the tree beyond that\n     * update will be given a `data-projection-id` attribute.\n     */ hasEverUpdated: false\n};\n/**\n * Timeout defined in ms\n */ function delay(callback, timeout) {\n    const start = time.now();\n    const checkElapsed = (param)=>{\n        let { timestamp } = param;\n        const elapsed = timestamp - start;\n        if (elapsed >= timeout) {\n            cancelFrame(checkElapsed);\n            callback(elapsed - timeout);\n        }\n    };\n    frame.read(checkElapsed, true);\n    return ()=>cancelFrame(checkElapsed);\n}\n/**\n * Create a progress => progress easing function from a generator.\n */ function createGeneratorEasing(options) {\n    let scale = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 100, createGenerator = arguments.length > 2 ? arguments[2] : void 0;\n    const generator = createGenerator({\n        ...options,\n        keyframes: [\n            0,\n            scale\n        ]\n    });\n    const duration = Math.min(calcGeneratorDuration(generator), maxGeneratorDuration);\n    return {\n        type: \"keyframes\",\n        ease: (progress)=>generator.next(duration * progress).value / scale,\n        duration: millisecondsToSeconds(duration)\n    };\n}\nfunction isDOMKeyframes(keyframes) {\n    return typeof keyframes === \"object\" && !Array.isArray(keyframes);\n}\nfunction resolveSubjects(subject, keyframes, scope, selectorCache) {\n    if (typeof subject === \"string\" && isDOMKeyframes(keyframes)) {\n        return motionDom.resolveElements(subject, scope, selectorCache);\n    } else if (subject instanceof NodeList) {\n        return Array.from(subject);\n    } else if (Array.isArray(subject)) {\n        return subject;\n    } else {\n        return [\n            subject\n        ];\n    }\n}\n/**\n * Given a absolute or relative time definition and current/prev time state of the sequence,\n * calculate an absolute time for the next keyframes.\n */ function calcNextTime(current, next, prev, labels) {\n    var _a;\n    if (typeof next === \"number\") {\n        return next;\n    } else if (next.startsWith(\"-\") || next.startsWith(\"+\")) {\n        return Math.max(0, current + parseFloat(next));\n    } else if (next === \"<\") {\n        return prev;\n    } else {\n        return (_a = labels.get(next)) !== null && _a !== void 0 ? _a : current;\n    }\n}\nconst wrap = (min, max, v)=>{\n    const rangeSize = max - min;\n    return ((v - min) % rangeSize + rangeSize) % rangeSize + min;\n};\nfunction getEasingForSegment(easing, i) {\n    return isEasingArray(easing) ? easing[wrap(0, easing.length, i)] : easing;\n}\nfunction eraseKeyframes(sequence, startTime, endTime) {\n    for(let i = 0; i < sequence.length; i++){\n        const keyframe = sequence[i];\n        if (keyframe.at > startTime && keyframe.at < endTime) {\n            removeItem(sequence, keyframe);\n            // If we remove this item we have to push the pointer back one\n            i--;\n        }\n    }\n}\nfunction addKeyframes(sequence, keyframes, easing, offset, startTime, endTime) {\n    /**\n     * Erase every existing value between currentTime and targetTime,\n     * this will essentially splice this timeline into any currently\n     * defined ones.\n     */ eraseKeyframes(sequence, startTime, endTime);\n    for(let i = 0; i < keyframes.length; i++){\n        sequence.push({\n            value: keyframes[i],\n            at: mixNumber$1(startTime, endTime, offset[i]),\n            easing: getEasingForSegment(easing, i)\n        });\n    }\n}\nfunction compareByTime(a, b) {\n    if (a.at === b.at) {\n        if (a.value === null) return 1;\n        if (b.value === null) return -1;\n        return 0;\n    } else {\n        return a.at - b.at;\n    }\n}\n/**\n * Take an array of times that represent repeated keyframes. For instance\n * if we have original times of [0, 0.5, 1] then our repeated times will\n * be [0, 0.5, 1, 1, 1.5, 2]. Loop over the times and scale them back\n * down to a 0-1 scale.\n */ function normalizeTimes(times, repeat) {\n    for(let i = 0; i < times.length; i++){\n        times[i] = times[i] / (repeat + 1);\n    }\n}\nfunction calculateRepeatDuration(duration, repeat, _repeatDelay) {\n    return duration * (repeat + 1);\n}\nconst defaultSegmentEasing = \"easeInOut\";\nconst MAX_REPEAT = 20;\nfunction createAnimationsFromSequence(sequence) {\n    let { defaultTransition = {}, ...sequenceTransition } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, scope = arguments.length > 2 ? arguments[2] : void 0, generators = arguments.length > 3 ? arguments[3] : void 0;\n    const defaultDuration = defaultTransition.duration || 0.3;\n    const animationDefinitions = new Map();\n    const sequences = new Map();\n    const elementCache = {};\n    const timeLabels = new Map();\n    let prevTime = 0;\n    let currentTime = 0;\n    let totalDuration = 0;\n    /**\n     * Build the timeline by mapping over the sequence array and converting\n     * the definitions into keyframes and offsets with absolute time values.\n     * These will later get converted into relative offsets in a second pass.\n     */ for(let i = 0; i < sequence.length; i++){\n        const segment = sequence[i];\n        /**\n         * If this is a timeline label, mark it and skip the rest of this iteration.\n         */ if (typeof segment === \"string\") {\n            timeLabels.set(segment, currentTime);\n            continue;\n        } else if (!Array.isArray(segment)) {\n            timeLabels.set(segment.name, calcNextTime(currentTime, segment.at, prevTime, timeLabels));\n            continue;\n        }\n        let [subject, keyframes, transition = {}] = segment;\n        /**\n         * If a relative or absolute time value has been specified we need to resolve\n         * it in relation to the currentTime.\n         */ if (transition.at !== undefined) {\n            currentTime = calcNextTime(currentTime, transition.at, prevTime, timeLabels);\n        }\n        /**\n         * Keep track of the maximum duration in this definition. This will be\n         * applied to currentTime once the definition has been parsed.\n         */ let maxDuration = 0;\n        const resolveValueSequence = function(valueKeyframes, valueTransition, valueSequence) {\n            let elementIndex = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0, numSubjects = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;\n            const valueKeyframesAsList = keyframesAsList(valueKeyframes);\n            const { delay = 0, times = defaultOffset$1(valueKeyframesAsList), type = \"keyframes\", repeat, repeatType, repeatDelay = 0, ...remainingTransition } = valueTransition;\n            let { ease = defaultTransition.ease || \"easeOut\", duration } = valueTransition;\n            /**\n             * Resolve stagger() if defined.\n             */ const calculatedDelay = typeof delay === \"function\" ? delay(elementIndex, numSubjects) : delay;\n            /**\n             * If this animation should and can use a spring, generate a spring easing function.\n             */ const numKeyframes = valueKeyframesAsList.length;\n            const createGenerator = isGenerator(type) ? type : generators === null || generators === void 0 ? void 0 : generators[type];\n            if (numKeyframes <= 2 && createGenerator) {\n                /**\n                 * As we're creating an easing function from a spring,\n                 * ideally we want to generate it using the real distance\n                 * between the two keyframes. However this isn't always\n                 * possible - in these situations we use 0-100.\n                 */ let absoluteDelta = 100;\n                if (numKeyframes === 2 && isNumberKeyframesArray(valueKeyframesAsList)) {\n                    const delta = valueKeyframesAsList[1] - valueKeyframesAsList[0];\n                    absoluteDelta = Math.abs(delta);\n                }\n                const springTransition = {\n                    ...remainingTransition\n                };\n                if (duration !== undefined) {\n                    springTransition.duration = secondsToMilliseconds(duration);\n                }\n                const springEasing = createGeneratorEasing(springTransition, absoluteDelta, createGenerator);\n                ease = springEasing.ease;\n                duration = springEasing.duration;\n            }\n            duration !== null && duration !== void 0 ? duration : duration = defaultDuration;\n            const startTime = currentTime + calculatedDelay;\n            /**\n             * If there's only one time offset of 0, fill in a second with length 1\n             */ if (times.length === 1 && times[0] === 0) {\n                times[1] = 1;\n            }\n            /**\n             * Fill out if offset if fewer offsets than keyframes\n             */ const remainder = times.length - valueKeyframesAsList.length;\n            remainder > 0 && fillOffset(times, remainder);\n            /**\n             * If only one value has been set, ie [1], push a null to the start of\n             * the keyframe array. This will let us mark a keyframe at this point\n             * that will later be hydrated with the previous value.\n             */ valueKeyframesAsList.length === 1 && valueKeyframesAsList.unshift(null);\n            /**\n             * Handle repeat options\n             */ if (repeat) {\n                motionUtils.invariant(repeat < MAX_REPEAT, \"Repeat count too high, must be less than 20\");\n                duration = calculateRepeatDuration(duration, repeat);\n                const originalKeyframes = [\n                    ...valueKeyframesAsList\n                ];\n                const originalTimes = [\n                    ...times\n                ];\n                ease = Array.isArray(ease) ? [\n                    ...ease\n                ] : [\n                    ease\n                ];\n                const originalEase = [\n                    ...ease\n                ];\n                for(let repeatIndex = 0; repeatIndex < repeat; repeatIndex++){\n                    valueKeyframesAsList.push(...originalKeyframes);\n                    for(let keyframeIndex = 0; keyframeIndex < originalKeyframes.length; keyframeIndex++){\n                        times.push(originalTimes[keyframeIndex] + (repeatIndex + 1));\n                        ease.push(keyframeIndex === 0 ? \"linear\" : getEasingForSegment(originalEase, keyframeIndex - 1));\n                    }\n                }\n                normalizeTimes(times, repeat);\n            }\n            const targetTime = startTime + duration;\n            /**\n             * Add keyframes, mapping offsets to absolute time.\n             */ addKeyframes(valueSequence, valueKeyframesAsList, ease, times, startTime, targetTime);\n            maxDuration = Math.max(calculatedDelay + duration, maxDuration);\n            totalDuration = Math.max(targetTime, totalDuration);\n        };\n        if (isMotionValue(subject)) {\n            const subjectSequence = getSubjectSequence(subject, sequences);\n            resolveValueSequence(keyframes, transition, getValueSequence(\"default\", subjectSequence));\n        } else {\n            const subjects = resolveSubjects(subject, keyframes, scope, elementCache);\n            const numSubjects = subjects.length;\n            /**\n             * For every element in this segment, process the defined values.\n             */ for(let subjectIndex = 0; subjectIndex < numSubjects; subjectIndex++){\n                /**\n                 * Cast necessary, but we know these are of this type\n                 */ keyframes = keyframes;\n                transition = transition;\n                const thisSubject = subjects[subjectIndex];\n                const subjectSequence = getSubjectSequence(thisSubject, sequences);\n                for(const key in keyframes){\n                    resolveValueSequence(keyframes[key], getValueTransition(transition, key), getValueSequence(key, subjectSequence), subjectIndex, numSubjects);\n                }\n            }\n        }\n        prevTime = currentTime;\n        currentTime += maxDuration;\n    }\n    /**\n     * For every element and value combination create a new animation.\n     */ sequences.forEach((valueSequences, element)=>{\n        for(const key in valueSequences){\n            const valueSequence = valueSequences[key];\n            /**\n             * Arrange all the keyframes in ascending time order.\n             */ valueSequence.sort(compareByTime);\n            const keyframes = [];\n            const valueOffset = [];\n            const valueEasing = [];\n            /**\n             * For each keyframe, translate absolute times into\n             * relative offsets based on the total duration of the timeline.\n             */ for(let i = 0; i < valueSequence.length; i++){\n                const { at, value, easing } = valueSequence[i];\n                keyframes.push(value);\n                valueOffset.push(progress(0, totalDuration, at));\n                valueEasing.push(easing || \"easeOut\");\n            }\n            /**\n             * If the first keyframe doesn't land on offset: 0\n             * provide one by duplicating the initial keyframe. This ensures\n             * it snaps to the first keyframe when the animation starts.\n             */ if (valueOffset[0] !== 0) {\n                valueOffset.unshift(0);\n                keyframes.unshift(keyframes[0]);\n                valueEasing.unshift(defaultSegmentEasing);\n            }\n            /**\n             * If the last keyframe doesn't land on offset: 1\n             * provide one with a null wildcard value. This will ensure it\n             * stays static until the end of the animation.\n             */ if (valueOffset[valueOffset.length - 1] !== 1) {\n                valueOffset.push(1);\n                keyframes.push(null);\n            }\n            if (!animationDefinitions.has(element)) {\n                animationDefinitions.set(element, {\n                    keyframes: {},\n                    transition: {}\n                });\n            }\n            const definition = animationDefinitions.get(element);\n            definition.keyframes[key] = keyframes;\n            definition.transition[key] = {\n                ...defaultTransition,\n                duration: totalDuration,\n                ease: valueEasing,\n                times: valueOffset,\n                ...sequenceTransition\n            };\n        }\n    });\n    return animationDefinitions;\n}\nfunction getSubjectSequence(subject, sequences) {\n    !sequences.has(subject) && sequences.set(subject, {});\n    return sequences.get(subject);\n}\nfunction getValueSequence(name, sequences) {\n    if (!sequences[name]) sequences[name] = [];\n    return sequences[name];\n}\nfunction keyframesAsList(keyframes) {\n    return Array.isArray(keyframes) ? keyframes : [\n        keyframes\n    ];\n}\nfunction getValueTransition(transition, key) {\n    return transition && transition[key] ? {\n        ...transition,\n        ...transition[key]\n    } : {\n        ...transition\n    };\n}\nconst isNumber = (keyframe)=>typeof keyframe === \"number\";\nconst isNumberKeyframesArray = (keyframes)=>keyframes.every(isNumber);\nconst visualElementStore = new WeakMap();\nfunction isSVGElement(element) {\n    return element instanceof SVGElement && element.tagName !== \"svg\";\n}\nfunction isForcedMotionValue(key, param) {\n    let { layout, layoutId } = param;\n    return transformProps.has(key) || key.startsWith(\"origin\") || (layout || layoutId !== undefined) && (!!scaleCorrectors[key] || key === \"opacity\");\n}\nfunction scrapeMotionValuesFromProps$1(props, prevProps, visualElement) {\n    var _a;\n    const { style } = props;\n    const newValues = {};\n    for(const key in style){\n        if (isMotionValue(style[key]) || prevProps.style && isMotionValue(prevProps.style[key]) || isForcedMotionValue(key, props) || ((_a = visualElement === null || visualElement === void 0 ? void 0 : visualElement.getValue(key)) === null || _a === void 0 ? void 0 : _a.liveStyle) !== undefined) {\n            newValues[key] = style[key];\n        }\n    }\n    return newValues;\n}\nfunction scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n    const newValues = scrapeMotionValuesFromProps$1(props, prevProps, visualElement);\n    for(const key in props){\n        if (isMotionValue(props[key]) || isMotionValue(prevProps[key])) {\n            const targetKey = transformPropOrder.indexOf(key) !== -1 ? \"attr\" + key.charAt(0).toUpperCase() + key.substring(1) : key;\n            newValues[targetKey] = props[key];\n        }\n    }\n    return newValues;\n}\nconst isBrowser = \"object\" !== \"undefined\";\n// Does this device prefer reduced motion? Returns `null` server-side.\nconst prefersReducedMotion = {\n    current: null\n};\nconst hasReducedMotionListener = {\n    current: false\n};\nfunction initPrefersReducedMotion() {\n    hasReducedMotionListener.current = true;\n    if (!isBrowser) return;\n    if (window.matchMedia) {\n        const motionMediaQuery = window.matchMedia(\"(prefers-reduced-motion)\");\n        const setReducedMotionPreferences = ()=>prefersReducedMotion.current = motionMediaQuery.matches;\n        motionMediaQuery.addListener(setReducedMotionPreferences);\n        setReducedMotionPreferences();\n    } else {\n        prefersReducedMotion.current = false;\n    }\n}\nfunction isControllingVariants(props) {\n    return isAnimationControls(props.animate) || variantProps.some((name)=>isVariantLabel(props[name]));\n}\nfunction isVariantNode(props) {\n    return Boolean(isControllingVariants(props) || props.variants);\n}\nfunction updateMotionValuesFromProps(element, next, prev) {\n    for(const key in next){\n        const nextValue = next[key];\n        const prevValue = prev[key];\n        if (isMotionValue(nextValue)) {\n            /**\n             * If this is a motion value found in props or style, we want to add it\n             * to our visual element's motion value map.\n             */ element.addValue(key, nextValue);\n            /**\n             * Check the version of the incoming motion value with this version\n             * and warn against mismatches.\n             */ if (true) {\n                warnOnce(nextValue.version === \"11.15.0\", \"Attempting to mix Motion versions \".concat(nextValue.version, \" with 11.15.0 may not work as expected.\"));\n            }\n        } else if (isMotionValue(prevValue)) {\n            /**\n             * If we're swapping from a motion value to a static value,\n             * create a new motion value from that\n             */ element.addValue(key, motionValue(nextValue, {\n                owner: element\n            }));\n        } else if (prevValue !== nextValue) {\n            /**\n             * If this is a flat value that has changed, update the motion value\n             * or create one if it doesn't exist. We only want to do this if we're\n             * not handling the value with our animation state.\n             */ if (element.hasValue(key)) {\n                const existingValue = element.getValue(key);\n                if (existingValue.liveStyle === true) {\n                    existingValue.jump(nextValue);\n                } else if (!existingValue.hasAnimated) {\n                    existingValue.set(nextValue);\n                }\n            } else {\n                const latestValue = element.getStaticValue(key);\n                element.addValue(key, motionValue(latestValue !== undefined ? latestValue : nextValue, {\n                    owner: element\n                }));\n            }\n        }\n    }\n    // Handle removed values\n    for(const key in prev){\n        if (next[key] === undefined) element.removeValue(key);\n    }\n    return next;\n}\nconst featureProps = {\n    animation: [\n        \"animate\",\n        \"variants\",\n        \"whileHover\",\n        \"whileTap\",\n        \"exit\",\n        \"whileInView\",\n        \"whileFocus\",\n        \"whileDrag\"\n    ],\n    exit: [\n        \"exit\"\n    ],\n    drag: [\n        \"drag\",\n        \"dragControls\"\n    ],\n    focus: [\n        \"whileFocus\"\n    ],\n    hover: [\n        \"whileHover\",\n        \"onHoverStart\",\n        \"onHoverEnd\"\n    ],\n    tap: [\n        \"whileTap\",\n        \"onTap\",\n        \"onTapStart\",\n        \"onTapCancel\"\n    ],\n    pan: [\n        \"onPan\",\n        \"onPanStart\",\n        \"onPanSessionStart\",\n        \"onPanEnd\"\n    ],\n    inView: [\n        \"whileInView\",\n        \"onViewportEnter\",\n        \"onViewportLeave\"\n    ],\n    layout: [\n        \"layout\",\n        \"layoutId\"\n    ]\n};\nconst featureDefinitions = {};\nfor(const key in featureProps){\n    featureDefinitions[key] = {\n        isEnabled: (props)=>featureProps[key].some((name)=>!!props[name])\n    };\n}\n/**\n * A list of all ValueTypes\n */ const valueTypes = [\n    ...dimensionValueTypes,\n    color,\n    complex\n];\n/**\n * Tests a value against the list of ValueTypes\n */ const findValueType = (v)=>valueTypes.find(testValueType(v));\nconst propEventHandlers = [\n    \"AnimationStart\",\n    \"AnimationComplete\",\n    \"Update\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutMeasure\",\n    \"LayoutAnimationStart\",\n    \"LayoutAnimationComplete\"\n];\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */ class VisualElement {\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */ scrapeMotionValuesFromProps(_props, _prevProps, _visualElement) {\n        return {};\n    }\n    mount(instance) {\n        this.current = instance;\n        visualElementStore.set(instance, this);\n        if (this.projection && !this.projection.instance) {\n            this.projection.mount(instance);\n        }\n        if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n            this.removeFromVariantTree = this.parent.addVariantChild(this);\n        }\n        this.values.forEach((value, key)=>this.bindToMotionValue(key, value));\n        if (!hasReducedMotionListener.current) {\n            initPrefersReducedMotion();\n        }\n        this.shouldReduceMotion = this.reducedMotionConfig === \"never\" ? false : this.reducedMotionConfig === \"always\" ? true : prefersReducedMotion.current;\n        if (true) {\n            warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n        }\n        if (this.parent) this.parent.children.add(this);\n        this.update(this.props, this.presenceContext);\n    }\n    unmount() {\n        visualElementStore.delete(this.current);\n        this.projection && this.projection.unmount();\n        cancelFrame(this.notifyUpdate);\n        cancelFrame(this.render);\n        this.valueSubscriptions.forEach((remove)=>remove());\n        this.valueSubscriptions.clear();\n        this.removeFromVariantTree && this.removeFromVariantTree();\n        this.parent && this.parent.children.delete(this);\n        for(const key in this.events){\n            this.events[key].clear();\n        }\n        for(const key in this.features){\n            const feature = this.features[key];\n            if (feature) {\n                feature.unmount();\n                feature.isMounted = false;\n            }\n        }\n        this.current = null;\n    }\n    bindToMotionValue(key, value) {\n        if (this.valueSubscriptions.has(key)) {\n            this.valueSubscriptions.get(key)();\n        }\n        const valueIsTransform = transformProps.has(key);\n        const removeOnChange = value.on(\"change\", (latestValue)=>{\n            this.latestValues[key] = latestValue;\n            this.props.onUpdate && frame.preRender(this.notifyUpdate);\n            if (valueIsTransform && this.projection) {\n                this.projection.isTransformDirty = true;\n            }\n        });\n        const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n        let removeSyncCheck;\n        if (window.MotionCheckAppearSync) {\n            removeSyncCheck = window.MotionCheckAppearSync(this, key, value);\n        }\n        this.valueSubscriptions.set(key, ()=>{\n            removeOnChange();\n            removeOnRenderRequest();\n            if (removeSyncCheck) removeSyncCheck();\n            if (value.owner) value.stop();\n        });\n    }\n    sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */ if (!this.current || !this.sortInstanceNodePosition || this.type !== other.type) {\n            return 0;\n        }\n        return this.sortInstanceNodePosition(this.current, other.current);\n    }\n    updateFeatures() {\n        let key = \"animation\";\n        for(key in featureDefinitions){\n            const featureDefinition = featureDefinitions[key];\n            if (!featureDefinition) continue;\n            const { isEnabled, Feature: FeatureConstructor } = featureDefinition;\n            /**\n             * If this feature is enabled but not active, make a new instance.\n             */ if (!this.features[key] && FeatureConstructor && isEnabled(this.props)) {\n                this.features[key] = new FeatureConstructor(this);\n            }\n            /**\n             * If we have a feature, mount or update it.\n             */ if (this.features[key]) {\n                const feature = this.features[key];\n                if (feature.isMounted) {\n                    feature.update();\n                } else {\n                    feature.mount();\n                    feature.isMounted = true;\n                }\n            }\n        }\n    }\n    triggerBuild() {\n        this.build(this.renderState, this.latestValues, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */ measureViewportBox() {\n        return this.current ? this.measureInstanceViewportBox(this.current, this.props) : createBox();\n    }\n    getStaticValue(key) {\n        return this.latestValues[key];\n    }\n    setStaticValue(key, value) {\n        this.latestValues[key] = value;\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */ update(props, presenceContext) {\n        if (props.transformTemplate || this.props.transformTemplate) {\n            this.scheduleRender();\n        }\n        this.prevProps = this.props;\n        this.props = props;\n        this.prevPresenceContext = this.presenceContext;\n        this.presenceContext = presenceContext;\n        /**\n         * Update prop event handlers ie onAnimationStart, onAnimationComplete\n         */ for(let i = 0; i < propEventHandlers.length; i++){\n            const key = propEventHandlers[i];\n            if (this.propEventSubscriptions[key]) {\n                this.propEventSubscriptions[key]();\n                delete this.propEventSubscriptions[key];\n            }\n            const listenerName = \"on\" + key;\n            const listener = props[listenerName];\n            if (listener) {\n                this.propEventSubscriptions[key] = this.on(key, listener);\n            }\n        }\n        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps, this), this.prevMotionValues);\n        if (this.handleChildMotionValue) {\n            this.handleChildMotionValue();\n        }\n    }\n    getProps() {\n        return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */ getVariant(name) {\n        return this.props.variants ? this.props.variants[name] : undefined;\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */ getDefaultTransition() {\n        return this.props.transition;\n    }\n    getTransformPagePoint() {\n        return this.props.transformPagePoint;\n    }\n    getClosestVariantNode() {\n        return this.isVariantNode ? this : this.parent ? this.parent.getClosestVariantNode() : undefined;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */ addVariantChild(child) {\n        const closestVariantNode = this.getClosestVariantNode();\n        if (closestVariantNode) {\n            closestVariantNode.variantChildren && closestVariantNode.variantChildren.add(child);\n            return ()=>closestVariantNode.variantChildren.delete(child);\n        }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */ addValue(key, value) {\n        // Remove existing value if it exists\n        const existingValue = this.values.get(key);\n        if (value !== existingValue) {\n            if (existingValue) this.removeValue(key);\n            this.bindToMotionValue(key, value);\n            this.values.set(key, value);\n            this.latestValues[key] = value.get();\n        }\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */ removeValue(key) {\n        this.values.delete(key);\n        const unsubscribe = this.valueSubscriptions.get(key);\n        if (unsubscribe) {\n            unsubscribe();\n            this.valueSubscriptions.delete(key);\n        }\n        delete this.latestValues[key];\n        this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */ hasValue(key) {\n        return this.values.has(key);\n    }\n    getValue(key, defaultValue) {\n        if (this.props.values && this.props.values[key]) {\n            return this.props.values[key];\n        }\n        let value = this.values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n            value = motionValue(defaultValue === null ? undefined : defaultValue, {\n                owner: this\n            });\n            this.addValue(key, value);\n        }\n        return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */ readValue(key, target) {\n        var _a;\n        let value = this.latestValues[key] !== undefined || !this.current ? this.latestValues[key] : (_a = this.getBaseTargetFromProps(this.props, key)) !== null && _a !== void 0 ? _a : this.readValueFromInstance(this.current, key, this.options);\n        if (value !== undefined && value !== null) {\n            if (typeof value === \"string\" && (isNumericalString(value) || isZeroValueString(value))) {\n                // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n                value = parseFloat(value);\n            } else if (!findValueType(value) && complex.test(target)) {\n                value = getAnimatableNone(key, target);\n            }\n            this.setBaseTarget(key, isMotionValue(value) ? value.get() : value);\n        }\n        return isMotionValue(value) ? value.get() : value;\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */ setBaseTarget(key, value) {\n        this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */ getBaseTarget(key) {\n        var _a;\n        const { initial } = this.props;\n        let valueFromInitial;\n        if (typeof initial === \"string\" || typeof initial === \"object\") {\n            const variant = resolveVariantFromProps(this.props, initial, (_a = this.presenceContext) === null || _a === void 0 ? void 0 : _a.custom);\n            if (variant) {\n                valueFromInitial = variant[key];\n            }\n        }\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */ if (initial && valueFromInitial !== undefined) {\n            return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */ const target = this.getBaseTargetFromProps(this.props, key);\n        if (target !== undefined && !isMotionValue(target)) return target;\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */ return this.initialValues[key] !== undefined && valueFromInitial === undefined ? undefined : this.baseTarget[key];\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        return this.events[eventName].add(callback);\n    }\n    notify(eventName) {\n        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            args[_key - 1] = arguments[_key];\n        }\n        if (this.events[eventName]) {\n            this.events[eventName].notify(...args);\n        }\n    }\n    constructor({ parent, props, presenceContext, reducedMotionConfig, blockInitialAnimation, visualState }, options = {}){\n        /**\n         * A reference to the current underlying Instance, e.g. a HTMLElement\n         * or Three.Mesh etc.\n         */ this.current = null;\n        /**\n         * A set containing references to this VisualElement's children.\n         */ this.children = new Set();\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */ this.isVariantNode = false;\n        this.isControllingVariants = false;\n        /**\n         * Decides whether this VisualElement should animate in reduced motion\n         * mode.\n         *\n         * TODO: This is currently set on every individual VisualElement but feels\n         * like it could be set globally.\n         */ this.shouldReduceMotion = null;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */ this.values = new Map();\n        this.KeyframeResolver = KeyframeResolver;\n        /**\n         * Cleanup functions for active features (hover/tap/exit etc)\n         */ this.features = {};\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */ this.valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */ this.prevMotionValues = {};\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */ this.events = {};\n        /**\n         * An object containing an unsubscribe function for each prop event subscription.\n         * For example, every \"Update\" event can have multiple subscribers via\n         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n         */ this.propEventSubscriptions = {};\n        this.notifyUpdate = ()=>this.notify(\"Update\", this.latestValues);\n        this.render = ()=>{\n            if (!this.current) return;\n            this.triggerBuild();\n            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n        };\n        this.renderScheduledAt = 0.0;\n        this.scheduleRender = ()=>{\n            const now = time.now();\n            if (this.renderScheduledAt < now) {\n                this.renderScheduledAt = now;\n                frame.render(this.render, false, true);\n            }\n        };\n        const { latestValues, renderState } = visualState;\n        this.latestValues = latestValues;\n        this.baseTarget = {\n            ...latestValues\n        };\n        this.initialValues = props.initial ? {\n            ...latestValues\n        } : {};\n        this.renderState = renderState;\n        this.parent = parent;\n        this.props = props;\n        this.presenceContext = presenceContext;\n        this.depth = parent ? parent.depth + 1 : 0;\n        this.reducedMotionConfig = reducedMotionConfig;\n        this.options = options;\n        this.blockInitialAnimation = Boolean(blockInitialAnimation);\n        this.isControllingVariants = isControllingVariants(props);\n        this.isVariantNode = isVariantNode(props);\n        if (this.isVariantNode) {\n            this.variantChildren = new Set();\n        }\n        this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't necessarily a breaking change,\n         * more a reflection of the test.\n         */ const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {}, this);\n        for(const key in initialMotionValues){\n            const value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n            }\n        }\n    }\n}\nclass DOMVisualElement extends VisualElement {\n    sortInstanceNodePosition(a, b) {\n        /**\n         * compareDocumentPosition returns a bitmask, by using the bitwise &\n         * we're returning true if 2 in that bitmask is set to true. 2 is set\n         * to true if b preceeds a.\n         */ return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props.style ? props.style[key] : undefined;\n    }\n    removeValueFromRenderState(key, param) {\n        let { vars, style } = param;\n        delete vars[key];\n        delete style[key];\n    }\n    handleChildMotionValue() {\n        if (this.childSubscription) {\n            this.childSubscription();\n            delete this.childSubscription;\n        }\n        const { children } = this.props;\n        if (isMotionValue(children)) {\n            this.childSubscription = children.on(\"change\", (latest)=>{\n                if (this.current) {\n                    this.current.textContent = \"\".concat(latest);\n                }\n            });\n        }\n    }\n    constructor(){\n        super(...arguments);\n        this.KeyframeResolver = DOMKeyframesResolver;\n    }\n}\n/**\n * Provided a value and a ValueType, returns the value as that value type.\n */ const getValueAsType = (value, type)=>{\n    return type && typeof value === \"number\" ? type.transform(value) : value;\n};\nconst translateAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n    transformPerspective: \"perspective\"\n};\nconst numTransforms = transformPropOrder.length;\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */ function buildTransform(latestValues, transform, transformTemplate) {\n    // The transform string we're going to build into.\n    let transformString = \"\";\n    let transformIsDefault = true;\n    /**\n     * Loop over all possible transforms in order, adding the ones that\n     * are present to the transform string.\n     */ for(let i = 0; i < numTransforms; i++){\n        const key = transformPropOrder[i];\n        const value = latestValues[key];\n        if (value === undefined) continue;\n        let valueIsDefault = true;\n        if (typeof value === \"number\") {\n            valueIsDefault = value === (key.startsWith(\"scale\") ? 1 : 0);\n        } else {\n            valueIsDefault = parseFloat(value) === 0;\n        }\n        if (!valueIsDefault || transformTemplate) {\n            const valueAsType = getValueAsType(value, numberValueTypes[key]);\n            if (!valueIsDefault) {\n                transformIsDefault = false;\n                const transformName = translateAlias[key] || key;\n                transformString += \"\".concat(transformName, \"(\").concat(valueAsType, \") \");\n            }\n            if (transformTemplate) {\n                transform[key] = valueAsType;\n            }\n        }\n    }\n    transformString = transformString.trim();\n    // If we have a custom `transform` template, pass our transform values and\n    // generated transformString to that before returning\n    if (transformTemplate) {\n        transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n    } else if (transformIsDefault) {\n        transformString = \"none\";\n    }\n    return transformString;\n}\nfunction buildHTMLStyles(state, latestValues, transformTemplate) {\n    const { style, vars, transformOrigin } = state;\n    // Track whether we encounter any transform or transformOrigin values.\n    let hasTransform = false;\n    let hasTransformOrigin = false;\n    /**\n     * Loop over all our latest animated values and decide whether to handle them\n     * as a style or CSS variable.\n     *\n     * Transforms and transform origins are kept separately for further processing.\n     */ for(const key in latestValues){\n        const value = latestValues[key];\n        if (transformProps.has(key)) {\n            // If this is a transform, flag to enable further transform processing\n            hasTransform = true;\n            continue;\n        } else if (isCSSVariableName(key)) {\n            vars[key] = value;\n            continue;\n        } else {\n            // Convert the value to its default value type, ie 0 -> \"0px\"\n            const valueAsType = getValueAsType(value, numberValueTypes[key]);\n            if (key.startsWith(\"origin\")) {\n                // If this is a transform origin, flag and enable further transform-origin processing\n                hasTransformOrigin = true;\n                transformOrigin[key] = valueAsType;\n            } else {\n                style[key] = valueAsType;\n            }\n        }\n    }\n    if (!latestValues.transform) {\n        if (hasTransform || transformTemplate) {\n            style.transform = buildTransform(latestValues, state.transform, transformTemplate);\n        } else if (style.transform) {\n            /**\n             * If we have previously created a transform but currently don't have any,\n             * reset transform style to none.\n             */ style.transform = \"none\";\n        }\n    }\n    /**\n     * Build a transformOrigin style. Uses the same defaults as the browser for\n     * undefined origins.\n     */ if (hasTransformOrigin) {\n        const { originX = \"50%\", originY = \"50%\", originZ = 0 } = transformOrigin;\n        style.transformOrigin = \"\".concat(originX, \" \").concat(originY, \" \").concat(originZ);\n    }\n}\nfunction calcOrigin(origin, offset, size) {\n    return typeof origin === \"string\" ? origin : px.transform(offset + size * origin);\n}\n/**\n * The SVG transform origin defaults are different to CSS and is less intuitive,\n * so we use the measured dimensions of the SVG to reconcile these.\n */ function calcSVGTransformOrigin(dimensions, originX, originY) {\n    const pxOriginX = calcOrigin(originX, dimensions.x, dimensions.width);\n    const pxOriginY = calcOrigin(originY, dimensions.y, dimensions.height);\n    return \"\".concat(pxOriginX, \" \").concat(pxOriginY);\n}\nconst dashKeys = {\n    offset: \"stroke-dashoffset\",\n    array: \"stroke-dasharray\"\n};\nconst camelKeys = {\n    offset: \"strokeDashoffset\",\n    array: \"strokeDasharray\"\n};\n/**\n * Build SVG path properties. Uses the path's measured length to convert\n * our custom pathLength, pathSpacing and pathOffset into stroke-dashoffset\n * and stroke-dasharray attributes.\n *\n * This function is mutative to reduce per-frame GC.\n */ function buildSVGPath(attrs, length) {\n    let spacing = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1, offset = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0, useDashCase = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : true;\n    // Normalise path length by setting SVG attribute pathLength to 1\n    attrs.pathLength = 1;\n    // We use dash case when setting attributes directly to the DOM node and camel case\n    // when defining props on a React component.\n    const keys = useDashCase ? dashKeys : camelKeys;\n    // Build the dash offset\n    attrs[keys.offset] = px.transform(-offset);\n    // Build the dash array\n    const pathLength = px.transform(length);\n    const pathSpacing = px.transform(spacing);\n    attrs[keys.array] = \"\".concat(pathLength, \" \").concat(pathSpacing);\n}\n/**\n * Build SVG visual attrbutes, like cx and style.transform\n */ function buildSVGAttrs(state, param, isSVGTag, transformTemplate) {\n    let { attrX, attrY, attrScale, originX, originY, pathLength, pathSpacing = 1, pathOffset = 0, // This is object creation, which we try to avoid per-frame.\n    ...latest } = param;\n    buildHTMLStyles(state, latest, transformTemplate);\n    /**\n     * For svg tags we just want to make sure viewBox is animatable and treat all the styles\n     * as normal HTML tags.\n     */ if (isSVGTag) {\n        if (state.style.viewBox) {\n            state.attrs.viewBox = state.style.viewBox;\n        }\n        return;\n    }\n    state.attrs = state.style;\n    state.style = {};\n    const { attrs, style, dimensions } = state;\n    /**\n     * However, we apply transforms as CSS transforms. So if we detect a transform we take it from attrs\n     * and copy it into style.\n     */ if (attrs.transform) {\n        if (dimensions) style.transform = attrs.transform;\n        delete attrs.transform;\n    }\n    // Parse transformOrigin\n    if (dimensions && (originX !== undefined || originY !== undefined || style.transform)) {\n        style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== undefined ? originX : 0.5, originY !== undefined ? originY : 0.5);\n    }\n    // Render attrX/attrY/attrScale as attributes\n    if (attrX !== undefined) attrs.x = attrX;\n    if (attrY !== undefined) attrs.y = attrY;\n    if (attrScale !== undefined) attrs.scale = attrScale;\n    // Build SVG path if one has been defined\n    if (pathLength !== undefined) {\n        buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);\n    }\n}\n/**\n * A set of attribute names that are always read/written as camel case.\n */ const camelCaseAttributes = new Set([\n    \"baseFrequency\",\n    \"diffuseConstant\",\n    \"kernelMatrix\",\n    \"kernelUnitLength\",\n    \"keySplines\",\n    \"keyTimes\",\n    \"limitingConeAngle\",\n    \"markerHeight\",\n    \"markerWidth\",\n    \"numOctaves\",\n    \"targetX\",\n    \"targetY\",\n    \"surfaceScale\",\n    \"specularConstant\",\n    \"specularExponent\",\n    \"stdDeviation\",\n    \"tableValues\",\n    \"viewBox\",\n    \"gradientTransform\",\n    \"pathLength\",\n    \"startOffset\",\n    \"textLength\",\n    \"lengthAdjust\"\n]);\nfunction renderHTML(element, param, styleProp, projection) {\n    let { style, vars } = param;\n    Object.assign(element.style, style, projection && projection.getProjectionStyles(styleProp));\n    // Loop over any CSS variables and assign those.\n    for(const key in vars){\n        element.style.setProperty(key, vars[key]);\n    }\n}\nfunction renderSVG(element, renderState, _styleProp, projection) {\n    renderHTML(element, renderState, undefined, projection);\n    for(const key in renderState.attrs){\n        element.setAttribute(!camelCaseAttributes.has(key) ? camelToDash(key) : key, renderState.attrs[key]);\n    }\n}\nconst isSVGTag = (tag)=>typeof tag === \"string\" && tag.toLowerCase() === \"svg\";\nclass SVGVisualElement extends DOMVisualElement {\n    getBaseTargetFromProps(props, key) {\n        return props[key];\n    }\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;\n        return instance.getAttribute(key);\n    }\n    scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n        return scrapeMotionValuesFromProps(props, prevProps, visualElement);\n    }\n    build(renderState, latestValues, props) {\n        buildSVGAttrs(renderState, latestValues, this.isSVGTag, props.transformTemplate);\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderSVG(instance, renderState, styleProp, projection);\n    }\n    mount(instance) {\n        this.isSVGTag = isSVGTag(instance.tagName);\n        super.mount(instance);\n    }\n    constructor(){\n        super(...arguments);\n        this.type = \"svg\";\n        this.isSVGTag = false;\n        this.measureInstanceViewportBox = createBox;\n    }\n}\nfunction getComputedStyle$1(element) {\n    return window.getComputedStyle(element);\n}\nclass HTMLVisualElement extends DOMVisualElement {\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        } else {\n            const computedStyle = getComputedStyle$1(instance);\n            const value = (isCSSVariableName(key) ? computedStyle.getPropertyValue(key) : computedStyle[key]) || 0;\n            return typeof value === \"string\" ? value.trim() : value;\n        }\n    }\n    measureInstanceViewportBox(instance, param) {\n        let { transformPagePoint } = param;\n        return measureViewportBox(instance, transformPagePoint);\n    }\n    build(renderState, latestValues, props) {\n        buildHTMLStyles(renderState, latestValues, props.transformTemplate);\n    }\n    scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n        return scrapeMotionValuesFromProps$1(props, prevProps, visualElement);\n    }\n    constructor(){\n        super(...arguments);\n        this.type = \"html\";\n        this.renderInstance = renderHTML;\n    }\n}\nfunction isObjectKey(key, object) {\n    return key in object;\n}\nclass ObjectVisualElement extends VisualElement {\n    readValueFromInstance(instance, key) {\n        if (isObjectKey(key, instance)) {\n            const value = instance[key];\n            if (typeof value === \"string\" || typeof value === \"number\") {\n                return value;\n            }\n        }\n        return undefined;\n    }\n    getBaseTargetFromProps() {\n        return undefined;\n    }\n    removeValueFromRenderState(key, renderState) {\n        delete renderState.output[key];\n    }\n    measureInstanceViewportBox() {\n        return createBox();\n    }\n    build(renderState, latestValues) {\n        Object.assign(renderState.output, latestValues);\n    }\n    renderInstance(instance, param) {\n        let { output } = param;\n        Object.assign(instance, output);\n    }\n    sortInstanceNodePosition() {\n        return 0;\n    }\n    constructor(){\n        super(...arguments);\n        this.type = \"object\";\n    }\n}\nfunction createDOMVisualElement(element) {\n    const options = {\n        presenceContext: null,\n        props: {},\n        visualState: {\n            renderState: {\n                transform: {},\n                transformOrigin: {},\n                style: {},\n                vars: {},\n                attrs: {}\n            },\n            latestValues: {}\n        }\n    };\n    const node = isSVGElement(element) ? new SVGVisualElement(options) : new HTMLVisualElement(options);\n    node.mount(element);\n    visualElementStore.set(element, node);\n}\nfunction createObjectVisualElement(subject) {\n    const options = {\n        presenceContext: null,\n        props: {},\n        visualState: {\n            renderState: {\n                output: {}\n            },\n            latestValues: {}\n        }\n    };\n    const node = new ObjectVisualElement(options);\n    node.mount(subject);\n    visualElementStore.set(subject, node);\n}\nfunction animateSingleValue(value, keyframes, options) {\n    const motionValue$1 = isMotionValue(value) ? value : motionValue(value);\n    motionValue$1.start(animateMotionValue(\"\", motionValue$1, keyframes, options));\n    return motionValue$1.animation;\n}\nfunction isSingleValue(subject, keyframes) {\n    return isMotionValue(subject) || typeof subject === \"number\" || typeof subject === \"string\" && !isDOMKeyframes(keyframes);\n}\n/**\n * Implementation\n */ function animateSubject(subject, keyframes, options, scope) {\n    const animations = [];\n    if (isSingleValue(subject, keyframes)) {\n        animations.push(animateSingleValue(subject, isDOMKeyframes(keyframes) ? keyframes.default || keyframes : keyframes, options ? options.default || options : options));\n    } else {\n        const subjects = resolveSubjects(subject, keyframes, scope);\n        const numSubjects = subjects.length;\n        motionUtils.invariant(Boolean(numSubjects), \"No valid elements provided.\");\n        for(let i = 0; i < numSubjects; i++){\n            const thisSubject = subjects[i];\n            const createVisualElement = thisSubject instanceof Element ? createDOMVisualElement : createObjectVisualElement;\n            if (!visualElementStore.has(thisSubject)) {\n                createVisualElement(thisSubject);\n            }\n            const visualElement = visualElementStore.get(thisSubject);\n            const transition = {\n                ...options\n            };\n            /**\n             * Resolve stagger function if provided.\n             */ if (\"delay\" in transition && typeof transition.delay === \"function\") {\n                transition.delay = transition.delay(i, numSubjects);\n            }\n            animations.push(...animateTarget(visualElement, {\n                ...keyframes,\n                transition\n            }, {}));\n        }\n    }\n    return animations;\n}\nfunction animateSequence(sequence, options, scope) {\n    const animations = [];\n    const animationDefinitions = createAnimationsFromSequence(sequence, options, scope, {\n        spring\n    });\n    animationDefinitions.forEach((param, subject)=>{\n        let { keyframes, transition } = param;\n        animations.push(...animateSubject(subject, keyframes, transition));\n    });\n    return animations;\n}\nfunction isSequence(value) {\n    return Array.isArray(value) && Array.isArray(value[0]);\n}\n/**\n * Creates an animation function that is optionally scoped\n * to a specific element.\n */ function createScopedAnimate(scope) {\n    /**\n     * Implementation\n     */ function scopedAnimate(subjectOrSequence, optionsOrKeyframes, options) {\n        let animations = [];\n        if (isSequence(subjectOrSequence)) {\n            animations = animateSequence(subjectOrSequence, optionsOrKeyframes, scope);\n        } else {\n            animations = animateSubject(subjectOrSequence, optionsOrKeyframes, options, scope);\n        }\n        const animation = new GroupPlaybackControls(animations);\n        if (scope) {\n            scope.animations.push(animation);\n        }\n        return animation;\n    }\n    return scopedAnimate;\n}\nconst animate = createScopedAnimate();\nfunction setCSSVar(element, name, value) {\n    element.style.setProperty(\"--\".concat(name), value);\n}\nfunction setStyle(element, name, value) {\n    element.style[name] = value;\n}\nconst supportsPartialKeyframes = /*@__PURE__*/ memo(()=>{\n    try {\n        document.createElement(\"div\").animate({\n            opacity: [\n                1\n            ]\n        });\n    } catch (e) {\n        return false;\n    }\n    return true;\n});\nconst state = new WeakMap();\nfunction hydrateKeyframes(valueName, keyframes, read) {\n    for(let i = 0; i < keyframes.length; i++){\n        if (keyframes[i] === null) {\n            keyframes[i] = i === 0 ? read() : keyframes[i - 1];\n        }\n        if (typeof keyframes[i] === \"number\" && browserNumberValueTypes[valueName]) {\n            keyframes[i] = browserNumberValueTypes[valueName].transform(keyframes[i]);\n        }\n    }\n    if (!supportsPartialKeyframes() && keyframes.length < 2) {\n        keyframes.unshift(read());\n    }\n}\nconst defaultEasing = \"easeOut\";\nfunction getElementAnimationState(element) {\n    const animationState = state.get(element) || new Map();\n    state.set(element, animationState);\n    return state.get(element);\n}\nclass NativeAnimation {\n    get duration() {\n        return millisecondsToSeconds(this.options.duration || 300);\n    }\n    get time() {\n        var _a;\n        if (this.animation) {\n            return millisecondsToSeconds(((_a = this.animation) === null || _a === void 0 ? void 0 : _a.currentTime) || 0);\n        }\n        return 0;\n    }\n    set time(newTime) {\n        if (this.animation) {\n            this.animation.currentTime = secondsToMilliseconds(newTime);\n        }\n    }\n    get speed() {\n        return this.animation ? this.animation.playbackRate : 1;\n    }\n    set speed(newSpeed) {\n        if (this.animation) {\n            this.animation.playbackRate = newSpeed;\n        }\n    }\n    get state() {\n        return this.animation ? this.animation.playState : \"finished\";\n    }\n    get startTime() {\n        return this.animation ? this.animation.startTime : null;\n    }\n    flatten() {\n        var _a;\n        if (!this.animation) return;\n        (_a = this.animation.effect) === null || _a === void 0 ? void 0 : _a.updateTiming({\n            easing: \"linear\"\n        });\n    }\n    play() {\n        if (this.state === \"finished\") {\n            this.updateFinishedPromise();\n        }\n        this.animation && this.animation.play();\n    }\n    pause() {\n        this.animation && this.animation.pause();\n    }\n    stop() {\n        if (!this.animation || this.state === \"idle\" || this.state === \"finished\") {\n            return;\n        }\n        if (this.animation.commitStyles) {\n            this.animation.commitStyles();\n        }\n        this.cancel();\n    }\n    complete() {\n        this.animation && this.animation.finish();\n    }\n    cancel() {\n        this.removeAnimation();\n        try {\n            this.animation && this.animation.cancel();\n        } catch (e) {}\n    }\n    /**\n     * Allows the returned animation to be awaited or promise-chained. Currently\n     * resolves when the animation finishes at all but in a future update could/should\n     * reject if its cancels.\n     */ then(resolve, reject) {\n        return this.currentFinishedPromise.then(resolve, reject);\n    }\n    updateFinishedPromise() {\n        this.currentFinishedPromise = new Promise((resolve)=>{\n            this.resolveFinishedPromise = resolve;\n        });\n    }\n    attachTimeline(timeline) {\n        if (!this.animation) {\n            this.pendingTimeline = timeline;\n        } else {\n            attachTimeline(this.animation, timeline);\n        }\n        return motionUtils.noop;\n    }\n    constructor(element, valueName, valueKeyframes, options){\n        const isCSSVar = valueName.startsWith(\"--\");\n        this.setValue = isCSSVar ? setCSSVar : setStyle;\n        this.options = options;\n        this.updateFinishedPromise();\n        motionUtils.invariant(typeof options.type !== \"string\", 'animateMini doesn\\'t support \"type\" as a string. Did you mean to import { spring } from \"framer-motion\"?');\n        const existingAnimation = getElementAnimationState(element).get(valueName);\n        existingAnimation && existingAnimation.stop();\n        const readInitialKeyframe = ()=>{\n            return valueName.startsWith(\"--\") ? element.style.getPropertyValue(valueName) : window.getComputedStyle(element)[valueName];\n        };\n        if (!Array.isArray(valueKeyframes)) {\n            valueKeyframes = [\n                valueKeyframes\n            ];\n        }\n        hydrateKeyframes(valueName, valueKeyframes, readInitialKeyframe);\n        // TODO: Replace this with toString()?\n        if (isGenerator(options.type)) {\n            const generatorOptions = createGeneratorEasing(options, 100, options.type);\n            options.ease = supportsLinearEasing() ? generatorOptions.ease : defaultEasing;\n            options.duration = secondsToMilliseconds(generatorOptions.duration);\n            options.type = \"keyframes\";\n        } else {\n            options.ease = options.ease || defaultEasing;\n        }\n        this.removeAnimation = ()=>{\n            var _a;\n            return (_a = state.get(element)) === null || _a === void 0 ? void 0 : _a.delete(valueName);\n        };\n        const onFinish = ()=>{\n            this.setValue(element, valueName, getFinalKeyframe(valueKeyframes, this.options));\n            this.cancel();\n            this.resolveFinishedPromise();\n        };\n        if (!supportsWaapi()) {\n            onFinish();\n        } else {\n            this.animation = startWaapiAnimation(element, valueName, valueKeyframes, options);\n            if (options.autoplay === false) {\n                this.animation.pause();\n            }\n            this.animation.onfinish = onFinish;\n            if (this.pendingTimeline) {\n                attachTimeline(this.animation, this.pendingTimeline);\n            }\n            getElementAnimationState(element).set(valueName, this);\n        }\n    }\n}\nfunction animateElements(elementOrSelector, keyframes, options, scope) {\n    const elements = motionDom.resolveElements(elementOrSelector, scope);\n    const numElements = elements.length;\n    motionUtils.invariant(Boolean(numElements), \"No valid element provided.\");\n    const animations = [];\n    for(let i = 0; i < numElements; i++){\n        const element = elements[i];\n        const elementTransition = {\n            ...options\n        };\n        /**\n         * Resolve stagger function if provided.\n         */ if (typeof elementTransition.delay === \"function\") {\n            elementTransition.delay = elementTransition.delay(i, numElements);\n        }\n        for(const valueName in keyframes){\n            const valueKeyframes = keyframes[valueName];\n            const valueOptions = {\n                ...getValueTransition$1(elementTransition, valueName)\n            };\n            valueOptions.duration = valueOptions.duration ? secondsToMilliseconds(valueOptions.duration) : valueOptions.duration;\n            valueOptions.delay = secondsToMilliseconds(valueOptions.delay || 0);\n            animations.push(new NativeAnimation(element, valueName, valueKeyframes, valueOptions));\n        }\n    }\n    return animations;\n}\nconst createScopedWaapiAnimate = (scope)=>{\n    function scopedAnimate(elementOrSelector, keyframes, options) {\n        return new GroupPlaybackControls(animateElements(elementOrSelector, keyframes, options, scope));\n    }\n    return scopedAnimate;\n};\nconst animateMini = /*@__PURE__*/ createScopedWaapiAnimate();\nconst resizeHandlers = new WeakMap();\nlet observer;\nfunction getElementSize(target, borderBoxSize) {\n    if (borderBoxSize) {\n        const { inlineSize, blockSize } = borderBoxSize[0];\n        return {\n            width: inlineSize,\n            height: blockSize\n        };\n    } else if (target instanceof SVGElement && \"getBBox\" in target) {\n        return target.getBBox();\n    } else {\n        return {\n            width: target.offsetWidth,\n            height: target.offsetHeight\n        };\n    }\n}\nfunction notifyTarget(param) {\n    let { target, contentRect, borderBoxSize } = param;\n    var _a;\n    (_a = resizeHandlers.get(target)) === null || _a === void 0 ? void 0 : _a.forEach((handler)=>{\n        handler({\n            target,\n            contentSize: contentRect,\n            get size () {\n                return getElementSize(target, borderBoxSize);\n            }\n        });\n    });\n}\nfunction notifyAll(entries) {\n    entries.forEach(notifyTarget);\n}\nfunction createResizeObserver() {\n    if (typeof ResizeObserver === \"undefined\") return;\n    observer = new ResizeObserver(notifyAll);\n}\nfunction resizeElement(target, handler) {\n    if (!observer) createResizeObserver();\n    const elements = motionDom.resolveElements(target);\n    elements.forEach((element)=>{\n        let elementHandlers = resizeHandlers.get(element);\n        if (!elementHandlers) {\n            elementHandlers = new Set();\n            resizeHandlers.set(element, elementHandlers);\n        }\n        elementHandlers.add(handler);\n        observer === null || observer === void 0 ? void 0 : observer.observe(element);\n    });\n    return ()=>{\n        elements.forEach((element)=>{\n            const elementHandlers = resizeHandlers.get(element);\n            elementHandlers === null || elementHandlers === void 0 ? void 0 : elementHandlers.delete(handler);\n            if (!(elementHandlers === null || elementHandlers === void 0 ? void 0 : elementHandlers.size)) {\n                observer === null || observer === void 0 ? void 0 : observer.unobserve(element);\n            }\n        });\n    };\n}\nconst windowCallbacks = new Set();\nlet windowResizeHandler;\nfunction createWindowResizeHandler() {\n    windowResizeHandler = ()=>{\n        const size = {\n            width: window.innerWidth,\n            height: window.innerHeight\n        };\n        const info = {\n            target: window,\n            size,\n            contentSize: size\n        };\n        windowCallbacks.forEach((callback)=>callback(info));\n    };\n    window.addEventListener(\"resize\", windowResizeHandler);\n}\nfunction resizeWindow(callback) {\n    windowCallbacks.add(callback);\n    if (!windowResizeHandler) createWindowResizeHandler();\n    return ()=>{\n        windowCallbacks.delete(callback);\n        if (!windowCallbacks.size && windowResizeHandler) {\n            windowResizeHandler = undefined;\n        }\n    };\n}\nfunction resize(a, b) {\n    return typeof a === \"function\" ? resizeWindow(a) : resizeElement(a, b);\n}\n/**\n * A time in milliseconds, beyond which we consider the scroll velocity to be 0.\n */ const maxElapsed = 50;\nconst createAxisInfo = ()=>({\n        current: 0,\n        offset: [],\n        progress: 0,\n        scrollLength: 0,\n        targetOffset: 0,\n        targetLength: 0,\n        containerLength: 0,\n        velocity: 0\n    });\nconst createScrollInfo = ()=>({\n        time: 0,\n        x: createAxisInfo(),\n        y: createAxisInfo()\n    });\nconst keys = {\n    x: {\n        length: \"Width\",\n        position: \"Left\"\n    },\n    y: {\n        length: \"Height\",\n        position: \"Top\"\n    }\n};\nfunction updateAxisInfo(element, axisName, info, time) {\n    const axis = info[axisName];\n    const { length, position } = keys[axisName];\n    const prev = axis.current;\n    const prevTime = info.time;\n    axis.current = element[\"scroll\".concat(position)];\n    axis.scrollLength = element[\"scroll\".concat(length)] - element[\"client\".concat(length)];\n    axis.offset.length = 0;\n    axis.offset[0] = 0;\n    axis.offset[1] = axis.scrollLength;\n    axis.progress = progress(0, axis.scrollLength, axis.current);\n    const elapsed = time - prevTime;\n    axis.velocity = elapsed > maxElapsed ? 0 : velocityPerSecond(axis.current - prev, elapsed);\n}\nfunction updateScrollInfo(element, info, time) {\n    updateAxisInfo(element, \"x\", info, time);\n    updateAxisInfo(element, \"y\", info, time);\n    info.time = time;\n}\nfunction calcInset(element, container) {\n    const inset = {\n        x: 0,\n        y: 0\n    };\n    let current = element;\n    while(current && current !== container){\n        if (current instanceof HTMLElement) {\n            inset.x += current.offsetLeft;\n            inset.y += current.offsetTop;\n            current = current.offsetParent;\n        } else if (current.tagName === \"svg\") {\n            /**\n             * This isn't an ideal approach to measuring the offset of <svg /> tags.\n             * It would be preferable, given they behave like HTMLElements in most ways\n             * to use offsetLeft/Top. But these don't exist on <svg />. Likewise we\n             * can't use .getBBox() like most SVG elements as these provide the offset\n             * relative to the SVG itself, which for <svg /> is usually 0x0.\n             */ const svgBoundingBox = current.getBoundingClientRect();\n            current = current.parentElement;\n            const parentBoundingBox = current.getBoundingClientRect();\n            inset.x += svgBoundingBox.left - parentBoundingBox.left;\n            inset.y += svgBoundingBox.top - parentBoundingBox.top;\n        } else if (current instanceof SVGGraphicsElement) {\n            const { x, y } = current.getBBox();\n            inset.x += x;\n            inset.y += y;\n            let svg = null;\n            let parent = current.parentNode;\n            while(!svg){\n                if (parent.tagName === \"svg\") {\n                    svg = parent;\n                }\n                parent = current.parentNode;\n            }\n            current = svg;\n        } else {\n            break;\n        }\n    }\n    return inset;\n}\nconst ScrollOffset = {\n    Enter: [\n        [\n            0,\n            1\n        ],\n        [\n            1,\n            1\n        ]\n    ],\n    Exit: [\n        [\n            0,\n            0\n        ],\n        [\n            1,\n            0\n        ]\n    ],\n    Any: [\n        [\n            1,\n            0\n        ],\n        [\n            0,\n            1\n        ]\n    ],\n    All: [\n        [\n            0,\n            0\n        ],\n        [\n            1,\n            1\n        ]\n    ]\n};\nconst namedEdges = {\n    start: 0,\n    center: 0.5,\n    end: 1\n};\nfunction resolveEdge(edge, length) {\n    let inset = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;\n    let delta = 0;\n    /**\n     * If we have this edge defined as a preset, replace the definition\n     * with the numerical value.\n     */ if (edge in namedEdges) {\n        edge = namedEdges[edge];\n    }\n    /**\n     * Handle unit values\n     */ if (typeof edge === \"string\") {\n        const asNumber = parseFloat(edge);\n        if (edge.endsWith(\"px\")) {\n            delta = asNumber;\n        } else if (edge.endsWith(\"%\")) {\n            edge = asNumber / 100;\n        } else if (edge.endsWith(\"vw\")) {\n            delta = asNumber / 100 * document.documentElement.clientWidth;\n        } else if (edge.endsWith(\"vh\")) {\n            delta = asNumber / 100 * document.documentElement.clientHeight;\n        } else {\n            edge = asNumber;\n        }\n    }\n    /**\n     * If the edge is defined as a number, handle as a progress value.\n     */ if (typeof edge === \"number\") {\n        delta = length * edge;\n    }\n    return inset + delta;\n}\nconst defaultOffset = [\n    0,\n    0\n];\nfunction resolveOffset(offset, containerLength, targetLength, targetInset) {\n    let offsetDefinition = Array.isArray(offset) ? offset : defaultOffset;\n    let targetPoint = 0;\n    let containerPoint = 0;\n    if (typeof offset === \"number\") {\n        /**\n         * If we're provided offset: [0, 0.5, 1] then each number x should become\n         * [x, x], so we default to the behaviour of mapping 0 => 0 of both target\n         * and container etc.\n         */ offsetDefinition = [\n            offset,\n            offset\n        ];\n    } else if (typeof offset === \"string\") {\n        offset = offset.trim();\n        if (offset.includes(\" \")) {\n            offsetDefinition = offset.split(\" \");\n        } else {\n            /**\n             * If we're provided a definition like \"100px\" then we want to apply\n             * that only to the top of the target point, leaving the container at 0.\n             * Whereas a named offset like \"end\" should be applied to both.\n             */ offsetDefinition = [\n                offset,\n                namedEdges[offset] ? offset : \"0\"\n            ];\n        }\n    }\n    targetPoint = resolveEdge(offsetDefinition[0], targetLength, targetInset);\n    containerPoint = resolveEdge(offsetDefinition[1], containerLength);\n    return targetPoint - containerPoint;\n}\nconst point = {\n    x: 0,\n    y: 0\n};\nfunction getTargetSize(target) {\n    return \"getBBox\" in target && target.tagName !== \"svg\" ? target.getBBox() : {\n        width: target.clientWidth,\n        height: target.clientHeight\n    };\n}\nfunction resolveOffsets(container, info, options) {\n    const { offset: offsetDefinition = ScrollOffset.All } = options;\n    const { target = container, axis = \"y\" } = options;\n    const lengthLabel = axis === \"y\" ? \"height\" : \"width\";\n    const inset = target !== container ? calcInset(target, container) : point;\n    /**\n     * Measure the target and container. If they're the same thing then we\n     * use the container's scrollWidth/Height as the target, from there\n     * all other calculations can remain the same.\n     */ const targetSize = target === container ? {\n        width: container.scrollWidth,\n        height: container.scrollHeight\n    } : getTargetSize(target);\n    const containerSize = {\n        width: container.clientWidth,\n        height: container.clientHeight\n    };\n    /**\n     * Reset the length of the resolved offset array rather than creating a new one.\n     * TODO: More reusable data structures for targetSize/containerSize would also be good.\n     */ info[axis].offset.length = 0;\n    /**\n     * Populate the offset array by resolving the user's offset definition into\n     * a list of pixel scroll offets.\n     */ let hasChanged = !info[axis].interpolate;\n    const numOffsets = offsetDefinition.length;\n    for(let i = 0; i < numOffsets; i++){\n        const offset = resolveOffset(offsetDefinition[i], containerSize[lengthLabel], targetSize[lengthLabel], inset[axis]);\n        if (!hasChanged && offset !== info[axis].interpolatorOffsets[i]) {\n            hasChanged = true;\n        }\n        info[axis].offset[i] = offset;\n    }\n    /**\n     * If the pixel scroll offsets have changed, create a new interpolator function\n     * to map scroll value into a progress.\n     */ if (hasChanged) {\n        info[axis].interpolate = interpolate(info[axis].offset, defaultOffset$1(offsetDefinition));\n        info[axis].interpolatorOffsets = [\n            ...info[axis].offset\n        ];\n    }\n    info[axis].progress = info[axis].interpolate(info[axis].current);\n}\nfunction measure(container) {\n    let target = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : container, info = arguments.length > 2 ? arguments[2] : void 0;\n    /**\n     * Find inset of target within scrollable container\n     */ info.x.targetOffset = 0;\n    info.y.targetOffset = 0;\n    if (target !== container) {\n        let node = target;\n        while(node && node !== container){\n            info.x.targetOffset += node.offsetLeft;\n            info.y.targetOffset += node.offsetTop;\n            node = node.offsetParent;\n        }\n    }\n    info.x.targetLength = target === container ? target.scrollWidth : target.clientWidth;\n    info.y.targetLength = target === container ? target.scrollHeight : target.clientHeight;\n    info.x.containerLength = container.clientWidth;\n    info.y.containerLength = container.clientHeight;\n    /**\n     * In development mode ensure scroll containers aren't position: static as this makes\n     * it difficult to measure their relative positions.\n     */ if (true) {\n        if (container && target && target !== container) {\n            warnOnce(getComputedStyle(container).position !== \"static\", \"Please ensure that the container has a non-static position, like 'relative', 'fixed', or 'absolute' to ensure scroll offset is calculated correctly.\");\n        }\n    }\n}\nfunction createOnScrollHandler(element, onScroll, info) {\n    let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};\n    return {\n        measure: ()=>measure(element, options.target, info),\n        update: (time)=>{\n            updateScrollInfo(element, info, time);\n            if (options.offset || options.target) {\n                resolveOffsets(element, info, options);\n            }\n        },\n        notify: ()=>onScroll(info)\n    };\n}\nconst scrollListeners = new WeakMap();\nconst resizeListeners = new WeakMap();\nconst onScrollHandlers = new WeakMap();\nconst getEventTarget = (element)=>element === document.documentElement ? window : element;\nfunction scrollInfo(onScroll) {\n    let { container = document.documentElement, ...options } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    let containerHandlers = onScrollHandlers.get(container);\n    /**\n     * Get the onScroll handlers for this container.\n     * If one isn't found, create a new one.\n     */ if (!containerHandlers) {\n        containerHandlers = new Set();\n        onScrollHandlers.set(container, containerHandlers);\n    }\n    /**\n     * Create a new onScroll handler for the provided callback.\n     */ const info = createScrollInfo();\n    const containerHandler = createOnScrollHandler(container, onScroll, info, options);\n    containerHandlers.add(containerHandler);\n    /**\n     * Check if there's a scroll event listener for this container.\n     * If not, create one.\n     */ if (!scrollListeners.has(container)) {\n        const measureAll = ()=>{\n            for (const handler of containerHandlers)handler.measure();\n        };\n        const updateAll = ()=>{\n            for (const handler of containerHandlers){\n                handler.update(frameData.timestamp);\n            }\n        };\n        const notifyAll = ()=>{\n            for (const handler of containerHandlers)handler.notify();\n        };\n        const listener = ()=>{\n            frame.read(measureAll, false, true);\n            frame.read(updateAll, false, true);\n            frame.update(notifyAll, false, true);\n        };\n        scrollListeners.set(container, listener);\n        const target = getEventTarget(container);\n        window.addEventListener(\"resize\", listener, {\n            passive: true\n        });\n        if (container !== document.documentElement) {\n            resizeListeners.set(container, resize(container, listener));\n        }\n        target.addEventListener(\"scroll\", listener, {\n            passive: true\n        });\n    }\n    const listener = scrollListeners.get(container);\n    frame.read(listener, false, true);\n    return ()=>{\n        var _a;\n        cancelFrame(listener);\n        /**\n         * Check if we even have any handlers for this container.\n         */ const currentHandlers = onScrollHandlers.get(container);\n        if (!currentHandlers) return;\n        currentHandlers.delete(containerHandler);\n        if (currentHandlers.size) return;\n        /**\n         * If no more handlers, remove the scroll listener too.\n         */ const scrollListener = scrollListeners.get(container);\n        scrollListeners.delete(container);\n        if (scrollListener) {\n            getEventTarget(container).removeEventListener(\"scroll\", scrollListener);\n            (_a = resizeListeners.get(container)) === null || _a === void 0 ? void 0 : _a();\n            window.removeEventListener(\"resize\", scrollListener);\n        }\n    };\n}\nfunction observeTimeline(update, timeline) {\n    let prevProgress;\n    const onFrame = ()=>{\n        const { currentTime } = timeline;\n        const percentage = currentTime === null ? 0 : currentTime.value;\n        const progress = percentage / 100;\n        if (prevProgress !== progress) {\n            update(progress);\n        }\n        prevProgress = progress;\n    };\n    frame.update(onFrame, true);\n    return ()=>cancelFrame(onFrame);\n}\nfunction scrollTimelineFallback(param) {\n    let { source, container, axis = \"y\" } = param;\n    // Support legacy source argument. Deprecate later.\n    if (source) container = source;\n    // ScrollTimeline records progress as a percentage CSSUnitValue\n    const currentTime = {\n        value: 0\n    };\n    const cancel = scrollInfo((info)=>{\n        currentTime.value = info[axis].progress * 100;\n    }, {\n        container,\n        axis\n    });\n    return {\n        currentTime,\n        cancel\n    };\n}\nconst timelineCache = new Map();\nfunction getTimeline() {\n    let { source, container = document.documentElement, axis = \"y\" } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    // Support legacy source argument. Deprecate later.\n    if (source) container = source;\n    if (!timelineCache.has(container)) {\n        timelineCache.set(container, {});\n    }\n    const elementCache = timelineCache.get(container);\n    if (!elementCache[axis]) {\n        elementCache[axis] = supportsScrollTimeline() ? new ScrollTimeline({\n            source: container,\n            axis\n        }) : scrollTimelineFallback({\n            source: container,\n            axis\n        });\n    }\n    return elementCache[axis];\n}\n/**\n * If the onScroll function has two arguments, it's expecting\n * more specific information about the scroll from scrollInfo.\n */ function isOnScrollWithInfo(onScroll) {\n    return onScroll.length === 2;\n}\n/**\n * Currently, we only support element tracking with `scrollInfo`, though in\n * the future we can also offer ViewTimeline support.\n */ function needsElementTracking(options) {\n    return options && (options.target || options.offset);\n}\nfunction scrollFunction(onScroll, options) {\n    if (isOnScrollWithInfo(onScroll) || needsElementTracking(options)) {\n        return scrollInfo((info)=>{\n            onScroll(info[options.axis].progress, info);\n        }, options);\n    } else {\n        return observeTimeline(onScroll, getTimeline(options));\n    }\n}\nfunction scrollAnimation(animation, options) {\n    animation.flatten();\n    if (needsElementTracking(options)) {\n        animation.pause();\n        return scrollInfo((info)=>{\n            animation.time = animation.duration * info[options.axis].progress;\n        }, options);\n    } else {\n        const timeline = getTimeline(options);\n        if (animation.attachTimeline) {\n            return animation.attachTimeline(timeline, (valueAnimation)=>{\n                valueAnimation.pause();\n                return observeTimeline((progress)=>{\n                    valueAnimation.time = valueAnimation.duration * progress;\n                }, timeline);\n            });\n        } else {\n            return motionUtils.noop;\n        }\n    }\n}\nfunction scroll(onScroll) {\n    let { axis = \"y\", ...options } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const optionsWithDefaults = {\n        axis,\n        ...options\n    };\n    return typeof onScroll === \"function\" ? scrollFunction(onScroll, optionsWithDefaults) : scrollAnimation(onScroll, optionsWithDefaults);\n}\nconst thresholds = {\n    some: 0,\n    all: 1\n};\nfunction inView(elementOrSelector, onStart) {\n    let { root, margin: rootMargin, amount = \"some\" } = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    const elements = motionDom.resolveElements(elementOrSelector);\n    const activeIntersections = new WeakMap();\n    const onIntersectionChange = (entries)=>{\n        entries.forEach((entry)=>{\n            const onEnd = activeIntersections.get(entry.target);\n            /**\n             * If there's no change to the intersection, we don't need to\n             * do anything here.\n             */ if (entry.isIntersecting === Boolean(onEnd)) return;\n            if (entry.isIntersecting) {\n                const newOnEnd = onStart(entry);\n                if (typeof newOnEnd === \"function\") {\n                    activeIntersections.set(entry.target, newOnEnd);\n                } else {\n                    observer.unobserve(entry.target);\n                }\n            } else if (onEnd) {\n                onEnd(entry);\n                activeIntersections.delete(entry.target);\n            }\n        });\n    };\n    const observer = new IntersectionObserver(onIntersectionChange, {\n        root,\n        rootMargin,\n        threshold: typeof amount === \"number\" ? amount : thresholds[amount]\n    });\n    elements.forEach((element)=>observer.observe(element));\n    return ()=>observer.disconnect();\n}\nfunction steps(numSteps) {\n    let direction = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"end\";\n    return (progress)=>{\n        progress = direction === \"end\" ? Math.min(progress, 0.999) : Math.max(progress, 0.001);\n        const expanded = progress * numSteps;\n        const rounded = direction === \"end\" ? Math.floor(expanded) : Math.ceil(expanded);\n        return clamp(0, 1, rounded / numSteps);\n    };\n}\nfunction getOriginIndex(from, total) {\n    if (from === \"first\") {\n        return 0;\n    } else {\n        const lastIndex = total - 1;\n        return from === \"last\" ? lastIndex : lastIndex / 2;\n    }\n}\nfunction stagger() {\n    let duration = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0.1, { startDelay = 0, from = 0, ease } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    return (i, total)=>{\n        const fromIndex = typeof from === \"number\" ? from : getOriginIndex(from, total);\n        const distance = Math.abs(fromIndex - i);\n        let delay = duration * distance;\n        if (ease) {\n            const maxDelay = total * duration;\n            const easingFunction = easingDefinitionToFunction(ease);\n            delay = easingFunction(delay / maxDelay) * maxDelay;\n        }\n        return startDelay + delay;\n    };\n}\nconst isCustomValueType = (v)=>{\n    return v && typeof v === \"object\" && v.mix;\n};\nconst getMixer = (v)=>isCustomValueType(v) ? v.mix : undefined;\nfunction transform() {\n    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n        args[_key] = arguments[_key];\n    }\n    const useImmediate = !Array.isArray(args[0]);\n    const argOffset = useImmediate ? 0 : -1;\n    const inputValue = args[0 + argOffset];\n    const inputRange = args[1 + argOffset];\n    const outputRange = args[2 + argOffset];\n    const options = args[3 + argOffset];\n    const interpolator = interpolate(inputRange, outputRange, {\n        mixer: getMixer(outputRange[0]),\n        ...options\n    });\n    return useImmediate ? interpolator(inputValue) : interpolator;\n}\n/**\n * @deprecated\n *\n * Import as `frame` instead.\n */ const sync = frame;\n/**\n * @deprecated\n *\n * Use cancelFrame(callback) instead.\n */ const cancelSync = stepsOrder.reduce((acc, key)=>{\n    acc[key] = (process)=>cancelFrame(process);\n    return acc;\n}, {});\nconst { schedule: microtask, cancel: cancelMicrotask } = createRenderBatcher(queueMicrotask, false);\nconst metrics = {\n    type: \"projectionFrame\",\n    totalNodes: 0,\n    resolvedTargetDeltas: 0,\n    recalculatedProjection: 0\n};\nconst isDebug =  true && window.MotionDebug !== undefined;\nconst transformAxes = [\n    \"\",\n    \"X\",\n    \"Y\",\n    \"Z\"\n];\nconst hiddenVisibility = {\n    visibility: \"hidden\"\n};\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */ const animationTarget = 1000;\nlet id$1 = 0;\nfunction resetDistortingTransform(key, visualElement, values, sharedAnimationValues) {\n    const { latestValues } = visualElement;\n    // Record the distorting transform and then temporarily set it to 0\n    if (latestValues[key]) {\n        values[key] = latestValues[key];\n        visualElement.setStaticValue(key, 0);\n        if (sharedAnimationValues) {\n            sharedAnimationValues[key] = 0;\n        }\n    }\n}\nfunction cancelTreeOptimisedTransformAnimations(projectionNode) {\n    projectionNode.hasCheckedOptimisedAppear = true;\n    if (projectionNode.root === projectionNode) return;\n    const { visualElement } = projectionNode.options;\n    if (!visualElement) return;\n    const appearId = getOptimisedAppearId(visualElement);\n    if (window.MotionHasOptimisedAnimation(appearId, \"transform\")) {\n        const { layout, layoutId } = projectionNode.options;\n        window.MotionCancelOptimisedAnimation(appearId, \"transform\", frame, !(layout || layoutId));\n    }\n    const { parent } = projectionNode;\n    if (parent && !parent.hasCheckedOptimisedAppear) {\n        cancelTreeOptimisedTransformAnimations(parent);\n    }\n}\nfunction createProjectionNode$1(param) {\n    let { attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform } = param;\n    return class ProjectionNode {\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name) {\n            for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                args[_key - 1] = arguments[_key];\n            }\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager && subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        /**\n         * Lifecycles\n         */ mount(instance) {\n            let isLayoutDirty = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.root.hasTreeAnimated;\n            if (this.instance) return;\n            this.isSVG = isSVGElement(instance);\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            this.parent && this.parent.children.add(this);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = ()=>this.root.updateBlockedByResize = false;\n                attachResizeListener(instance, ()=>{\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false && visualElement && (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", (param)=>{\n                    let { delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout } = param;\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = this.options.transition || visualElement.getDefaultTransition() || defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */ const targetChanged = !this.targetLayout || !boxEqualsRounded(this.targetLayout, newLayout) || hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */ const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (this.options.layoutRoot || this.resumeFrom && this.resumeFrom.instance || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !this.currentAnimation)) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...getValueTransition$1(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete\n                        };\n                        if (visualElement.shouldReduceMotion || this.options.layoutRoot) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    } else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */ if (!hasLayoutChanged) {\n                            finishAnimation(this);\n                        }\n                        if (this.isLead() && this.options.onExitComplete) {\n                            this.options.onExitComplete();\n                        }\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            const stack = this.getStack();\n            stack && stack.remove(this);\n            this.parent && this.parent.children.delete(this);\n            this.instance = undefined;\n            cancelFrame(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            return this.isAnimationBlocked || this.parent && this.parent.isTreeAnimationBlocked() || false;\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            if (this.isUpdateBlocked()) return;\n            this.isUpdating = true;\n            this.nodes && this.nodes.forEach(resetSkewAndRotation);\n            this.animationId++;\n        }\n        getTransformTemplate() {\n            const { visualElement } = this.options;\n            return visualElement && visualElement.getProps().transformTemplate;\n        }\n        willUpdate() {\n            let shouldNotifyListeners = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;\n            this.root.hasTreeAnimated = true;\n            if (this.root.isUpdateBlocked()) {\n                this.options.onExitComplete && this.options.onExitComplete();\n                return;\n            }\n            /**\n             * If we're running optimised appear animations then these must be\n             * cancelled before measuring the DOM. This is so we can measure\n             * the true layout of the element rather than the WAAPI animation\n             * which will be unaffected by the resetSkewAndRotate step.\n             *\n             * Note: This is a DOM write. Worst case scenario is this is sandwiched\n             * between other snapshot reads which will cause unnecessary style recalculations.\n             * This has to happen here though, as we don't yet know which nodes will need\n             * snapshots in startUpdate(), but we only want to cancel optimised animations\n             * if a layout animation measurement is actually going to be affected by them.\n             */ if (window.MotionCancelOptimisedAnimation && !this.hasCheckedOptimisedAppear) {\n                cancelTreeOptimisedTransformAnimations(this);\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty) return;\n            this.isLayoutDirty = true;\n            for(let i = 0; i < this.path.length; i++){\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n                if (node.options.layoutRoot) {\n                    node.willUpdate(false);\n                }\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout) return;\n            const transformTemplate = this.getTransformTemplate();\n            this.prevTransformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, \"\") : undefined;\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        update() {\n            this.updateScheduled = false;\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating) {\n                this.nodes.forEach(clearIsLayoutDirty);\n            }\n            this.isUpdating = false;\n            /**\n             * Write\n             */ this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */ // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */ // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            /**\n             * Manually flush any pending updates. Ideally\n             * we could leave this to the following requestAnimationFrame but this seems\n             * to leave a flash of incorrectly styled content.\n             */ const now = time.now();\n            frameData.delta = clamp(0, 1000 / 60, now - frameData.timestamp);\n            frameData.timestamp = now;\n            frameData.isProcessing = true;\n            frameSteps.update.process(frameData);\n            frameSteps.preRender.process(frameData);\n            frameSteps.render.process(frameData);\n            frameData.isProcessing = false;\n        }\n        didUpdate() {\n            if (!this.updateScheduled) {\n                this.updateScheduled = true;\n                microtask.read(this.scheduleUpdate);\n            }\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            if (!this.projectionUpdateScheduled) {\n                this.projectionUpdateScheduled = true;\n                frame.preRender(this.updateProjection, false, true);\n            }\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */ frame.postRender(()=>{\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                } else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */ updateSnapshot() {\n            if (this.snapshot || !this.instance) return;\n            this.snapshot = this.measure();\n        }\n        updateLayout() {\n            if (!this.instance) return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */ if (this.resumeFrom && !this.resumeFrom.instance) {\n                for(let i = 0; i < this.path.length; i++){\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            const { visualElement } = this.options;\n            visualElement && visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n        }\n        updateScroll() {\n            let phase = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"measure\";\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll && this.scroll.animationId === this.root.animationId && this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement) {\n                const isRoot = checkIsScrollRoot(this.instance);\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot,\n                    offset: measureScroll(this.instance),\n                    wasRoot: this.scroll ? this.scroll.isRoot : isRoot\n                };\n            }\n        }\n        resetTransform() {\n            if (!resetTransform) return;\n            const isResetRequested = this.isLayoutDirty || this.shouldResetTransform || this.options.alwaysMeasureLayout;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = this.getTransformTemplate();\n            const transformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, \"\") : undefined;\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested && (hasProjection || hasTransform(this.latestValues) || transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure() {\n            let removeTransform = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */ if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id\n            };\n        }\n        measurePageBox() {\n            var _a;\n            const { visualElement } = this.options;\n            if (!visualElement) return createBox();\n            const box = visualElement.measureViewportBox();\n            const wasInScrollRoot = ((_a = this.scroll) === null || _a === void 0 ? void 0 : _a.wasRoot) || this.path.some(checkNodeWasScrollRoot);\n            if (!wasInScrollRoot) {\n                // Remove viewport scroll to give page-relative coordinates\n                const { scroll } = this.root;\n                if (scroll) {\n                    translateAxis(box.x, scroll.offset.x);\n                    translateAxis(box.y, scroll.offset.y);\n                }\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            var _a;\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            if ((_a = this.scroll) === null || _a === void 0 ? void 0 : _a.wasRoot) {\n                return boxWithoutScroll;\n            }\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */ for(let i = 0; i < this.path.length; i++){\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */ if (scroll.wasRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box) {\n            let transformOnly = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for(let i = 0; i < this.path.length; i++){\n                const node = this.path[i];\n                if (!transformOnly && node.options.layoutScroll && node.scroll && node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y\n                    });\n                }\n                if (!hasTransform(node.latestValues)) continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for(let i = 0; i < this.path.length; i++){\n                const node = this.path[i];\n                if (!node.instance) continue;\n                if (!hasTransform(node.latestValues)) continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n            this.isProjectionDirty = true;\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        forceRelativeParentToResolveTarget() {\n            if (!this.relativeParent) return;\n            /**\n             * If the parent target isn't up-to-date, force it to update.\n             * This is an unfortunate de-optimisation as it means any updating relative\n             * projection will cause all the relative parents to recalculate back\n             * up the tree.\n             */ if (this.relativeParent.resolvedRelativeTargetAt !== frameData.timestamp) {\n                this.relativeParent.resolveTargetDelta(true);\n            }\n        }\n        resolveTargetDelta() {\n            let forceRecalculation = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;\n            var _a;\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */ const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */ const canSkip = !(forceRecalculation || isShared && this.isSharedProjectionDirty || this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) || this.attemptToResolveRelativeTarget || this.root.updateBlockedByResize);\n            if (canSkip) return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */ if (!this.layout || !(layout || layoutId)) return;\n            this.resolvedRelativeTargetAt = frameData.timestamp;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */ if (!this.targetDelta && !this.relativeTarget) {\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent && relativeParent.layout && this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                } else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */ if (!this.relativeTarget && !this.targetDelta) return;\n            /**\n             * Lazy-init target data structure\n             */ if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */ if (this.relativeTarget && this.relativeTargetOrigin && this.relativeParent && this.relativeParent.target) {\n                this.forceRelativeParentToResolveTarget();\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n            /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */ } else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                } else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            } else {\n                /**\n                 * If no target, use own layout as target\n                 */ copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */ if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent && Boolean(relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !relativeParent.options.layoutScroll && relativeParent.target && this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                } else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * Increase debug counter for resolved target deltas\n             */ if (isDebug) {\n                metrics.resolvedTargetDeltas++;\n            }\n        }\n        getClosestProjectingParent() {\n            if (!this.parent || hasScale(this.parent.latestValues) || has2DTranslate(this.parent.latestValues)) {\n                return undefined;\n            }\n            if (this.parent.isProjecting()) {\n                return this.parent;\n            } else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        isProjecting() {\n            return Boolean((this.relativeTarget || this.targetDelta || this.options.layoutRoot) && this.layout);\n        }\n        calcProjection() {\n            var _a;\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            /**\n             * If this is a normal layout animation and neither this node nor its nearest projecting\n             * is dirty then we can't skip.\n             */ if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If this is a shared layout animation and this node's shared projection is dirty then\n             * we can't skip.\n             */ if (isShared && (this.isSharedProjectionDirty || this.isTransformDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If we have resolved the target this frame we must recalculate the\n             * projection to ensure it visually represents the internal calculations.\n             */ if (this.resolvedRelativeTargetAt === frameData.timestamp) {\n                canSkip = false;\n            }\n            if (canSkip) return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */ this.isTreeAnimating = Boolean(this.parent && this.parent.isTreeAnimating || this.currentAnimation || this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId)) return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */ copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Record previous tree scales before updating.\n             */ const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */ applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n            /**\n             * If this layer needs to perform scale correction but doesn't have a target,\n             * use the layout as the target.\n             */ if (lead.layout && !lead.target && (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {\n                lead.target = lead.layout.layoutBox;\n                lead.targetWithTransforms = createBox();\n            }\n            const { target } = lead;\n            if (!target) {\n                /**\n                 * If we don't have a target to project into, but we were previously\n                 * projecting, we want to remove the stored transform and schedule\n                 * a render to ensure the elements reflect the removed transform.\n                 */ if (this.prevProjectionDelta) {\n                    this.createProjectionDeltas();\n                    this.scheduleRender();\n                }\n                return;\n            }\n            if (!this.projectionDelta || !this.prevProjectionDelta) {\n                this.createProjectionDeltas();\n            } else {\n                copyAxisDeltaInto(this.prevProjectionDelta.x, this.projectionDelta.x);\n                copyAxisDeltaInto(this.prevProjectionDelta.y, this.projectionDelta.y);\n            }\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */ calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            if (this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY || !axisDeltaEquals(this.projectionDelta.x, this.prevProjectionDelta.x) || !axisDeltaEquals(this.projectionDelta.y, this.prevProjectionDelta.y)) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n            /**\n             * Increase debug counter for recalculated projections\n             */ if (isDebug) {\n                metrics.recalculatedProjection++;\n            }\n        }\n        hide() {\n            this.isVisible = false;\n        // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n        // TODO: Schedule render\n        }\n        scheduleRender() {\n            let notifyAll = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;\n            var _a;\n            (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.scheduleRender();\n            if (notifyAll) {\n                const stack = this.getStack();\n                stack && stack.scheduleRender();\n            }\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        createProjectionDeltas() {\n            this.prevProjectionDelta = createDelta();\n            this.projectionDelta = createDelta();\n            this.projectionDeltaWithTransform = createDelta();\n        }\n        setAnimationOrigin(delta) {\n            let hasOnlyRelativeTargetChanged = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = snapshot ? snapshot.latestValues : {};\n            const mixedValues = {\n                ...this.latestValues\n            };\n            const targetDelta = createDelta();\n            if (!this.relativeParent || !this.relativeParent.options.layoutRoot) {\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\n            }\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const snapshotSource = snapshot ? snapshot.source : undefined;\n            const layoutSource = this.layout ? this.layout.source : undefined;\n            const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n            const stack = this.getStack();\n            const isOnlyMember = !stack || stack.members.length <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            let prevRelativeTarget;\n            this.mixTargetDelta = (latest)=>{\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget && this.relativeTargetOrigin && this.layout && this.relativeParent && this.relativeParent.layout) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                    /**\n                     * If this is an unchanged relative target we can consider the\n                     * projection not dirty.\n                     */ if (prevRelativeTarget && boxEquals(this.relativeTarget, prevRelativeTarget)) {\n                        this.isProjectionDirty = false;\n                    }\n                    if (!prevRelativeTarget) prevRelativeTarget = createBox();\n                    copyBoxInto(prevRelativeTarget, this.relativeTarget);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n        }\n        startAnimation(options) {\n            this.notifyListeners(\"animationStart\");\n            this.currentAnimation && this.currentAnimation.stop();\n            if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n                this.resumingFrom.currentAnimation.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelFrame(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */ this.pendingAnimation = frame.update(()=>{\n                globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = animateSingleValue(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest)=>{\n                        this.mixTargetDelta(latest);\n                        options.onUpdate && options.onUpdate(latest);\n                    },\n                    onComplete: ()=>{\n                        options.onComplete && options.onComplete();\n                        this.completeAnimation();\n                    }\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            const stack = this.getStack();\n            stack && stack.exitAnimationComplete();\n            this.resumingFrom = this.currentAnimation = this.animationValues = undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            if (this.currentAnimation) {\n                this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout) return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */ if (this !== lead && this.layout && layout && shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */ transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */ calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            const config = node.options.initialPromotionConfig;\n            node.promote({\n                transition: config ? config.transition : undefined,\n                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity ? config.shouldPreserveFollowOpacity(node) : undefined\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId) return this.root.sharedNodes.get(layoutId);\n        }\n        promote() {\n            let { needsReset, transition, preserveFollowOpacity } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n            const stack = this.getStack();\n            if (stack) stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition) this.setOptions({\n                transition\n            });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            } else {\n                return false;\n            }\n        }\n        resetSkewAndRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement) return;\n            // If there's no detected skew or rotation values, we can early return without a forced render.\n            let hasDistortingTransform = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */ const { latestValues } = visualElement;\n            if (latestValues.z || latestValues.rotate || latestValues.rotateX || latestValues.rotateY || latestValues.rotateZ || latestValues.skewX || latestValues.skewY) {\n                hasDistortingTransform = true;\n            }\n            // If there's no distorting values, we don't need to do any more.\n            if (!hasDistortingTransform) return;\n            const resetValues = {};\n            if (latestValues.z) {\n                resetDistortingTransform(\"z\", visualElement, resetValues, this.animationValues);\n            }\n            // Check the skew and rotate value of all axes and reset to 0\n            for(let i = 0; i < transformAxes.length; i++){\n                resetDistortingTransform(\"rotate\".concat(transformAxes[i]), visualElement, resetValues, this.animationValues);\n                resetDistortingTransform(\"skew\".concat(transformAxes[i]), visualElement, resetValues, this.animationValues);\n            }\n            // Force a render of this element to apply the transform with all skews and rotations\n            // set to 0.\n            visualElement.render();\n            // Put back all the values we reset\n            for(const key in resetValues){\n                visualElement.setStaticValue(key, resetValues[key]);\n                if (this.animationValues) {\n                    this.animationValues[key] = resetValues[key];\n                }\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp) {\n            var _a, _b;\n            if (!this.instance || this.isSVG) return undefined;\n            if (!this.isVisible) {\n                return hiddenVisibility;\n            }\n            const styles = {\n                visibility: \"\"\n            };\n            const transformTemplate = this.getTransformTemplate();\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents = resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate ? transformTemplate(this.latestValues, \"\") : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity = this.latestValues.opacity !== undefined ? this.latestValues.opacity : 1;\n                    emptyStyles.pointerEvents = resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = \"\".concat(x.origin * 100, \"% \").concat(y.origin * 100, \"% 0\");\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */ styles.opacity = lead === this ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;\n            } else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */ styles.opacity = lead === this ? valuesToRender.opacity !== undefined ? valuesToRender.opacity : \"\" : valuesToRender.opacityExit !== undefined ? valuesToRender.opacityExit : 0;\n            }\n            /**\n             * Apply scale correction\n             */ for(const key in scaleCorrectors){\n                if (valuesToRender[key] === undefined) continue;\n                const { correct, applyTo } = scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */ const corrected = styles.transform === \"none\" ? valuesToRender[key] : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for(let i = 0; i < num; i++){\n                        styles[applyTo[i]] = corrected;\n                    }\n                } else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */ if (this.options.layoutId) {\n                styles.pointerEvents = lead === this ? resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\" : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node)=>{\n                var _a;\n                return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n            });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n        constructor(latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()){\n            /**\n             * A unique ID generated for every projection node.\n             */ this.id = id$1++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */ this.animationId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */ this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */ this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */ this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */ this.isLayoutDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this node needs\n             * recalculating as a result of an updated transform or layout animation.\n             */ this.isProjectionDirty = false;\n            /**\n             * Flag to true if the layout *or* transform has changed. This then gets propagated\n             * throughout the projection tree, forcing any element below to recalculate on the next frame.\n             */ this.isSharedProjectionDirty = false;\n            /**\n             * Flag transform dirty. This gets propagated throughout the whole tree but is only\n             * respected by shared nodes.\n             */ this.isTransformDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */ this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */ this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */ this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */ this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */ this.shouldResetTransform = false;\n            /**\n             * Store whether this node has been checked for optimised appear animations. As\n             * effects fire bottom-up, and we want to look up the tree for appear animations,\n             * this makes sure we only check each path once, stopping at nodes that\n             * have already been checked.\n             */ this.hasCheckedOptimisedAppear = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */ this.treeScale = {\n                x: 1,\n                y: 1\n            };\n            /**\n             *\n             */ this.eventHandlers = new Map();\n            this.hasTreeAnimated = false;\n            // Note: Currently only running on root node\n            this.updateScheduled = false;\n            this.scheduleUpdate = ()=>this.update();\n            this.projectionUpdateScheduled = false;\n            this.checkUpdateFailed = ()=>{\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */ this.updateProjection = ()=>{\n                this.projectionUpdateScheduled = false;\n                /**\n                 * Reset debug counts. Manually resetting rather than creating a new\n                 * object each frame.\n                 */ if (isDebug) {\n                    metrics.totalNodes = metrics.resolvedTargetDeltas = metrics.recalculatedProjection = 0;\n                }\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n                this.nodes.forEach(cleanDirtyNodes);\n                if (isDebug) {\n                    window.MotionDebug.record(metrics);\n                }\n            };\n            /**\n             * Frame calculations\n             */ this.resolvedRelativeTargetAt = 0.0;\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */ // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [\n                ...parent.path,\n                parent\n            ] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            for(let i = 0; i < this.path.length; i++){\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this) this.nodes = new FlatTree();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() && node.layout && snapshot && node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis)=>{\n                const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        } else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis)=>{\n                const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n                /**\n                 * Ensure relative target gets resized and rerendererd\n                 */ if (node.relativeTarget && !node.currentAnimation) {\n                    node.isProjectionDirty = true;\n                    node.relativeTarget[axis].max = node.relativeTarget[axis].min + length;\n                }\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        } else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */ if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                    if (relativeParent.options.layoutRoot) {\n                        node.relativeTarget = relativeLayout;\n                        node.relativeTargetOrigin = relativeSnapshot;\n                        node.relativeParent = relativeParent;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged\n        });\n    } else if (node.isLead()) {\n        const { onExitComplete } = node.options;\n        onExitComplete && onExitComplete();\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */ node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Increase debug counter for nodes encountered this frame\n     */ if (isDebug) {\n        metrics.totalNodes++;\n    }\n    if (!node.parent) return;\n    /**\n     * If this node isn't projecting, propagate isProjectionDirty. It will have\n     * no performance impact but it will allow the next child that *is* projecting\n     * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n     * correcting.\n     */ if (!node.isProjecting()) {\n        node.isProjectionDirty = node.parent.isProjectionDirty;\n    }\n    /**\n     * Propagate isSharedProjectionDirty and isTransformDirty\n     * throughout the whole tree. A future revision can take another look at\n     * this but for safety we still recalcualte shared nodes.\n     */ node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty || node.parent.isProjectionDirty || node.parent.isSharedProjectionDirty));\n    node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\nfunction cleanDirtyNodes(node) {\n    node.isProjectionDirty = node.isSharedProjectionDirty = node.isTransformDirty = false;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction clearIsLayoutDirty(node) {\n    node.isLayoutDirty = false;\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n    node.isProjectionDirty = true;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetSkewAndRotation(node) {\n    node.resetSkewAndRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mixNumber$1(delta.translate, 0, p);\n    output.scale = mixNumber$1(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mixNumber$1(from.min, to.min, p);\n    output.max = mixNumber$1(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return node.animationValues && node.animationValues.opacityExit !== undefined;\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [\n        0.4,\n        0,\n        0.1,\n        1\n    ]\n};\nconst userAgentContains = (string)=>typeof navigator !== \"undefined\" && navigator.userAgent && navigator.userAgent.toLowerCase().includes(string);\n/**\n * Measured bounding boxes must be rounded in Safari and\n * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements\n * can appear to jump.\n */ const roundPoint = userAgentContains(\"applewebkit/\") && !userAgentContains(\"chrome/\") ? Math.round : motionUtils.noop;\nfunction roundAxis(axis) {\n    // Round to the nearest .5 pixels to support subpixel layouts\n    axis.min = roundPoint(axis.min);\n    axis.max = roundPoint(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return animationType === \"position\" || animationType === \"preserve-aspect\" && !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2);\n}\nfunction checkNodeWasScrollRoot(node) {\n    var _a;\n    return node !== node.root && ((_a = node.scroll) === null || _a === void 0 ? void 0 : _a.wasRoot);\n}\nconst DocumentProjectionNode = createProjectionNode$1({\n    attachResizeListener: (ref, notify)=>addDomEvent(ref, \"resize\", notify),\n    measureScroll: ()=>({\n            x: document.documentElement.scrollLeft || document.body.scrollLeft,\n            y: document.documentElement.scrollTop || document.body.scrollTop\n        }),\n    checkIsScrollRoot: ()=>true\n});\nconst rootProjectionNode = {\n    current: undefined\n};\nconst HTMLProjectionNode = createProjectionNode$1({\n    measureScroll: (instance)=>({\n            x: instance.scrollLeft,\n            y: instance.scrollTop\n        }),\n    defaultParent: ()=>{\n        if (!rootProjectionNode.current) {\n            const documentNode = new DocumentProjectionNode({});\n            documentNode.mount(window);\n            documentNode.setOptions({\n                layoutScroll: true\n            });\n            rootProjectionNode.current = documentNode;\n        }\n        return rootProjectionNode.current;\n    },\n    resetTransform: (instance, value)=>{\n        instance.style.transform = value !== undefined ? value : \"none\";\n    },\n    checkIsScrollRoot: (instance)=>Boolean(window.getComputedStyle(instance).position === \"fixed\")\n});\nconst notify = (node)=>!node.isLayoutDirty && node.willUpdate(false);\nfunction nodeGroup() {\n    const nodes = new Set();\n    const subscriptions = new WeakMap();\n    const dirtyAll = ()=>nodes.forEach(notify);\n    return {\n        add: (node)=>{\n            nodes.add(node);\n            subscriptions.set(node, node.addEventListener(\"willUpdate\", dirtyAll));\n        },\n        remove: (node)=>{\n            nodes.delete(node);\n            const unsubscribe = subscriptions.get(node);\n            if (unsubscribe) {\n                unsubscribe();\n                subscriptions.delete(node);\n            }\n            dirtyAll();\n        },\n        dirty: dirtyAll\n    };\n}\nfunction pixelsToPercent(pixels, axis) {\n    if (axis.max === axis.min) return 0;\n    return pixels / (axis.max - axis.min) * 100;\n}\n/**\n * We always correct borderRadius as a percentage rather than pixels to reduce paints.\n * For example, if you are projecting a box that is 100px wide with a 10px borderRadius\n * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%\n * borderRadius in both states. If we animate between the two in pixels that will trigger\n * a paint each time. If we animate between the two in percentage we'll avoid a paint.\n */ const correctBorderRadius = {\n    correct: (latest, node)=>{\n        if (!node.target) return latest;\n        /**\n         * If latest is a string, if it's a percentage we can return immediately as it's\n         * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.\n         */ if (typeof latest === \"string\") {\n            if (px.test(latest)) {\n                latest = parseFloat(latest);\n            } else {\n                return latest;\n            }\n        }\n        /**\n         * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that\n         * pixel value as a percentage of each axis\n         */ const x = pixelsToPercent(latest, node.target.x);\n        const y = pixelsToPercent(latest, node.target.y);\n        return \"\".concat(x, \"% \").concat(y, \"%\");\n    }\n};\nconst correctBoxShadow = {\n    correct: (latest, param)=>{\n        let { treeScale, projectionDelta } = param;\n        const original = latest;\n        const shadow = complex.parse(latest);\n        // TODO: Doesn't support multiple shadows\n        if (shadow.length > 5) return original;\n        const template = complex.createTransformer(latest);\n        const offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n        // Calculate the overall context scale\n        const xScale = projectionDelta.x.scale * treeScale.x;\n        const yScale = projectionDelta.y.scale * treeScale.y;\n        shadow[0 + offset] /= xScale;\n        shadow[1 + offset] /= yScale;\n        /**\n         * Ideally we'd correct x and y scales individually, but because blur and\n         * spread apply to both we have to take a scale average and apply that instead.\n         * We could potentially improve the outcome of this by incorporating the ratio between\n         * the two scales.\n         */ const averageScale = mixNumber$1(xScale, yScale, 0.5);\n        // Blur\n        if (typeof shadow[2 + offset] === \"number\") shadow[2 + offset] /= averageScale;\n        // Spread\n        if (typeof shadow[3 + offset] === \"number\") shadow[3 + offset] /= averageScale;\n        return template(shadow);\n    }\n};\n/**\n * @public\n */ const PresenceContext = React.createContext(null);\n/**\n * When a component is the child of `AnimatePresence`, it can use `usePresence`\n * to access information about whether it's still present in the React tree.\n *\n * ```jsx\n * import { usePresence } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const [isPresent, safeToRemove] = usePresence()\n *\n *   useEffect(() => {\n *     !isPresent && setTimeout(safeToRemove, 1000)\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * If `isPresent` is `false`, it means that a component has been removed the tree, but\n * `AnimatePresence` won't really remove it until `safeToRemove` has been called.\n *\n * @public\n */ function usePresence() {\n    _s();\n    const context = React.useContext(PresenceContext);\n    if (context === null) return [\n        true,\n        null\n    ];\n    const { isPresent, onExitComplete, register } = context;\n    // It's safe to call the following hooks conditionally (after an early return) because the context will always\n    // either be null or non-null for the lifespan of the component.\n    const id = React.useId();\n    React.useEffect(()=>register(id), []);\n    const safeToRemove = React.useCallback(()=>onExitComplete && onExitComplete(id), [\n        id,\n        onExitComplete\n    ]);\n    return !isPresent && onExitComplete ? [\n        false,\n        safeToRemove\n    ] : [\n        true\n    ];\n}\n_s(usePresence, \"GY2Qss37g7I0L0lHt/6OFO+hjmE=\");\n/**\n * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.\n * There is no `safeToRemove` function.\n *\n * ```jsx\n * import { useIsPresent } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const isPresent = useIsPresent()\n *\n *   useEffect(() => {\n *     !isPresent && console.log(\"I've been removed!\")\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * @public\n */ function useIsPresent() {\n    _s1();\n    return isPresent(React.useContext(PresenceContext));\n}\n_s1(useIsPresent, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nfunction isPresent(context) {\n    return context === null ? true : context.isPresent;\n}\nconst LayoutGroupContext = React.createContext({});\n/**\n * Internal, exported only for usage in Framer\n */ const SwitchLayoutGroupContext = React.createContext({});\nclass MeasureLayoutWithContext extends React.Component {\n    /**\n     * This only mounts projection nodes for components that\n     * need measuring, we might want to do it for all components\n     * in order to incorporate transforms\n     */ componentDidMount() {\n        const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;\n        const { projection } = visualElement;\n        addScaleCorrector(defaultScaleCorrectors);\n        if (projection) {\n            if (layoutGroup.group) layoutGroup.group.add(projection);\n            if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {\n                switchLayoutGroup.register(projection);\n            }\n            projection.root.didUpdate();\n            projection.addEventListener(\"animationComplete\", ()=>{\n                this.safeToRemove();\n            });\n            projection.setOptions({\n                ...projection.options,\n                onExitComplete: ()=>this.safeToRemove()\n            });\n        }\n        globalProjectionState.hasEverUpdated = true;\n    }\n    getSnapshotBeforeUpdate(prevProps) {\n        const { layoutDependency, visualElement, drag, isPresent } = this.props;\n        const projection = visualElement.projection;\n        if (!projection) return null;\n        /**\n         * TODO: We use this data in relegate to determine whether to\n         * promote a previous element. There's no guarantee its presence data\n         * will have updated by this point - if a bug like this arises it will\n         * have to be that we markForRelegation and then find a new lead some other way,\n         * perhaps in didUpdate\n         */ projection.isPresent = isPresent;\n        if (drag || prevProps.layoutDependency !== layoutDependency || layoutDependency === undefined) {\n            projection.willUpdate();\n        } else {\n            this.safeToRemove();\n        }\n        if (prevProps.isPresent !== isPresent) {\n            if (isPresent) {\n                projection.promote();\n            } else if (!projection.relegate()) {\n                /**\n                 * If there's another stack member taking over from this one,\n                 * it's in charge of the exit animation and therefore should\n                 * be in charge of the safe to remove. Otherwise we call it here.\n                 */ frame.postRender(()=>{\n                    const stack = projection.getStack();\n                    if (!stack || !stack.members.length) {\n                        this.safeToRemove();\n                    }\n                });\n            }\n        }\n        return null;\n    }\n    componentDidUpdate() {\n        const { projection } = this.props.visualElement;\n        if (projection) {\n            projection.root.didUpdate();\n            microtask.postRender(()=>{\n                if (!projection.currentAnimation && projection.isLead()) {\n                    this.safeToRemove();\n                }\n            });\n        }\n    }\n    componentWillUnmount() {\n        const { visualElement, layoutGroup, switchLayoutGroup: promoteContext } = this.props;\n        const { projection } = visualElement;\n        if (projection) {\n            projection.scheduleCheckAfterUnmount();\n            if (layoutGroup && layoutGroup.group) layoutGroup.group.remove(projection);\n            if (promoteContext && promoteContext.deregister) promoteContext.deregister(projection);\n        }\n    }\n    safeToRemove() {\n        const { safeToRemove } = this.props;\n        safeToRemove && safeToRemove();\n    }\n    render() {\n        return null;\n    }\n}\nfunction MeasureLayout(props) {\n    _s2();\n    const [isPresent, safeToRemove] = usePresence();\n    const layoutGroup = React.useContext(LayoutGroupContext);\n    return jsxRuntime.jsx(MeasureLayoutWithContext, {\n        ...props,\n        layoutGroup: layoutGroup,\n        switchLayoutGroup: React.useContext(SwitchLayoutGroupContext),\n        isPresent: isPresent,\n        safeToRemove: safeToRemove\n    });\n}\n_s2(MeasureLayout, \"yNGbDR7vVbW3g5x+bSOH3lDhKv0=\", false, function() {\n    return [\n        usePresence\n    ];\n});\n_c1 = MeasureLayout;\nconst defaultScaleCorrectors = {\n    borderRadius: {\n        ...correctBorderRadius,\n        applyTo: [\n            \"borderTopLeftRadius\",\n            \"borderTopRightRadius\",\n            \"borderBottomLeftRadius\",\n            \"borderBottomRightRadius\"\n        ]\n    },\n    borderTopLeftRadius: correctBorderRadius,\n    borderTopRightRadius: correctBorderRadius,\n    borderBottomLeftRadius: correctBorderRadius,\n    borderBottomRightRadius: correctBorderRadius,\n    boxShadow: correctBoxShadow\n};\nconst drag = {\n    pan: {\n        Feature: PanGesture\n    },\n    drag: {\n        Feature: DragGesture,\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout\n    }\n};\nfunction handleHoverEvent(node, event, lifecycle) {\n    const { props } = node;\n    if (node.animationState && props.whileHover) {\n        node.animationState.setActive(\"whileHover\", lifecycle === \"Start\");\n    }\n    const eventName = \"onHover\" + lifecycle;\n    const callback = props[eventName];\n    if (callback) {\n        frame.postRender(()=>callback(event, extractEventInfo(event)));\n    }\n}\nclass HoverGesture extends Feature {\n    mount() {\n        const { current } = this.node;\n        if (!current) return;\n        this.unmount = motionDom.hover(current, (startEvent)=>{\n            handleHoverEvent(this.node, startEvent, \"Start\");\n            return (endEvent)=>handleHoverEvent(this.node, endEvent, \"End\");\n        });\n    }\n    unmount() {}\n}\nclass FocusGesture extends Feature {\n    onFocus() {\n        let isFocusVisible = false;\n        /**\n         * If this element doesn't match focus-visible then don't\n         * apply whileHover. But, if matches throws that focus-visible\n         * is not a valid selector then in that browser outline styles will be applied\n         * to the element by default and we want to match that behaviour with whileFocus.\n         */ try {\n            isFocusVisible = this.node.current.matches(\":focus-visible\");\n        } catch (e) {\n            isFocusVisible = true;\n        }\n        if (!isFocusVisible || !this.node.animationState) return;\n        this.node.animationState.setActive(\"whileFocus\", true);\n        this.isActive = true;\n    }\n    onBlur() {\n        if (!this.isActive || !this.node.animationState) return;\n        this.node.animationState.setActive(\"whileFocus\", false);\n        this.isActive = false;\n    }\n    mount() {\n        this.unmount = pipe(addDomEvent(this.node.current, \"focus\", ()=>this.onFocus()), addDomEvent(this.node.current, \"blur\", ()=>this.onBlur()));\n    }\n    unmount() {}\n    constructor(){\n        super(...arguments);\n        this.isActive = false;\n    }\n}\nfunction handlePressEvent(node, event, lifecycle) {\n    const { props } = node;\n    if (node.animationState && props.whileTap) {\n        node.animationState.setActive(\"whileTap\", lifecycle === \"Start\");\n    }\n    const eventName = \"onTap\" + (lifecycle === \"End\" ? \"\" : lifecycle);\n    const callback = props[eventName];\n    if (callback) {\n        frame.postRender(()=>callback(event, extractEventInfo(event)));\n    }\n}\nclass PressGesture extends Feature {\n    mount() {\n        const { current } = this.node;\n        if (!current) return;\n        this.unmount = motionDom.press(current, (startEvent)=>{\n            handlePressEvent(this.node, startEvent, \"Start\");\n            return (endEvent, param)=>{\n                let { success } = param;\n                return handlePressEvent(this.node, endEvent, success ? \"End\" : \"Cancel\");\n            };\n        }, {\n            useGlobalTarget: this.node.props.globalTapTarget\n        });\n    }\n    unmount() {}\n}\n/**\n * Map an IntersectionHandler callback to an element. We only ever make one handler for one\n * element, so even though these handlers might all be triggered by different\n * observers, we can keep them in the same map.\n */ const observerCallbacks = new WeakMap();\n/**\n * Multiple observers can be created for multiple element/document roots. Each with\n * different settings. So here we store dictionaries of observers to each root,\n * using serialised settings (threshold/margin) as lookup keys.\n */ const observers = new WeakMap();\nconst fireObserverCallback = (entry)=>{\n    const callback = observerCallbacks.get(entry.target);\n    callback && callback(entry);\n};\nconst fireAllObserverCallbacks = (entries)=>{\n    entries.forEach(fireObserverCallback);\n};\nfunction initIntersectionObserver(param) {\n    let { root, ...options } = param;\n    const lookupRoot = root || document;\n    /**\n     * If we don't have an observer lookup map for this root, create one.\n     */ if (!observers.has(lookupRoot)) {\n        observers.set(lookupRoot, {});\n    }\n    const rootObservers = observers.get(lookupRoot);\n    const key = JSON.stringify(options);\n    /**\n     * If we don't have an observer for this combination of root and settings,\n     * create one.\n     */ if (!rootObservers[key]) {\n        rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, {\n            root,\n            ...options\n        });\n    }\n    return rootObservers[key];\n}\nfunction observeIntersection(element, options, callback) {\n    const rootInteresectionObserver = initIntersectionObserver(options);\n    observerCallbacks.set(element, callback);\n    rootInteresectionObserver.observe(element);\n    return ()=>{\n        observerCallbacks.delete(element);\n        rootInteresectionObserver.unobserve(element);\n    };\n}\nconst thresholdNames = {\n    some: 0,\n    all: 1\n};\nclass InViewFeature extends Feature {\n    startObserver() {\n        this.unmount();\n        const { viewport = {} } = this.node.getProps();\n        const { root, margin: rootMargin, amount = \"some\", once } = viewport;\n        const options = {\n            root: root ? root.current : undefined,\n            rootMargin,\n            threshold: typeof amount === \"number\" ? amount : thresholdNames[amount]\n        };\n        const onIntersectionUpdate = (entry)=>{\n            const { isIntersecting } = entry;\n            /**\n             * If there's been no change in the viewport state, early return.\n             */ if (this.isInView === isIntersecting) return;\n            this.isInView = isIntersecting;\n            /**\n             * Handle hasEnteredView. If this is only meant to run once, and\n             * element isn't visible, early return. Otherwise set hasEnteredView to true.\n             */ if (once && !isIntersecting && this.hasEnteredView) {\n                return;\n            } else if (isIntersecting) {\n                this.hasEnteredView = true;\n            }\n            if (this.node.animationState) {\n                this.node.animationState.setActive(\"whileInView\", isIntersecting);\n            }\n            /**\n             * Use the latest committed props rather than the ones in scope\n             * when this observer is created\n             */ const { onViewportEnter, onViewportLeave } = this.node.getProps();\n            const callback = isIntersecting ? onViewportEnter : onViewportLeave;\n            callback && callback(entry);\n        };\n        return observeIntersection(this.node.current, options, onIntersectionUpdate);\n    }\n    mount() {\n        this.startObserver();\n    }\n    update() {\n        if (typeof IntersectionObserver === \"undefined\") return;\n        const { props, prevProps } = this.node;\n        const hasOptionsChanged = [\n            \"amount\",\n            \"margin\",\n            \"root\"\n        ].some(hasViewportOptionChanged(props, prevProps));\n        if (hasOptionsChanged) {\n            this.startObserver();\n        }\n    }\n    unmount() {}\n    constructor(){\n        super(...arguments);\n        this.hasEnteredView = false;\n        this.isInView = false;\n    }\n}\nfunction hasViewportOptionChanged(param) {\n    let { viewport = {} } = param, { viewport: prevViewport = {} } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    return (name)=>viewport[name] !== prevViewport[name];\n}\nconst gestureAnimations = {\n    inView: {\n        Feature: InViewFeature\n    },\n    tap: {\n        Feature: PressGesture\n    },\n    focus: {\n        Feature: FocusGesture\n    },\n    hover: {\n        Feature: HoverGesture\n    }\n};\nconst layout = {\n    layout: {\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout\n    }\n};\n/**\n * @public\n */ const MotionConfigContext = React.createContext({\n    transformPagePoint: (p)=>p,\n    isStatic: false,\n    reducedMotion: \"never\"\n});\nconst MotionContext = React.createContext({});\nconst useIsomorphicLayoutEffect = isBrowser ? React.useLayoutEffect : React.useEffect;\nconst LazyContext = React.createContext({\n    strict: false\n});\nfunction useVisualElement(Component, visualState, props, createVisualElement, ProjectionNodeConstructor) {\n    _s3();\n    var _a, _b;\n    const { visualElement: parent } = React.useContext(MotionContext);\n    const lazyContext = React.useContext(LazyContext);\n    const presenceContext = React.useContext(PresenceContext);\n    const reducedMotionConfig = React.useContext(MotionConfigContext).reducedMotion;\n    const visualElementRef = React.useRef(null);\n    /**\n     * If we haven't preloaded a renderer, check to see if we have one lazy-loaded\n     */ createVisualElement = createVisualElement || lazyContext.renderer;\n    if (!visualElementRef.current && createVisualElement) {\n        visualElementRef.current = createVisualElement(Component, {\n            visualState,\n            parent,\n            props,\n            presenceContext,\n            blockInitialAnimation: presenceContext ? presenceContext.initial === false : false,\n            reducedMotionConfig\n        });\n    }\n    const visualElement = visualElementRef.current;\n    /**\n     * Load Motion gesture and animation features. These are rendered as renderless\n     * components so each feature can optionally make use of React lifecycle methods.\n     */ const initialLayoutGroupConfig = React.useContext(SwitchLayoutGroupContext);\n    if (visualElement && !visualElement.projection && ProjectionNodeConstructor && (visualElement.type === \"html\" || visualElement.type === \"svg\")) {\n        createProjectionNode(visualElementRef.current, props, ProjectionNodeConstructor, initialLayoutGroupConfig);\n    }\n    const isMounted = React.useRef(false);\n    React.useInsertionEffect(()=>{\n        /**\n         * Check the component has already mounted before calling\n         * `update` unnecessarily. This ensures we skip the initial update.\n         */ if (visualElement && isMounted.current) {\n            visualElement.update(props, presenceContext);\n        }\n    });\n    /**\n     * Cache this value as we want to know whether HandoffAppearAnimations\n     * was present on initial render - it will be deleted after this.\n     */ const optimisedAppearId = props[optimizedAppearDataAttribute];\n    const wantsHandoff = React.useRef(Boolean(optimisedAppearId) && !((_a = window.MotionHandoffIsComplete) === null || _a === void 0 ? void 0 : _a.call(window, optimisedAppearId)) && ((_b = window.MotionHasOptimisedAnimation) === null || _b === void 0 ? void 0 : _b.call(window, optimisedAppearId)));\n    useIsomorphicLayoutEffect(()=>{\n        if (!visualElement) return;\n        isMounted.current = true;\n        window.MotionIsMounted = true;\n        visualElement.updateFeatures();\n        microtask.render(visualElement.render);\n        /**\n         * Ideally this function would always run in a useEffect.\n         *\n         * However, if we have optimised appear animations to handoff from,\n         * it needs to happen synchronously to ensure there's no flash of\n         * incorrect styles in the event of a hydration error.\n         *\n         * So if we detect a situtation where optimised appear animations\n         * are running, we use useLayoutEffect to trigger animations.\n         */ if (wantsHandoff.current && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n    });\n    React.useEffect(()=>{\n        if (!visualElement) return;\n        if (!wantsHandoff.current && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n        if (wantsHandoff.current) {\n            // This ensures all future calls to animateChanges() in this component will run in useEffect\n            queueMicrotask(()=>{\n                var _a;\n                (_a = window.MotionHandoffMarkAsComplete) === null || _a === void 0 ? void 0 : _a.call(window, optimisedAppearId);\n            });\n            wantsHandoff.current = false;\n        }\n    });\n    return visualElement;\n}\n_s3(useVisualElement, \"Q8Mn+xAMstIAeELyjBEYWP7EJ0I=\", false, function() {\n    return [\n        useIsomorphicLayoutEffect\n    ];\n});\nfunction createProjectionNode(visualElement, props, ProjectionNodeConstructor, initialPromotionConfig) {\n    const { layoutId, layout, drag, dragConstraints, layoutScroll, layoutRoot } = props;\n    visualElement.projection = new ProjectionNodeConstructor(visualElement.latestValues, props[\"data-framer-portal-id\"] ? undefined : getClosestProjectingNode(visualElement.parent));\n    visualElement.projection.setOptions({\n        layoutId,\n        layout,\n        alwaysMeasureLayout: Boolean(drag) || dragConstraints && isRefObject(dragConstraints),\n        visualElement,\n        /**\n         * TODO: Update options in an effect. This could be tricky as it'll be too late\n         * to update by the time layout animations run.\n         * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n         * ensuring it gets called if there's no potential layout animations.\n         *\n         */ animationType: typeof layout === \"string\" ? layout : \"both\",\n        initialPromotionConfig,\n        layoutScroll,\n        layoutRoot\n    });\n}\nfunction getClosestProjectingNode(visualElement) {\n    if (!visualElement) return undefined;\n    return visualElement.options.allowProjection !== false ? visualElement.projection : getClosestProjectingNode(visualElement.parent);\n}\n/**\n * Creates a ref function that, when called, hydrates the provided\n * external ref and VisualElement.\n */ function useMotionRef(visualState, visualElement, externalRef) {\n    _s4();\n    return React.useCallback((instance)=>{\n        instance && visualState.mount && visualState.mount(instance);\n        if (visualElement) {\n            if (instance) {\n                visualElement.mount(instance);\n            } else {\n                visualElement.unmount();\n            }\n        }\n        if (externalRef) {\n            if (typeof externalRef === \"function\") {\n                externalRef(instance);\n            } else if (isRefObject(externalRef)) {\n                externalRef.current = instance;\n            }\n        }\n    }, /**\n     * Only pass a new ref callback to React if we've received a visual element\n     * factory. Otherwise we'll be mounting/remounting every time externalRef\n     * or other dependencies change.\n     */ [\n        visualElement\n    ]);\n}\n_s4(useMotionRef, \"epj4qY15NHsef74wNqHIp5fdZmg=\");\nfunction getCurrentTreeVariants(props, context) {\n    if (isControllingVariants(props)) {\n        const { initial, animate } = props;\n        return {\n            initial: initial === false || isVariantLabel(initial) ? initial : undefined,\n            animate: isVariantLabel(animate) ? animate : undefined\n        };\n    }\n    return props.inherit !== false ? context : {};\n}\nfunction useCreateMotionContext(props) {\n    _s5();\n    const { initial, animate } = getCurrentTreeVariants(props, React.useContext(MotionContext));\n    return React.useMemo(()=>({\n            initial,\n            animate\n        }), [\n        variantLabelsAsDependency(initial),\n        variantLabelsAsDependency(animate)\n    ]);\n}\n_s5(useCreateMotionContext, \"shxTVlB2oWfKttdhhGhChpfITWQ=\");\nfunction variantLabelsAsDependency(prop) {\n    return Array.isArray(prop) ? prop.join(\" \") : prop;\n}\nfunction loadFeatures(features) {\n    for(const key in features){\n        featureDefinitions[key] = {\n            ...featureDefinitions[key],\n            ...features[key]\n        };\n    }\n}\nconst motionComponentSymbol = Symbol.for(\"motionComponentSymbol\");\n/**\n * Create a `motion` component.\n *\n * This function accepts a Component argument, which can be either a string (ie \"div\"\n * for `motion.div`), or an actual React component.\n *\n * Alongside this is a config option which provides a way of rendering the provided\n * component \"offline\", or outside the React render cycle.\n */ function createRendererMotionComponent(param) {\n    let { preloadedFeatures, createVisualElement, useRender, useVisualState, Component } = param;\n    var _s = $RefreshSig$();\n    preloadedFeatures && loadFeatures(preloadedFeatures);\n    function MotionComponent(props, externalRef) {\n        _s();\n        /**\n         * If we need to measure the element we load this functionality in a\n         * separate class component in order to gain access to getSnapshotBeforeUpdate.\n         */ let MeasureLayout;\n        const configAndProps = {\n            ...React.useContext(MotionConfigContext),\n            ...props,\n            layoutId: useLayoutId(props)\n        };\n        const { isStatic } = configAndProps;\n        const context = useCreateMotionContext(props);\n        const visualState = useVisualState(props, isStatic);\n        if (!isStatic && isBrowser) {\n            useStrictMode(configAndProps, preloadedFeatures);\n            const layoutProjection = getProjectionFunctionality(configAndProps);\n            MeasureLayout = layoutProjection.MeasureLayout;\n            /**\n             * Create a VisualElement for this component. A VisualElement provides a common\n             * interface to renderer-specific APIs (ie DOM/Three.js etc) as well as\n             * providing a way of rendering to these APIs outside of the React render loop\n             * for more performant animations and interactions\n             */ context.visualElement = useVisualElement(Component, visualState, configAndProps, createVisualElement, layoutProjection.ProjectionNode);\n        }\n        /**\n         * The mount order and hierarchy is specific to ensure our element ref\n         * is hydrated by the time features fire their effects.\n         */ return jsxRuntime.jsxs(MotionContext.Provider, {\n            value: context,\n            children: [\n                MeasureLayout && context.visualElement ? jsxRuntime.jsx(MeasureLayout, {\n                    visualElement: context.visualElement,\n                    ...configAndProps\n                }) : null,\n                useRender(Component, props, useMotionRef(visualState, context.visualElement, externalRef), visualState, isStatic, context.visualElement)\n            ]\n        });\n    }\n    _s(MotionComponent, \"OzmmWP8E2WLE0LhHHUY21ioDbYk=\", false, function() {\n        return [\n            useLayoutId,\n            useCreateMotionContext,\n            useVisualState,\n            useMotionRef,\n            useRender\n        ];\n    });\n    const ForwardRefMotionComponent = React.forwardRef(MotionComponent);\n    ForwardRefMotionComponent[motionComponentSymbol] = Component;\n    return ForwardRefMotionComponent;\n}\nfunction useLayoutId(param) {\n    let { layoutId } = param;\n    _s6();\n    const layoutGroupId = React.useContext(LayoutGroupContext).id;\n    return layoutGroupId && layoutId !== undefined ? layoutGroupId + \"-\" + layoutId : layoutId;\n}\n_s6(useLayoutId, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nfunction useStrictMode(configAndProps, preloadedFeatures) {\n    _s7();\n    const isStrict = React.useContext(LazyContext).strict;\n    /**\n     * If we're in development mode, check to make sure we're not rendering a motion component\n     * as a child of LazyMotion, as this will break the file-size benefits of using it.\n     */ if ( true && preloadedFeatures && isStrict) {\n        const strictMessage = \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\";\n        configAndProps.ignoreStrict ? motionUtils.warning(false, strictMessage) : motionUtils.invariant(false, strictMessage);\n    }\n}\n_s7(useStrictMode, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nfunction getProjectionFunctionality(props) {\n    const { drag, layout } = featureDefinitions;\n    if (!drag && !layout) return {};\n    const combined = {\n        ...drag,\n        ...layout\n    };\n    return {\n        MeasureLayout: (drag === null || drag === void 0 ? void 0 : drag.isEnabled(props)) || (layout === null || layout === void 0 ? void 0 : layout.isEnabled(props)) ? combined.MeasureLayout : undefined,\n        ProjectionNode: combined.ProjectionNode\n    };\n}\n/**\n * We keep these listed separately as we use the lowercase tag names as part\n * of the runtime bundle to detect SVG components\n */ const lowercaseSVGElements = [\n    \"animate\",\n    \"circle\",\n    \"defs\",\n    \"desc\",\n    \"ellipse\",\n    \"g\",\n    \"image\",\n    \"line\",\n    \"filter\",\n    \"marker\",\n    \"mask\",\n    \"metadata\",\n    \"path\",\n    \"pattern\",\n    \"polygon\",\n    \"polyline\",\n    \"rect\",\n    \"stop\",\n    \"switch\",\n    \"symbol\",\n    \"svg\",\n    \"text\",\n    \"tspan\",\n    \"use\",\n    \"view\"\n];\nfunction isSVGComponent(Component) {\n    if (/**\n     * If it's not a string, it's a custom React component. Currently we only support\n     * HTML custom React components.\n     */ typeof Component !== \"string\" || /**\n         * If it contains a dash, the element is a custom HTML webcomponent.\n         */ Component.includes(\"-\")) {\n        return false;\n    } else if (/**\n     * If it's in our list of lowercase SVG tags, it's an SVG component\n     */ lowercaseSVGElements.indexOf(Component) > -1 || /**\n         * If it contains a capital letter, it's an SVG component\n         */ /[A-Z]/u.test(Component)) {\n        return true;\n    }\n    return false;\n}\n/**\n * Creates a constant value over the lifecycle of a component.\n *\n * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer\n * a guarantee that it won't re-run for performance reasons later on. By using `useConstant`\n * you can ensure that initialisers don't execute twice or more.\n */ function useConstant(init) {\n    _s8();\n    const ref = React.useRef(null);\n    if (ref.current === null) {\n        ref.current = init();\n    }\n    return ref.current;\n}\n_s8(useConstant, \"QMBuJFIdzLIeqBcFwhMf246mjOM=\");\nfunction makeState(param, props, context, presenceContext) {\n    let { scrapeMotionValuesFromProps, createRenderState, onMount } = param;\n    const state = {\n        latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps),\n        renderState: createRenderState()\n    };\n    if (onMount) {\n        state.mount = (instance)=>onMount(props, instance, state);\n    }\n    return state;\n}\nconst makeUseVisualState = (config)=>_s9((props, isStatic)=>{\n        _s9();\n        const context = React.useContext(MotionContext);\n        const presenceContext = React.useContext(PresenceContext);\n        const make = ()=>makeState(config, props, context, presenceContext);\n        return isStatic ? make() : useConstant(make);\n    }, \"sNxIIlbNmx0ZryDSe/DlWrNSZgI=\", false, function() {\n        return [\n            useConstant\n        ];\n    });\nfunction makeLatestValues(props, context, presenceContext, scrapeMotionValues) {\n    const values = {};\n    const motionValues = scrapeMotionValues(props, {});\n    for(const key in motionValues){\n        values[key] = resolveMotionValue(motionValues[key]);\n    }\n    let { initial, animate } = props;\n    const isControllingVariants$1 = isControllingVariants(props);\n    const isVariantNode$1 = isVariantNode(props);\n    if (context && isVariantNode$1 && !isControllingVariants$1 && props.inherit !== false) {\n        if (initial === undefined) initial = context.initial;\n        if (animate === undefined) animate = context.animate;\n    }\n    let isInitialAnimationBlocked = presenceContext ? presenceContext.initial === false : false;\n    isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;\n    const variantToSet = isInitialAnimationBlocked ? animate : initial;\n    if (variantToSet && typeof variantToSet !== \"boolean\" && !isAnimationControls(variantToSet)) {\n        const list = Array.isArray(variantToSet) ? variantToSet : [\n            variantToSet\n        ];\n        for(let i = 0; i < list.length; i++){\n            const resolved = resolveVariantFromProps(props, list[i]);\n            if (resolved) {\n                const { transitionEnd, transition, ...target } = resolved;\n                for(const key in target){\n                    let valueTarget = target[key];\n                    if (Array.isArray(valueTarget)) {\n                        /**\n                         * Take final keyframe if the initial animation is blocked because\n                         * we want to initialise at the end of that blocked animation.\n                         */ const index = isInitialAnimationBlocked ? valueTarget.length - 1 : 0;\n                        valueTarget = valueTarget[index];\n                    }\n                    if (valueTarget !== null) {\n                        values[key] = valueTarget;\n                    }\n                }\n                for(const key in transitionEnd){\n                    values[key] = transitionEnd[key];\n                }\n            }\n        }\n    }\n    return values;\n}\nconst createHtmlRenderState = ()=>({\n        style: {},\n        transform: {},\n        transformOrigin: {},\n        vars: {}\n    });\nconst createSvgRenderState = ()=>({\n        ...createHtmlRenderState(),\n        attrs: {}\n    });\nconst svgMotionConfig = {\n    useVisualState: makeUseVisualState({\n        scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n        createRenderState: createSvgRenderState,\n        onMount: (props, instance, param)=>{\n            let { renderState, latestValues } = param;\n            frame.read(()=>{\n                try {\n                    renderState.dimensions = typeof instance.getBBox === \"function\" ? instance.getBBox() : instance.getBoundingClientRect();\n                } catch (e) {\n                    // Most likely trying to measure an unrendered element under Firefox\n                    renderState.dimensions = {\n                        x: 0,\n                        y: 0,\n                        width: 0,\n                        height: 0\n                    };\n                }\n            });\n            frame.render(()=>{\n                buildSVGAttrs(renderState, latestValues, isSVGTag(instance.tagName), props.transformTemplate);\n                renderSVG(instance, renderState);\n            });\n        }\n    })\n};\nconst htmlMotionConfig = {\n    useVisualState: makeUseVisualState({\n        scrapeMotionValuesFromProps: scrapeMotionValuesFromProps$1,\n        createRenderState: createHtmlRenderState\n    })\n};\nfunction copyRawValuesOnly(target, source, props) {\n    for(const key in source){\n        if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) {\n            target[key] = source[key];\n        }\n    }\n}\nfunction useInitialMotionValues(param, visualState) {\n    let { transformTemplate } = param;\n    _s10();\n    return React.useMemo(()=>{\n        const state = createHtmlRenderState();\n        buildHTMLStyles(state, visualState, transformTemplate);\n        return Object.assign({}, state.vars, state.style);\n    }, [\n        visualState\n    ]);\n}\n_s10(useInitialMotionValues, \"nwk+m61qLgjDVUp4IGV/072DDN4=\");\nfunction useStyle(props, visualState) {\n    _s11();\n    const styleProp = props.style || {};\n    const style = {};\n    /**\n     * Copy non-Motion Values straight into style\n     */ copyRawValuesOnly(style, styleProp, props);\n    Object.assign(style, useInitialMotionValues(props, visualState));\n    return style;\n}\n_s11(useStyle, \"/Sy6LYzJ66EazRcvQe1ceKYmJ6M=\", false, function() {\n    return [\n        useInitialMotionValues\n    ];\n});\nfunction useHTMLProps(props, visualState) {\n    _s12();\n    // The `any` isn't ideal but it is the type of createElement props argument\n    const htmlProps = {};\n    const style = useStyle(props, visualState);\n    if (props.drag && props.dragListener !== false) {\n        // Disable the ghost element when a user drags\n        htmlProps.draggable = false;\n        // Disable text selection\n        style.userSelect = style.WebkitUserSelect = style.WebkitTouchCallout = \"none\";\n        // Disable scrolling on the draggable direction\n        style.touchAction = props.drag === true ? \"none\" : \"pan-\".concat(props.drag === \"x\" ? \"y\" : \"x\");\n    }\n    if (props.tabIndex === undefined && (props.onTap || props.onTapStart || props.whileTap)) {\n        htmlProps.tabIndex = 0;\n    }\n    htmlProps.style = style;\n    return htmlProps;\n}\n_s12(useHTMLProps, \"WJWu2yDa0dJ2LCrqC4EY4AJkLTI=\", false, function() {\n    return [\n        useStyle\n    ];\n});\n/**\n * A list of all valid MotionProps.\n *\n * @privateRemarks\n * This doesn't throw if a `MotionProp` name is missing - it should.\n */ const validMotionProps = new Set([\n    \"animate\",\n    \"exit\",\n    \"variants\",\n    \"initial\",\n    \"style\",\n    \"values\",\n    \"variants\",\n    \"transition\",\n    \"transformTemplate\",\n    \"custom\",\n    \"inherit\",\n    \"onBeforeLayoutMeasure\",\n    \"onAnimationStart\",\n    \"onAnimationComplete\",\n    \"onUpdate\",\n    \"onDragStart\",\n    \"onDrag\",\n    \"onDragEnd\",\n    \"onMeasureDragConstraints\",\n    \"onDirectionLock\",\n    \"onDragTransitionEnd\",\n    \"_dragX\",\n    \"_dragY\",\n    \"onHoverStart\",\n    \"onHoverEnd\",\n    \"onViewportEnter\",\n    \"onViewportLeave\",\n    \"globalTapTarget\",\n    \"ignoreStrict\",\n    \"viewport\"\n]);\n/**\n * Check whether a prop name is a valid `MotionProp` key.\n *\n * @param key - Name of the property to check\n * @returns `true` is key is a valid `MotionProp`.\n *\n * @public\n */ function isValidMotionProp(key) {\n    return key.startsWith(\"while\") || key.startsWith(\"drag\") && key !== \"draggable\" || key.startsWith(\"layout\") || key.startsWith(\"onTap\") || key.startsWith(\"onPan\") || key.startsWith(\"onLayout\") || validMotionProps.has(key);\n}\nlet shouldForward = (key)=>!isValidMotionProp(key);\nfunction loadExternalIsValidProp(isValidProp) {\n    if (!isValidProp) return;\n    // Explicitly filter our events\n    shouldForward = (key)=>key.startsWith(\"on\") ? !isValidMotionProp(key) : isValidProp(key);\n}\n/**\n * Emotion and Styled Components both allow users to pass through arbitrary props to their components\n * to dynamically generate CSS. They both use the `@emotion/is-prop-valid` package to determine which\n * of these should be passed to the underlying DOM node.\n *\n * However, when styling a Motion component `styled(motion.div)`, both packages pass through *all* props\n * as it's seen as an arbitrary component rather than a DOM node. Motion only allows arbitrary props\n * passed through the `custom` prop so it doesn't *need* the payload or computational overhead of\n * `@emotion/is-prop-valid`, however to fix this problem we need to use it.\n *\n * By making it an optionalDependency we can offer this functionality only in the situations where it's\n * actually required.\n */ try {\n    /**\n     * We attempt to import this package but require won't be defined in esm environments, in that case\n     * isPropValid will have to be provided via `MotionContext`. In a 6.0.0 this should probably be removed\n     * in favour of explicit injection.\n     */ loadExternalIsValidProp((__webpack_require__(/*! @emotion/is-prop-valid */ \"(app-pages-browser)/./node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js\")[\"default\"]));\n} catch (_a) {\n// We don't need to actually do anything here - the fallback is the existing `isPropValid`.\n}\nfunction filterProps(props, isDom, forwardMotionProps) {\n    const filteredProps = {};\n    for(const key in props){\n        /**\n         * values is considered a valid prop by Emotion, so if it's present\n         * this will be rendered out to the DOM unless explicitly filtered.\n         *\n         * We check the type as it could be used with the `feColorMatrix`\n         * element, which we support.\n         */ if (key === \"values\" && typeof props.values === \"object\") continue;\n        if (shouldForward(key) || forwardMotionProps === true && isValidMotionProp(key) || !isDom && !isValidMotionProp(key) || // If trying to use native HTML drag events, forward drag listeners\n        props[\"draggable\"] && key.startsWith(\"onDrag\")) {\n            filteredProps[key] = props[key];\n        }\n    }\n    return filteredProps;\n}\nfunction useSVGProps(props, visualState, _isStatic, Component) {\n    _s13();\n    const visualProps = React.useMemo(()=>{\n        const state = createSvgRenderState();\n        buildSVGAttrs(state, visualState, isSVGTag(Component), props.transformTemplate);\n        return {\n            ...state.attrs,\n            style: {\n                ...state.style\n            }\n        };\n    }, [\n        visualState\n    ]);\n    if (props.style) {\n        const rawStyles = {};\n        copyRawValuesOnly(rawStyles, props.style, props);\n        visualProps.style = {\n            ...rawStyles,\n            ...visualProps.style\n        };\n    }\n    return visualProps;\n}\n_s13(useSVGProps, \"eiqa+9wkPNrwvDQrXOyiC3q3ueU=\");\nfunction createUseRender() {\n    let forwardMotionProps = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;\n    var _s = $RefreshSig$();\n    const useRender = (Component, props, ref, param, isStatic)=>{\n        let { latestValues } = param;\n        _s();\n        const useVisualProps = isSVGComponent(Component) ? useSVGProps : useHTMLProps;\n        const visualProps = useVisualProps(props, latestValues, isStatic, Component);\n        const filteredProps = filterProps(props, typeof Component === \"string\", forwardMotionProps);\n        const elementProps = Component !== React.Fragment ? {\n            ...filteredProps,\n            ...visualProps,\n            ref\n        } : {};\n        /**\n         * If component has been handed a motion value as its child,\n         * memoise its initial value and render that. Subsequent updates\n         * will be handled by the onChange handler\n         */ const { children } = props;\n        const renderedChildren = React.useMemo(()=>isMotionValue(children) ? children.get() : children, [\n            children\n        ]);\n        return React.createElement(Component, {\n            ...elementProps,\n            children: renderedChildren\n        });\n    };\n    _s(useRender, \"pOEkb9VCzNFDbYF6ZAwinK0v/WY=\", true);\n    return useRender;\n}\nfunction createMotionComponentFactory(preloadedFeatures, createVisualElement) {\n    return function createMotionComponent(Component) {\n        let { forwardMotionProps } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {\n            forwardMotionProps: false\n        };\n        const baseConfig = isSVGComponent(Component) ? svgMotionConfig : htmlMotionConfig;\n        const config = {\n            ...baseConfig,\n            preloadedFeatures,\n            useRender: createUseRender(forwardMotionProps),\n            createVisualElement,\n            Component\n        };\n        return createRendererMotionComponent(config);\n    };\n}\nconst createDomVisualElement = (Component, options)=>{\n    return isSVGComponent(Component) ? new SVGVisualElement(options) : new HTMLVisualElement(options, {\n        allowProjection: Component !== React.Fragment\n    });\n};\nconst createMotionComponent = /*@__PURE__*/ createMotionComponentFactory({\n    ...animations,\n    ...gestureAnimations,\n    ...drag,\n    ...layout\n}, createDomVisualElement);\nconst motion = /*@__PURE__*/ createDOMMotionComponentProxy(createMotionComponent);\nconst createMinimalMotionComponent = /*@__PURE__*/ createMotionComponentFactory();\nconst m = /*@__PURE__*/ createDOMMotionComponentProxy(createMinimalMotionComponent);\n/**\n * Measurement functionality has to be within a separate component\n * to leverage snapshot lifecycle.\n */ class PopChildMeasure extends React__namespace.Component {\n    getSnapshotBeforeUpdate(prevProps) {\n        const element = this.props.childRef.current;\n        if (element && prevProps.isPresent && !this.props.isPresent) {\n            const size = this.props.sizeRef.current;\n            size.height = element.offsetHeight || 0;\n            size.width = element.offsetWidth || 0;\n            size.top = element.offsetTop;\n            size.left = element.offsetLeft;\n        }\n        return null;\n    }\n    /**\n     * Required with getSnapshotBeforeUpdate to stop React complaining.\n     */ componentDidUpdate() {}\n    render() {\n        return this.props.children;\n    }\n}\nfunction PopChild(param) {\n    let { children, isPresent } = param;\n    _s14();\n    const id = React.useId();\n    const ref = React.useRef(null);\n    const size = React.useRef({\n        width: 0,\n        height: 0,\n        top: 0,\n        left: 0\n    });\n    const { nonce } = React.useContext(MotionConfigContext);\n    /**\n     * We create and inject a style block so we can apply this explicit\n     * sizing in a non-destructive manner by just deleting the style block.\n     *\n     * We can't apply size via render as the measurement happens\n     * in getSnapshotBeforeUpdate (post-render), likewise if we apply the\n     * styles directly on the DOM node, we might be overwriting\n     * styles set via the style prop.\n     */ React.useInsertionEffect(()=>{\n        const { width, height, top, left } = size.current;\n        if (isPresent || !ref.current || !width || !height) return;\n        ref.current.dataset.motionPopId = id;\n        const style = document.createElement(\"style\");\n        if (nonce) style.nonce = nonce;\n        document.head.appendChild(style);\n        if (style.sheet) {\n            style.sheet.insertRule('\\n          [data-motion-pop-id=\"'.concat(id, '\"] {\\n            position: absolute !important;\\n            width: ').concat(width, \"px !important;\\n            height: \").concat(height, \"px !important;\\n            top: \").concat(top, \"px !important;\\n            left: \").concat(left, \"px !important;\\n          }\\n        \"));\n        }\n        return ()=>{\n            document.head.removeChild(style);\n        };\n    }, [\n        isPresent\n    ]);\n    return jsxRuntime.jsx(PopChildMeasure, {\n        isPresent: isPresent,\n        childRef: ref,\n        sizeRef: size,\n        children: React__namespace.cloneElement(children, {\n            ref\n        })\n    });\n}\n_s14(PopChild, \"V7z789Ed2n0+HnmYCJ8kEL0I644=\");\n_c2 = PopChild;\nconst PresenceChild = (param)=>{\n    let { children, initial, isPresent, onExitComplete, custom, presenceAffectsLayout, mode } = param;\n    _s15();\n    const presenceChildren = useConstant(newChildrenMap);\n    const id = React.useId();\n    const memoizedOnExitComplete = React.useCallback((childId)=>{\n        presenceChildren.set(childId, true);\n        for (const isComplete of presenceChildren.values()){\n            if (!isComplete) return; // can stop searching when any is incomplete\n        }\n        onExitComplete && onExitComplete();\n    }, [\n        presenceChildren,\n        onExitComplete\n    ]);\n    const context = React.useMemo(()=>({\n            id,\n            initial,\n            isPresent,\n            custom,\n            onExitComplete: memoizedOnExitComplete,\n            register: (childId)=>{\n                presenceChildren.set(childId, false);\n                return ()=>presenceChildren.delete(childId);\n            }\n        }), /**\n     * If the presence of a child affects the layout of the components around it,\n     * we want to make a new context value to ensure they get re-rendered\n     * so they can detect that layout change.\n     */ presenceAffectsLayout ? [\n        Math.random(),\n        memoizedOnExitComplete\n    ] : [\n        isPresent,\n        memoizedOnExitComplete\n    ]);\n    React.useMemo(()=>{\n        presenceChildren.forEach((_, key)=>presenceChildren.set(key, false));\n    }, [\n        isPresent\n    ]);\n    /**\n     * If there's no `motion` components to fire exit animations, we want to remove this\n     * component immediately.\n     */ React__namespace.useEffect(()=>{\n        !isPresent && !presenceChildren.size && onExitComplete && onExitComplete();\n    }, [\n        isPresent\n    ]);\n    if (mode === \"popLayout\") {\n        children = jsxRuntime.jsx(PopChild, {\n            isPresent: isPresent,\n            children: children\n        });\n    }\n    return jsxRuntime.jsx(PresenceContext.Provider, {\n        value: context,\n        children: children\n    });\n};\n_s15(PresenceChild, \"LhgI4XeWm8AWCb6RH8VCWFcMTPs=\", false, function() {\n    return [\n        useConstant\n    ];\n});\n_c3 = PresenceChild;\nfunction newChildrenMap() {\n    return new Map();\n}\nfunction useUnmountEffect(callback) {\n    _s16();\n    return React.useEffect(()=>()=>callback(), []);\n}\n_s16(useUnmountEffect, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\nfunction useIsMounted() {\n    _s17();\n    const isMounted = React.useRef(false);\n    useIsomorphicLayoutEffect(()=>{\n        isMounted.current = true;\n        return ()=>{\n            isMounted.current = false;\n        };\n    }, []);\n    return isMounted;\n}\n_s17(useIsMounted, \"/y9TKyG4hOkx4mVrEHjUN74NuCg=\", false, function() {\n    return [\n        useIsomorphicLayoutEffect\n    ];\n});\nfunction useForceUpdate() {\n    _s18();\n    const isMounted = useIsMounted();\n    const [forcedRenderCount, setForcedRenderCount] = React.useState(0);\n    const forceRender = React.useCallback(()=>{\n        isMounted.current && setForcedRenderCount(forcedRenderCount + 1);\n    }, [\n        forcedRenderCount\n    ]);\n    /**\n     * Defer this to the end of the next animation frame in case there are multiple\n     * synchronous calls.\n     */ const deferredForceRender = React.useCallback(()=>frame.postRender(forceRender), [\n        forceRender\n    ]);\n    return [\n        deferredForceRender,\n        forcedRenderCount\n    ];\n}\n_s18(useForceUpdate, \"k67Wn+OKNpj+TFBDmR7WTfmk6BU=\", false, function() {\n    return [\n        useIsMounted\n    ];\n});\nconst getChildKey = (child)=>child.key || \"\";\nfunction onlyElements(children) {\n    const filtered = [];\n    // We use forEach here instead of map as map mutates the component key by preprending `.$`\n    React.Children.forEach(children, (child)=>{\n        if (React.isValidElement(child)) filtered.push(child);\n    });\n    return filtered;\n}\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */ const AnimatePresence = (param)=>{\n    let { children, exitBeforeEnter, custom, initial = true, onExitComplete, presenceAffectsLayout = true, mode = \"sync\" } = param;\n    _s19();\n    motionUtils.invariant(!exitBeforeEnter, \"Replace exitBeforeEnter with mode='wait'\");\n    /**\n     * Filter any children that aren't ReactElements. We can only track components\n     * between renders with a props.key.\n     */ const presentChildren = React.useMemo(()=>onlyElements(children), [\n        children\n    ]);\n    /**\n     * Track the keys of the currently rendered children. This is used to\n     * determine which children are exiting.\n     */ const presentKeys = presentChildren.map(getChildKey);\n    /**\n     * If `initial={false}` we only want to pass this to components in the first render.\n     */ const isInitialRender = React.useRef(true);\n    /**\n     * A ref containing the currently present children. When all exit animations\n     * are complete, we use this to re-render the component with the latest children\n     * *committed* rather than the latest children *rendered*.\n     */ const pendingPresentChildren = React.useRef(presentChildren);\n    /**\n     * Track which exiting children have finished animating out.\n     */ const exitComplete = useConstant(()=>new Map());\n    /**\n     * Save children to render as React state. To ensure this component is concurrent-safe,\n     * we check for exiting children via an effect.\n     */ const [diffedChildren, setDiffedChildren] = React.useState(presentChildren);\n    const [renderedChildren, setRenderedChildren] = React.useState(presentChildren);\n    useIsomorphicLayoutEffect(()=>{\n        isInitialRender.current = false;\n        pendingPresentChildren.current = presentChildren;\n        /**\n         * Update complete status of exiting children.\n         */ for(let i = 0; i < renderedChildren.length; i++){\n            const key = getChildKey(renderedChildren[i]);\n            if (!presentKeys.includes(key)) {\n                if (exitComplete.get(key) !== true) {\n                    exitComplete.set(key, false);\n                }\n            } else {\n                exitComplete.delete(key);\n            }\n        }\n    }, [\n        renderedChildren,\n        presentKeys.length,\n        presentKeys.join(\"-\")\n    ]);\n    const exitingChildren = [];\n    if (presentChildren !== diffedChildren) {\n        let nextChildren = [\n            ...presentChildren\n        ];\n        /**\n         * Loop through all the currently rendered components and decide which\n         * are exiting.\n         */ for(let i = 0; i < renderedChildren.length; i++){\n            const child = renderedChildren[i];\n            const key = getChildKey(child);\n            if (!presentKeys.includes(key)) {\n                nextChildren.splice(i, 0, child);\n                exitingChildren.push(child);\n            }\n        }\n        /**\n         * If we're in \"wait\" mode, and we have exiting children, we want to\n         * only render these until they've all exited.\n         */ if (mode === \"wait\" && exitingChildren.length) {\n            nextChildren = exitingChildren;\n        }\n        setRenderedChildren(onlyElements(nextChildren));\n        setDiffedChildren(presentChildren);\n        /**\n         * Early return to ensure once we've set state with the latest diffed\n         * children, we can immediately re-render.\n         */ return;\n    }\n    if ( true && mode === \"wait\" && renderedChildren.length > 1) {\n        console.warn('You\\'re attempting to animate multiple children within AnimatePresence, but its mode is set to \"wait\". This will lead to odd visual behaviour.');\n    }\n    /**\n     * If we've been provided a forceRender function by the LayoutGroupContext,\n     * we can use it to force a re-render amongst all surrounding components once\n     * all components have finished animating out.\n     */ const { forceRender } = React.useContext(LayoutGroupContext);\n    return jsxRuntime.jsx(jsxRuntime.Fragment, {\n        children: renderedChildren.map((child)=>{\n            const key = getChildKey(child);\n            const isPresent = presentChildren === renderedChildren || presentKeys.includes(key);\n            const onExit = ()=>{\n                if (exitComplete.has(key)) {\n                    exitComplete.set(key, true);\n                } else {\n                    return;\n                }\n                let isEveryExitComplete = true;\n                exitComplete.forEach((isExitComplete)=>{\n                    if (!isExitComplete) isEveryExitComplete = false;\n                });\n                if (isEveryExitComplete) {\n                    forceRender === null || forceRender === void 0 ? void 0 : forceRender();\n                    setRenderedChildren(pendingPresentChildren.current);\n                    onExitComplete && onExitComplete();\n                }\n            };\n            return jsxRuntime.jsx(PresenceChild, {\n                isPresent: isPresent,\n                initial: !isInitialRender.current || initial ? undefined : false,\n                custom: isPresent ? undefined : custom,\n                presenceAffectsLayout: presenceAffectsLayout,\n                mode: mode,\n                onExitComplete: isPresent ? undefined : onExit,\n                children: child\n            }, key);\n        })\n    });\n};\n_s19(AnimatePresence, \"Us8IxzNIYDVN8ZSe0Qiq7W/f/UM=\", false, function() {\n    return [\n        useConstant,\n        useIsomorphicLayoutEffect\n    ];\n});\n_c4 = AnimatePresence;\n/**\n * `MotionConfig` is used to set configuration options for all children `motion` components.\n *\n * ```jsx\n * import { motion, MotionConfig } from \"framer-motion\"\n *\n * export function App() {\n *   return (\n *     <MotionConfig transition={{ type: \"spring\" }}>\n *       <motion.div animate={{ x: 100 }} />\n *     </MotionConfig>\n *   )\n * }\n * ```\n *\n * @public\n */ function MotionConfig(param) {\n    let { children, isValidProp, ...config } = param;\n    _s20();\n    isValidProp && loadExternalIsValidProp(isValidProp);\n    /**\n     * Inherit props from any parent MotionConfig components\n     */ config = {\n        ...React.useContext(MotionConfigContext),\n        ...config\n    };\n    /**\n     * Don't allow isStatic to change between renders as it affects how many hooks\n     * motion components fire.\n     */ config.isStatic = useConstant(()=>config.isStatic);\n    /**\n     * Creating a new config context object will re-render every `motion` component\n     * every time it renders. So we only want to create a new one sparingly.\n     */ const context = React.useMemo(()=>config, [\n        JSON.stringify(config.transition),\n        config.transformPagePoint,\n        config.reducedMotion\n    ]);\n    return jsxRuntime.jsx(MotionConfigContext.Provider, {\n        value: context,\n        children: children\n    });\n}\n_s20(MotionConfig, \"tO5bvUVqLxw2p027BDiStQY978M=\", false, function() {\n    return [\n        useConstant\n    ];\n});\n_c5 = MotionConfig;\n/**\n * Used in conjunction with the `m` component to reduce bundle size.\n *\n * `m` is a version of the `motion` component that only loads functionality\n * critical for the initial render.\n *\n * `LazyMotion` can then be used to either synchronously or asynchronously\n * load animation and gesture support.\n *\n * ```jsx\n * // Synchronous loading\n * import { LazyMotion, m, domAnimation } from \"framer-motion\"\n *\n * function App() {\n *   return (\n *     <LazyMotion features={domAnimation}>\n *       <m.div animate={{ scale: 2 }} />\n *     </LazyMotion>\n *   )\n * }\n *\n * // Asynchronous loading\n * import { LazyMotion, m } from \"framer-motion\"\n *\n * function App() {\n *   return (\n *     <LazyMotion features={() => import('./path/to/domAnimation')}>\n *       <m.div animate={{ scale: 2 }} />\n *     </LazyMotion>\n *   )\n * }\n * ```\n *\n * @public\n */ function LazyMotion(param) {\n    let { children, features, strict = false } = param;\n    _s21();\n    const [, setIsLoaded] = React.useState(!isLazyBundle(features));\n    const loadedRenderer = React.useRef(undefined);\n    /**\n     * If this is a synchronous load, load features immediately\n     */ if (!isLazyBundle(features)) {\n        const { renderer, ...loadedFeatures } = features;\n        loadedRenderer.current = renderer;\n        loadFeatures(loadedFeatures);\n    }\n    React.useEffect(()=>{\n        if (isLazyBundle(features)) {\n            features().then((param)=>{\n                let { renderer, ...loadedFeatures } = param;\n                loadFeatures(loadedFeatures);\n                loadedRenderer.current = renderer;\n                setIsLoaded(true);\n            });\n        }\n    }, []);\n    return jsxRuntime.jsx(LazyContext.Provider, {\n        value: {\n            renderer: loadedRenderer.current,\n            strict\n        },\n        children: children\n    });\n}\n_s21(LazyMotion, \"PtmiYzdlQDM7I6rgzEXQo0bRWz0=\");\n_c6 = LazyMotion;\nfunction isLazyBundle(features) {\n    return typeof features === \"function\";\n}\n/**\n * Note: Still used by components generated by old versions of Framer\n *\n * @deprecated\n */ const DeprecatedLayoutGroupContext = React.createContext(null);\nconst shouldInheritGroup = (inherit)=>inherit === true;\nconst shouldInheritId = (inherit)=>shouldInheritGroup(inherit === true) || inherit === \"id\";\nconst LayoutGroup = (param)=>{\n    let { children, id, inherit = true } = param;\n    _s22();\n    const layoutGroupContext = React.useContext(LayoutGroupContext);\n    const deprecatedLayoutGroupContext = React.useContext(DeprecatedLayoutGroupContext);\n    const [forceRender, key] = useForceUpdate();\n    const context = React.useRef(null);\n    const upstreamId = layoutGroupContext.id || deprecatedLayoutGroupContext;\n    if (context.current === null) {\n        if (shouldInheritId(inherit) && upstreamId) {\n            id = id ? upstreamId + \"-\" + id : upstreamId;\n        }\n        context.current = {\n            id,\n            group: shouldInheritGroup(inherit) ? layoutGroupContext.group || nodeGroup() : nodeGroup()\n        };\n    }\n    const memoizedContext = React.useMemo(()=>({\n            ...context.current,\n            forceRender\n        }), [\n        key\n    ]);\n    return jsxRuntime.jsx(LayoutGroupContext.Provider, {\n        value: memoizedContext,\n        children: children\n    });\n};\n_s22(LayoutGroup, \"9LmIqTdJyAs+K/Sz5+Eo03r0hF8=\", false, function() {\n    return [\n        useForceUpdate\n    ];\n});\n_c7 = LayoutGroup;\nconst ReorderContext = React.createContext(null);\nfunction checkReorder(order, value, offset, velocity) {\n    if (!velocity) return order;\n    const index = order.findIndex((item)=>item.value === value);\n    if (index === -1) return order;\n    const nextOffset = velocity > 0 ? 1 : -1;\n    const nextItem = order[index + nextOffset];\n    if (!nextItem) return order;\n    const item = order[index];\n    const nextLayout = nextItem.layout;\n    const nextItemCenter = mixNumber$1(nextLayout.min, nextLayout.max, 0.5);\n    if (nextOffset === 1 && item.layout.max + offset > nextItemCenter || nextOffset === -1 && item.layout.min + offset < nextItemCenter) {\n        return moveItem(order, index, index + nextOffset);\n    }\n    return order;\n}\nfunction ReorderGroupComponent(param, externalRef) {\n    let { children, as = \"ul\", axis = \"y\", onReorder, values, ...props } = param;\n    _s23();\n    const Component = useConstant(()=>motion[as]);\n    const order = [];\n    const isReordering = React.useRef(false);\n    motionUtils.invariant(Boolean(values), \"Reorder.Group must be provided a values prop\");\n    const context = {\n        axis,\n        registerItem: (value, layout)=>{\n            // If the entry was already added, update it rather than adding it again\n            const idx = order.findIndex((entry)=>value === entry.value);\n            if (idx !== -1) {\n                order[idx].layout = layout[axis];\n            } else {\n                order.push({\n                    value: value,\n                    layout: layout[axis]\n                });\n            }\n            order.sort(compareMin);\n        },\n        updateOrder: (item, offset, velocity)=>{\n            if (isReordering.current) return;\n            const newOrder = checkReorder(order, item, offset, velocity);\n            if (order !== newOrder) {\n                isReordering.current = true;\n                onReorder(newOrder.map(getValue).filter((value)=>values.indexOf(value) !== -1));\n            }\n        }\n    };\n    React.useEffect(()=>{\n        isReordering.current = false;\n    });\n    return jsxRuntime.jsx(Component, {\n        ...props,\n        ref: externalRef,\n        ignoreStrict: true,\n        children: jsxRuntime.jsx(ReorderContext.Provider, {\n            value: context,\n            children: children\n        })\n    });\n}\n_s23(ReorderGroupComponent, \"jgRzpDaggWbUBaD8btWBmPdYoCE=\", false, function() {\n    return [\n        useConstant\n    ];\n});\n_c8 = ReorderGroupComponent;\nconst ReorderGroup = /*@__PURE__*/ React.forwardRef(ReorderGroupComponent);\n_c9 = ReorderGroup;\nfunction getValue(item) {\n    return item.value;\n}\nfunction compareMin(a, b) {\n    return a.layout.min - b.layout.min;\n}\n/**\n * Creates a `MotionValue` to track the state and velocity of a value.\n *\n * Usually, these are created automatically. For advanced use-cases, like use with `useTransform`, you can create `MotionValue`s externally and pass them into the animated component via the `style` prop.\n *\n * ```jsx\n * export const MyComponent = () => {\n *   const scale = useMotionValue(1)\n *\n *   return <motion.div style={{ scale }} />\n * }\n * ```\n *\n * @param initial - The initial state.\n *\n * @public\n */ function useMotionValue(initial) {\n    _s24();\n    const value = useConstant(()=>motionValue(initial));\n    /**\n     * If this motion value is being used in static mode, like on\n     * the Framer canvas, force components to rerender when the motion\n     * value is updated.\n     */ const { isStatic } = React.useContext(MotionConfigContext);\n    if (isStatic) {\n        const [, setLatest] = React.useState(initial);\n        React.useEffect(()=>value.on(\"change\", setLatest), []);\n    }\n    return value;\n}\n_s24(useMotionValue, \"6bkzDhwKRQpx5E50Ur0hz+GGeuU=\", false, function() {\n    return [\n        useConstant\n    ];\n});\nfunction useCombineMotionValues(values, combineValues) {\n    _s25();\n    /**\n     * Initialise the returned motion value. This remains the same between renders.\n     */ const value = useMotionValue(combineValues());\n    /**\n     * Create a function that will update the template motion value with the latest values.\n     * This is pre-bound so whenever a motion value updates it can schedule its\n     * execution in Framesync. If it's already been scheduled it won't be fired twice\n     * in a single frame.\n     */ const updateValue = ()=>value.set(combineValues());\n    /**\n     * Synchronously update the motion value with the latest values during the render.\n     * This ensures that within a React render, the styles applied to the DOM are up-to-date.\n     */ updateValue();\n    /**\n     * Subscribe to all motion values found within the template. Whenever any of them change,\n     * schedule an update.\n     */ useIsomorphicLayoutEffect(()=>{\n        const scheduleUpdate = ()=>frame.preRender(updateValue, false, true);\n        const subscriptions = values.map((v)=>v.on(\"change\", scheduleUpdate));\n        return ()=>{\n            subscriptions.forEach((unsubscribe)=>unsubscribe());\n            cancelFrame(updateValue);\n        };\n    });\n    return value;\n}\n_s25(useCombineMotionValues, \"qukPCp5clc+uSZB46PdZqBbF4lI=\", false, function() {\n    return [\n        useMotionValue,\n        useIsomorphicLayoutEffect\n    ];\n});\nfunction useComputed(compute) {\n    _s26();\n    /**\n     * Open session of collectMotionValues. Any MotionValue that calls get()\n     * will be saved into this array.\n     */ collectMotionValues.current = [];\n    compute();\n    const value = useCombineMotionValues(collectMotionValues.current, compute);\n    /**\n     * Synchronously close session of collectMotionValues.\n     */ collectMotionValues.current = undefined;\n    return value;\n}\n_s26(useComputed, \"CSoAJFTTb1B/U07nxrMG1EfCRKA=\", false, function() {\n    return [\n        useCombineMotionValues\n    ];\n});\nfunction useTransform(input, inputRangeOrTransformer, outputRange, options) {\n    _s27();\n    if (typeof input === \"function\") {\n        return useComputed(input);\n    }\n    const transformer = typeof inputRangeOrTransformer === \"function\" ? inputRangeOrTransformer : transform(inputRangeOrTransformer, outputRange, options);\n    return Array.isArray(input) ? useListTransform(input, transformer) : useListTransform([\n        input\n    ], (param)=>{\n        let [latest] = param;\n        return transformer(latest);\n    });\n}\n_s27(useTransform, \"KfnyjUEYpQ2zjoZo8xBCyW2tKXk=\", false, function() {\n    return [\n        useListTransform,\n        useListTransform\n    ];\n});\nfunction useListTransform(values, transformer) {\n    _s28();\n    const latest = useConstant(()=>[]);\n    return useCombineMotionValues(values, ()=>{\n        latest.length = 0;\n        const numValues = values.length;\n        for(let i = 0; i < numValues; i++){\n            latest[i] = values[i].get();\n        }\n        return transformer(latest);\n    });\n}\n_s28(useListTransform, \"2juNuGgwqBcSwJlKeEYuU4rQnFo=\", false, function() {\n    return [\n        useConstant,\n        useCombineMotionValues\n    ];\n});\nfunction useDefaultMotionValue(value) {\n    let defaultValue = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n    _s29();\n    return isMotionValue(value) ? value : useMotionValue(defaultValue);\n}\n_s29(useDefaultMotionValue, \"EAmhqxMjACPPPqtmeMuaTuG1SiM=\", false, function() {\n    return [\n        useMotionValue\n    ];\n});\nfunction ReorderItemComponent(param, externalRef) {\n    let { children, style = {}, value, as = \"li\", onDrag, layout = true, ...props } = param;\n    _s30();\n    const Component = useConstant(()=>motion[as]);\n    const context = React.useContext(ReorderContext);\n    const point = {\n        x: useDefaultMotionValue(style.x),\n        y: useDefaultMotionValue(style.y)\n    };\n    const zIndex = useTransform([\n        point.x,\n        point.y\n    ], (param)=>{\n        let [latestX, latestY] = param;\n        return latestX || latestY ? 1 : \"unset\";\n    });\n    motionUtils.invariant(Boolean(context), \"Reorder.Item must be a child of Reorder.Group\");\n    const { axis, registerItem, updateOrder } = context;\n    return jsxRuntime.jsx(Component, {\n        drag: axis,\n        ...props,\n        dragSnapToOrigin: true,\n        style: {\n            ...style,\n            x: point.x,\n            y: point.y,\n            zIndex\n        },\n        layout: layout,\n        onDrag: (event, gesturePoint)=>{\n            const { velocity } = gesturePoint;\n            velocity[axis] && updateOrder(value, point[axis].get(), velocity[axis]);\n            onDrag && onDrag(event, gesturePoint);\n        },\n        onLayoutMeasure: (measured)=>registerItem(value, measured),\n        ref: externalRef,\n        ignoreStrict: true,\n        children: children\n    });\n}\n_s30(ReorderItemComponent, \"dspmwsSa1V+yx1XAyOVjp6LHSKs=\", false, function() {\n    return [\n        useConstant,\n        useDefaultMotionValue,\n        useDefaultMotionValue,\n        useTransform\n    ];\n});\n_c10 = ReorderItemComponent;\nconst ReorderItem = /*@__PURE__*/ React.forwardRef(ReorderItemComponent);\n_c11 = ReorderItem;\nvar namespace = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    Group: ReorderGroup,\n    Item: ReorderItem\n});\n/**\n * @public\n */ const domMin = {\n    renderer: createDomVisualElement,\n    ...animations\n};\n/**\n * @public\n */ const domAnimation = {\n    renderer: createDomVisualElement,\n    ...animations,\n    ...gestureAnimations\n};\n/**\n * @public\n */ const domMax = {\n    ...domAnimation,\n    ...drag,\n    ...layout\n};\n/**\n * Combine multiple motion values into a new one using a string template literal.\n *\n * ```jsx\n * import {\n *   motion,\n *   useSpring,\n *   useMotionValue,\n *   useMotionTemplate\n * } from \"framer-motion\"\n *\n * function Component() {\n *   const shadowX = useSpring(0)\n *   const shadowY = useMotionValue(0)\n *   const shadow = useMotionTemplate`drop-shadow(${shadowX}px ${shadowY}px 20px rgba(0,0,0,0.3))`\n *\n *   return <motion.div style={{ filter: shadow }} />\n * }\n * ```\n *\n * @public\n */ function useMotionTemplate(fragments) {\n    for(var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        values[_key - 1] = arguments[_key];\n    }\n    _s31();\n    /**\n     * Create a function that will build a string from the latest motion values.\n     */ const numFragments = fragments.length;\n    function buildValue() {\n        let output = \"\";\n        for(let i = 0; i < numFragments; i++){\n            output += fragments[i];\n            const value = values[i];\n            if (value) {\n                output += isMotionValue(value) ? value.get() : value;\n            }\n        }\n        return output;\n    }\n    return useCombineMotionValues(values.filter(isMotionValue), buildValue);\n}\n_s31(useMotionTemplate, \"/r1UnTGFS5aWbz3DrqUhRcgcjoY=\", false, function() {\n    return [\n        useCombineMotionValues\n    ];\n});\nfunction toNumber(v) {\n    if (typeof v === \"number\") return v;\n    return parseFloat(v);\n}\n/**\n * Creates a `MotionValue` that, when `set`, will use a spring animation to animate to its new state.\n *\n * It can either work as a stand-alone `MotionValue` by initialising it with a value, or as a subscriber\n * to another `MotionValue`.\n *\n * @remarks\n *\n * ```jsx\n * const x = useSpring(0, { stiffness: 300 })\n * const y = useSpring(x, { damping: 10 })\n * ```\n *\n * @param inputValue - `MotionValue` or number. If provided a `MotionValue`, when the input `MotionValue` changes, the created `MotionValue` will spring towards that value.\n * @param springConfig - Configuration options for the spring.\n * @returns `MotionValue`\n *\n * @public\n */ function useSpring(source) {\n    let config = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    _s32();\n    const { isStatic } = React.useContext(MotionConfigContext);\n    const activeSpringAnimation = React.useRef(null);\n    const value = useMotionValue(isMotionValue(source) ? toNumber(source.get()) : source);\n    const latestValue = React.useRef(value.get());\n    const latestSetter = React.useRef(()=>{});\n    const startAnimation = ()=>{\n        /**\n         * If the previous animation hasn't had the chance to even render a frame, render it now.\n         */ const animation = activeSpringAnimation.current;\n        if (animation && animation.time === 0) {\n            animation.sample(frameData.delta);\n        }\n        stopAnimation();\n        activeSpringAnimation.current = animateValue({\n            keyframes: [\n                value.get(),\n                latestValue.current\n            ],\n            velocity: value.getVelocity(),\n            type: \"spring\",\n            restDelta: 0.001,\n            restSpeed: 0.01,\n            ...config,\n            onUpdate: latestSetter.current\n        });\n    };\n    const stopAnimation = ()=>{\n        if (activeSpringAnimation.current) {\n            activeSpringAnimation.current.stop();\n        }\n    };\n    React.useInsertionEffect(()=>{\n        return value.attach((v, set)=>{\n            /**\n             * A more hollistic approach to this might be to use isStatic to fix VisualElement animations\n             * at that level, but this will work for now\n             */ if (isStatic) return set(v);\n            latestValue.current = v;\n            latestSetter.current = set;\n            frame.update(startAnimation);\n            return value.get();\n        }, stopAnimation);\n    }, [\n        JSON.stringify(config)\n    ]);\n    useIsomorphicLayoutEffect(()=>{\n        if (isMotionValue(source)) {\n            return source.on(\"change\", (v)=>value.set(toNumber(v)));\n        }\n    }, [\n        value\n    ]);\n    return value;\n}\n_s32(useSpring, \"bV1uaa3ryGKTAsMUQNE8QcriqkM=\", false, function() {\n    return [\n        useMotionValue,\n        useIsomorphicLayoutEffect\n    ];\n});\nfunction useMotionValueEvent(value, event, callback) {\n    _s33();\n    /**\n     * useInsertionEffect will create subscriptions before any other\n     * effects will run. Effects run upwards through the tree so it\n     * can be that binding a useLayoutEffect higher up the tree can\n     * miss changes from lower down the tree.\n     */ React.useInsertionEffect(()=>value.on(event, callback), [\n        value,\n        event,\n        callback\n    ]);\n}\n_s33(useMotionValueEvent, \"KP04oOqX3NbUYDsTwGwlE3GUn5Y=\");\n/**\n * Creates a `MotionValue` that updates when the velocity of the provided `MotionValue` changes.\n *\n * ```javascript\n * const x = useMotionValue(0)\n * const xVelocity = useVelocity(x)\n * const xAcceleration = useVelocity(xVelocity)\n * ```\n *\n * @public\n */ function useVelocity(value) {\n    _s34();\n    const velocity = useMotionValue(value.getVelocity());\n    const updateVelocity = ()=>{\n        const latest = value.getVelocity();\n        velocity.set(latest);\n        /**\n         * If we still have velocity, schedule an update for the next frame\n         * to keep checking until it is zero.\n         */ if (latest) frame.update(updateVelocity);\n    };\n    useMotionValueEvent(value, \"change\", ()=>{\n        // Schedule an update to this value at the end of the current frame.\n        frame.update(updateVelocity, false, true);\n    });\n    return velocity;\n}\n_s34(useVelocity, \"4IV0bg73/hk1TR/RdbPG8J7CuEo=\", false, function() {\n    return [\n        useMotionValue,\n        useMotionValueEvent\n    ];\n});\nfunction refWarning(name, ref) {\n    motionUtils.warning(Boolean(!ref || ref.current), \"You have defined a \".concat(name, \" options but the provided ref is not yet hydrated, probably because it's defined higher up the tree. Try calling useScroll() in the same component as the ref, or setting its `layoutEffect: false` option.\"));\n}\nconst createScrollMotionValues = ()=>({\n        scrollX: motionValue(0),\n        scrollY: motionValue(0),\n        scrollXProgress: motionValue(0),\n        scrollYProgress: motionValue(0)\n    });\nfunction useScroll() {\n    let { container, target, layoutEffect = true, ...options } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    _s35();\n    const values = useConstant(createScrollMotionValues);\n    const useLifecycleEffect = layoutEffect ? useIsomorphicLayoutEffect : React.useEffect;\n    useLifecycleEffect(()=>{\n        refWarning(\"target\", target);\n        refWarning(\"container\", container);\n        return scroll((_progress, param)=>{\n            let { x, y } = param;\n            values.scrollX.set(x.current);\n            values.scrollXProgress.set(x.progress);\n            values.scrollY.set(y.current);\n            values.scrollYProgress.set(y.progress);\n        }, {\n            ...options,\n            container: (container === null || container === void 0 ? void 0 : container.current) || undefined,\n            target: (target === null || target === void 0 ? void 0 : target.current) || undefined\n        });\n    }, [\n        container,\n        target,\n        JSON.stringify(options.offset)\n    ]);\n    return values;\n}\n_s35(useScroll, \"5SFhaW/+lTsxY40tRWnDRA0QXHY=\", true, function() {\n    return [\n        useConstant\n    ];\n});\n/**\n * @deprecated useElementScroll is deprecated. Convert to useScroll({ container: ref })\n */ function useElementScroll(ref) {\n    _s36();\n    if (true) {\n        warnOnce(false, \"useElementScroll is deprecated. Convert to useScroll({ container: ref }).\");\n    }\n    return useScroll({\n        container: ref\n    });\n}\n_s36(useElementScroll, \"U4G+6vKlssF+MbtnoDGrBkLarFs=\", false, function() {\n    return [\n        useScroll\n    ];\n});\n/**\n * @deprecated useViewportScroll is deprecated. Convert to useScroll()\n */ function useViewportScroll() {\n    _s37();\n    if (true) {\n        warnOnce(false, \"useViewportScroll is deprecated. Convert to useScroll().\");\n    }\n    return useScroll();\n}\n_s37(useViewportScroll, \"U4G+6vKlssF+MbtnoDGrBkLarFs=\", false, function() {\n    return [\n        useScroll\n    ];\n});\nfunction useAnimationFrame(callback) {\n    _s38();\n    const initialTimestamp = React.useRef(0);\n    const { isStatic } = React.useContext(MotionConfigContext);\n    React.useEffect(()=>{\n        if (isStatic) return;\n        const provideTimeSinceStart = (param)=>{\n            let { timestamp, delta } = param;\n            if (!initialTimestamp.current) initialTimestamp.current = timestamp;\n            callback(timestamp - initialTimestamp.current, delta);\n        };\n        frame.update(provideTimeSinceStart, true);\n        return ()=>cancelFrame(provideTimeSinceStart);\n    }, [\n        callback\n    ]);\n}\n_s38(useAnimationFrame, \"Pm8xyeE8FFKcAlKdvdxQCRkOQak=\");\nfunction useTime() {\n    _s39();\n    const time = useMotionValue(0);\n    useAnimationFrame((t)=>time.set(t));\n    return time;\n}\n_s39(useTime, \"hr4M5nL3Wrc+cV9Sjqj3vyP5sME=\", false, function() {\n    return [\n        useMotionValue,\n        useAnimationFrame\n    ];\n});\nfunction getWillChangeName(name) {\n    if (transformProps.has(name)) {\n        return \"transform\";\n    } else if (acceleratedValues.has(name)) {\n        return camelToDash(name);\n    }\n}\nclass WillChangeMotionValue extends MotionValue {\n    add(name) {\n        const styleName = getWillChangeName(name);\n        if (styleName) {\n            addUniqueItem(this.values, styleName);\n            this.update();\n        }\n    }\n    update() {\n        this.set(this.values.length ? this.values.join(\", \") : \"auto\");\n    }\n    constructor(){\n        super(...arguments);\n        this.values = [];\n    }\n}\nfunction useWillChange() {\n    _s40();\n    return useConstant(()=>new WillChangeMotionValue(\"auto\"));\n}\n_s40(useWillChange, \"6Hotjiq5jReIayUUDmjTUZRF2W0=\", false, function() {\n    return [\n        useConstant\n    ];\n});\n/**\n * A hook that returns `true` if we should be using reduced motion based on the current device's Reduced Motion setting.\n *\n * This can be used to implement changes to your UI based on Reduced Motion. For instance, replacing motion-sickness inducing\n * `x`/`y` animations with `opacity`, disabling the autoplay of background videos, or turning off parallax motion.\n *\n * It will actively respond to changes and re-render your components with the latest setting.\n *\n * ```jsx\n * export function Sidebar({ isOpen }) {\n *   const shouldReduceMotion = useReducedMotion()\n *   const closedX = shouldReduceMotion ? 0 : \"-100%\"\n *\n *   return (\n *     <motion.div animate={{\n *       opacity: isOpen ? 1 : 0,\n *       x: isOpen ? 0 : closedX\n *     }} />\n *   )\n * }\n * ```\n *\n * @return boolean\n *\n * @public\n */ function useReducedMotion() {\n    _s41();\n    /**\n     * Lazy initialisation of prefersReducedMotion\n     */ !hasReducedMotionListener.current && initPrefersReducedMotion();\n    const [shouldReduceMotion] = React.useState(prefersReducedMotion.current);\n    if (true) {\n        warnOnce(shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n    }\n    /**\n     * TODO See if people miss automatically updating shouldReduceMotion setting\n     */ return shouldReduceMotion;\n}\n_s41(useReducedMotion, \"CbImzP0CWFM+MuUZHtZd9vjB/hs=\");\nfunction useReducedMotionConfig() {\n    _s42();\n    const reducedMotionPreference = useReducedMotion();\n    const { reducedMotion } = React.useContext(MotionConfigContext);\n    if (reducedMotion === \"never\") {\n        return false;\n    } else if (reducedMotion === \"always\") {\n        return true;\n    } else {\n        return reducedMotionPreference;\n    }\n}\n_s42(useReducedMotionConfig, \"3dXvPOw2z6pf5TxzxEmxB2/0D8I=\", false, function() {\n    return [\n        useReducedMotion\n    ];\n});\nfunction stopAnimation(visualElement) {\n    visualElement.values.forEach((value)=>value.stop());\n}\nfunction setVariants(visualElement, variantLabels) {\n    const reversedLabels = [\n        ...variantLabels\n    ].reverse();\n    reversedLabels.forEach((key)=>{\n        const variant = visualElement.getVariant(key);\n        variant && setTarget(visualElement, variant);\n        if (visualElement.variantChildren) {\n            visualElement.variantChildren.forEach((child)=>{\n                setVariants(child, variantLabels);\n            });\n        }\n    });\n}\nfunction setValues(visualElement, definition) {\n    if (Array.isArray(definition)) {\n        return setVariants(visualElement, definition);\n    } else if (typeof definition === \"string\") {\n        return setVariants(visualElement, [\n            definition\n        ]);\n    } else {\n        setTarget(visualElement, definition);\n    }\n}\n/**\n * @public\n */ function animationControls() {\n    /**\n     * Track whether the host component has mounted.\n     */ let hasMounted = false;\n    /**\n     * A collection of linked component animation controls.\n     */ const subscribers = new Set();\n    const controls = {\n        subscribe (visualElement) {\n            subscribers.add(visualElement);\n            return ()=>void subscribers.delete(visualElement);\n        },\n        start (definition, transitionOverride) {\n            motionUtils.invariant(hasMounted, \"controls.start() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n            const animations = [];\n            subscribers.forEach((visualElement)=>{\n                animations.push(animateVisualElement(visualElement, definition, {\n                    transitionOverride\n                }));\n            });\n            return Promise.all(animations);\n        },\n        set (definition) {\n            motionUtils.invariant(hasMounted, \"controls.set() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n            return subscribers.forEach((visualElement)=>{\n                setValues(visualElement, definition);\n            });\n        },\n        stop () {\n            subscribers.forEach((visualElement)=>{\n                stopAnimation(visualElement);\n            });\n        },\n        mount () {\n            hasMounted = true;\n            return ()=>{\n                hasMounted = false;\n                controls.stop();\n            };\n        }\n    };\n    return controls;\n}\nfunction useAnimate() {\n    _s43();\n    const scope = useConstant(()=>({\n            current: null,\n            animations: []\n        }));\n    const animate = useConstant(()=>createScopedAnimate(scope));\n    useUnmountEffect(()=>{\n        scope.animations.forEach((animation)=>animation.stop());\n    });\n    return [\n        scope,\n        animate\n    ];\n}\n_s43(useAnimate, \"MZtGUmeo3A41mDCLYnLeUxqHeTQ=\", false, function() {\n    return [\n        useConstant,\n        useConstant,\n        useUnmountEffect\n    ];\n});\nfunction useAnimateMini() {\n    _s44();\n    const scope = useConstant(()=>({\n            current: null,\n            animations: []\n        }));\n    const animate = useConstant(()=>createScopedWaapiAnimate(scope));\n    useUnmountEffect(()=>{\n        scope.animations.forEach((animation)=>animation.stop());\n    });\n    return [\n        scope,\n        animate\n    ];\n}\n_s44(useAnimateMini, \"MZtGUmeo3A41mDCLYnLeUxqHeTQ=\", false, function() {\n    return [\n        useConstant,\n        useConstant,\n        useUnmountEffect\n    ];\n});\n/**\n * Creates `AnimationControls`, which can be used to manually start, stop\n * and sequence animations on one or more components.\n *\n * The returned `AnimationControls` should be passed to the `animate` property\n * of the components you want to animate.\n *\n * These components can then be animated with the `start` method.\n *\n * ```jsx\n * import * as React from 'react'\n * import { motion, useAnimation } from 'framer-motion'\n *\n * export function MyComponent(props) {\n *    const controls = useAnimation()\n *\n *    controls.start({\n *        x: 100,\n *        transition: { duration: 0.5 },\n *    })\n *\n *    return <motion.div animate={controls} />\n * }\n * ```\n *\n * @returns Animation controller with `start` and `stop` methods\n *\n * @public\n */ function useAnimationControls() {\n    _s45();\n    const controls = useConstant(animationControls);\n    useIsomorphicLayoutEffect(controls.mount, []);\n    return controls;\n}\n_s45(useAnimationControls, \"s7RO+LNsOcGGxaaMjW5w8PrpV3Y=\", false, function() {\n    return [\n        useConstant,\n        useIsomorphicLayoutEffect\n    ];\n});\nconst useAnimation = useAnimationControls;\n/**\n * Cycles through a series of visual properties. Can be used to toggle between or cycle through animations. It works similar to `useState` in React. It is provided an initial array of possible states, and returns an array of two arguments.\n *\n * An index value can be passed to the returned `cycle` function to cycle to a specific index.\n *\n * ```jsx\n * import * as React from \"react\"\n * import { motion, useCycle } from \"framer-motion\"\n *\n * export const MyComponent = () => {\n *   const [x, cycleX] = useCycle(0, 50, 100)\n *\n *   return (\n *     <motion.div\n *       animate={{ x: x }}\n *       onTap={() => cycleX()}\n *      />\n *    )\n * }\n * ```\n *\n * @param items - items to cycle through\n * @returns [currentState, cycleState]\n *\n * @public\n */ function useCycle() {\n    for(var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++){\n        items[_key] = arguments[_key];\n    }\n    _s46();\n    const index = React.useRef(0);\n    const [item, setItem] = React.useState(items[index.current]);\n    const runCycle = React.useCallback((next)=>{\n        index.current = typeof next !== \"number\" ? wrap(0, items.length, index.current + 1) : next;\n        setItem(items[index.current]);\n    }, // The array will change on each call, but by putting items.length at\n    // the front of this array, we guarantee the dependency comparison will match up\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        items.length,\n        ...items\n    ]);\n    return [\n        item,\n        runCycle\n    ];\n}\n_s46(useCycle, \"9Zwx6cTmpE8bkp10hV72lIbfnLY=\");\nfunction useInView(ref) {\n    let { root, margin, amount, once = false } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    _s47();\n    const [isInView, setInView] = React.useState(false);\n    React.useEffect(()=>{\n        if (!ref.current || once && isInView) return;\n        const onEnter = ()=>{\n            setInView(true);\n            return once ? undefined : ()=>setInView(false);\n        };\n        const options = {\n            root: root && root.current || undefined,\n            margin,\n            amount\n        };\n        return inView(ref.current, onEnter, options);\n    }, [\n        root,\n        ref,\n        margin,\n        once,\n        amount\n    ]);\n    return isInView;\n}\n_s47(useInView, \"E7M6WKi+YUjygLFuCIIecspm+hc=\");\n/**\n * Can manually trigger a drag gesture on one or more `drag`-enabled `motion` components.\n *\n * ```jsx\n * const dragControls = useDragControls()\n *\n * function startDrag(event) {\n *   dragControls.start(event, { snapToCursor: true })\n * }\n *\n * return (\n *   <>\n *     <div onPointerDown={startDrag} />\n *     <motion.div drag=\"x\" dragControls={dragControls} />\n *   </>\n * )\n * ```\n *\n * @public\n */ class DragControls {\n    /**\n     * Subscribe a component's internal `VisualElementDragControls` to the user-facing API.\n     *\n     * @internal\n     */ subscribe(controls) {\n        this.componentControls.add(controls);\n        return ()=>this.componentControls.delete(controls);\n    }\n    /**\n     * Start a drag gesture on every `motion` component that has this set of drag controls\n     * passed into it via the `dragControls` prop.\n     *\n     * ```jsx\n     * dragControls.start(e, {\n     *   snapToCursor: true\n     * })\n     * ```\n     *\n     * @param event - PointerEvent\n     * @param options - Options\n     *\n     * @public\n     */ start(event, options) {\n        this.componentControls.forEach((controls)=>{\n            controls.start(event.nativeEvent || event, options);\n        });\n    }\n    constructor(){\n        this.componentControls = new Set();\n    }\n}\nconst createDragControls = ()=>new DragControls();\n/**\n * Usually, dragging is initiated by pressing down on a `motion` component with a `drag` prop\n * and moving it. For some use-cases, for instance clicking at an arbitrary point on a video scrubber, we\n * might want to initiate that dragging from a different component than the draggable one.\n *\n * By creating a `dragControls` using the `useDragControls` hook, we can pass this into\n * the draggable component's `dragControls` prop. It exposes a `start` method\n * that can start dragging from pointer events on other components.\n *\n * ```jsx\n * const dragControls = useDragControls()\n *\n * function startDrag(event) {\n *   dragControls.start(event, { snapToCursor: true })\n * }\n *\n * return (\n *   <>\n *     <div onPointerDown={startDrag} />\n *     <motion.div drag=\"x\" dragControls={dragControls} />\n *   </>\n * )\n * ```\n *\n * @public\n */ function useDragControls() {\n    _s48();\n    return useConstant(createDragControls);\n}\n_s48(useDragControls, \"6Hotjiq5jReIayUUDmjTUZRF2W0=\", false, function() {\n    return [\n        useConstant\n    ];\n});\n/**\n * Attaches an event listener directly to the provided DOM element.\n *\n * Bypassing React's event system can be desirable, for instance when attaching non-passive\n * event handlers.\n *\n * ```jsx\n * const ref = useRef(null)\n *\n * useDomEvent(ref, 'wheel', onWheel, { passive: false })\n *\n * return <div ref={ref} />\n * ```\n *\n * @param ref - React.RefObject that's been provided to the element you want to bind the listener to.\n * @param eventName - Name of the event you want listen for.\n * @param handler - Function to fire when receiving the event.\n * @param options - Options to pass to `Event.addEventListener`.\n *\n * @public\n */ function useDomEvent(ref, eventName, handler, options) {\n    _s49();\n    React.useEffect(()=>{\n        const element = ref.current;\n        if (handler && element) {\n            return addDomEvent(element, eventName, handler, options);\n        }\n    }, [\n        ref,\n        eventName,\n        handler,\n        options\n    ]);\n}\n_s49(useDomEvent, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n/**\n * Checks if a component is a `motion` component.\n */ function isMotionComponent(component) {\n    return component !== null && typeof component === \"object\" && motionComponentSymbol in component;\n}\n/**\n * Unwraps a `motion` component and returns either a string for `motion.div` or\n * the React component for `motion(Component)`.\n *\n * If the component is not a `motion` component it returns undefined.\n */ function unwrapMotionComponent(component) {\n    if (isMotionComponent(component)) {\n        return component[motionComponentSymbol];\n    }\n    return undefined;\n}\nfunction useInstantLayoutTransition() {\n    return startTransition;\n}\nfunction startTransition(callback) {\n    if (!rootProjectionNode.current) return;\n    rootProjectionNode.current.isUpdating = false;\n    rootProjectionNode.current.blockUpdate();\n    callback && callback();\n}\nfunction useInstantTransition() {\n    _s50();\n    const [forceUpdate, forcedRenderCount] = useForceUpdate();\n    const startInstantLayoutTransition = useInstantLayoutTransition();\n    const unlockOnFrameRef = React.useRef(-1);\n    React.useEffect(()=>{\n        /**\n         * Unblock after two animation frames, otherwise this will unblock too soon.\n         */ frame.postRender(()=>frame.postRender(()=>{\n                /**\n             * If the callback has been called again after the effect\n             * triggered this 2 frame delay, don't unblock animations. This\n             * prevents the previous effect from unblocking the current\n             * instant transition too soon. This becomes more likely when\n             * used in conjunction with React.startTransition().\n             */ if (forcedRenderCount !== unlockOnFrameRef.current) return;\n                instantAnimationState.current = false;\n            }));\n    }, [\n        forcedRenderCount\n    ]);\n    return (callback)=>{\n        startInstantLayoutTransition(()=>{\n            instantAnimationState.current = true;\n            forceUpdate();\n            callback();\n            unlockOnFrameRef.current = forcedRenderCount + 1;\n        });\n    };\n}\n_s50(useInstantTransition, \"yLohngYJnlTdFBddQXlL3rB3xdU=\", false, function() {\n    return [\n        useForceUpdate,\n        useInstantLayoutTransition\n    ];\n});\nfunction disableInstantTransitions() {\n    instantAnimationState.current = false;\n}\nfunction useResetProjection() {\n    _s51();\n    const reset = React.useCallback(()=>{\n        const root = rootProjectionNode.current;\n        if (!root) return;\n        root.resetTree();\n    }, []);\n    return reset;\n}\n_s51(useResetProjection, \"mR3q1MLZtzRgZsgcHvQlMrEBBfk=\");\nconst appearStoreId = (elementId, valueName)=>{\n    const key = transformProps.has(valueName) ? \"transform\" : valueName;\n    return \"\".concat(elementId, \": \").concat(key);\n};\nconst appearAnimationStore = new Map();\nconst appearComplete = new Map();\nfunction handoffOptimizedAppearAnimation(elementId, valueName, frame) {\n    var _a;\n    const storeId = appearStoreId(elementId, valueName);\n    const optimisedAnimation = appearAnimationStore.get(storeId);\n    if (!optimisedAnimation) {\n        return null;\n    }\n    const { animation, startTime } = optimisedAnimation;\n    function cancelAnimation() {\n        var _a;\n        (_a = window.MotionCancelOptimisedAnimation) === null || _a === void 0 ? void 0 : _a.call(window, elementId, valueName, frame);\n    }\n    /**\n     * We can cancel the animation once it's finished now that we've synced\n     * with Motion.\n     *\n     * Prefer onfinish over finished as onfinish is backwards compatible with\n     * older browsers.\n     */ animation.onfinish = cancelAnimation;\n    if (startTime === null || ((_a = window.MotionHandoffIsComplete) === null || _a === void 0 ? void 0 : _a.call(window, elementId))) {\n        /**\n         * If the startTime is null, this animation is the Paint Ready detection animation\n         * and we can cancel it immediately without handoff.\n         *\n         * Or if we've already handed off the animation then we're now interrupting it.\n         * In which case we need to cancel it.\n         */ cancelAnimation();\n        return null;\n    } else {\n        return startTime;\n    }\n}\n/**\n * A single time to use across all animations to manually set startTime\n * and ensure they're all in sync.\n */ let startFrameTime;\n/**\n * A dummy animation to detect when Chrome is ready to start\n * painting the page and hold off from triggering the real animation\n * until then. We only need one animation to detect paint ready.\n *\n * https://bugs.chromium.org/p/chromium/issues/detail?id=1406850\n */ let readyAnimation;\n/**\n * Keep track of animations that were suspended vs cancelled so we\n * can easily resume them when we're done measuring layout.\n */ const suspendedAnimations = new Set();\nfunction resumeSuspendedAnimations() {\n    suspendedAnimations.forEach((data)=>{\n        data.animation.play();\n        data.animation.startTime = data.startTime;\n    });\n    suspendedAnimations.clear();\n}\nfunction startOptimizedAppearAnimation(element, name, keyframes, options, onReady) {\n    // Prevent optimised appear animations if Motion has already started animating.\n    if (window.MotionIsMounted) {\n        return;\n    }\n    const id = element.dataset[optimizedAppearDataId];\n    if (!id) return;\n    window.MotionHandoffAnimation = handoffOptimizedAppearAnimation;\n    const storeId = appearStoreId(id, name);\n    if (!readyAnimation) {\n        readyAnimation = startWaapiAnimation(element, name, [\n            keyframes[0],\n            keyframes[0]\n        ], /**\n         * 10 secs is basically just a super-safe duration to give Chrome\n         * long enough to get the animation ready.\n         */ {\n            duration: 10000,\n            ease: \"linear\"\n        });\n        appearAnimationStore.set(storeId, {\n            animation: readyAnimation,\n            startTime: null\n        });\n        /**\n         * If there's no readyAnimation then there's been no instantiation\n         * of handoff animations.\n         */ window.MotionHandoffAnimation = handoffOptimizedAppearAnimation;\n        window.MotionHasOptimisedAnimation = (elementId, valueName)=>{\n            if (!elementId) return false;\n            /**\n             * Keep a map of elementIds that have started animating. We check\n             * via ID instead of Element because of hydration errors and\n             * pre-hydration checks. We also actively record IDs as they start\n             * animating rather than simply checking for data-appear-id as\n             * this attrbute might be present but not lead to an animation, for\n             * instance if the element's appear animation is on a different\n             * breakpoint.\n             */ if (!valueName) {\n                return appearComplete.has(elementId);\n            }\n            const animationId = appearStoreId(elementId, valueName);\n            return Boolean(appearAnimationStore.get(animationId));\n        };\n        window.MotionHandoffMarkAsComplete = (elementId)=>{\n            if (appearComplete.has(elementId)) {\n                appearComplete.set(elementId, true);\n            }\n        };\n        window.MotionHandoffIsComplete = (elementId)=>{\n            return appearComplete.get(elementId) === true;\n        };\n        /**\n         * We only need to cancel transform animations as\n         * they're the ones that will interfere with the\n         * layout animation measurements.\n         */ window.MotionCancelOptimisedAnimation = (elementId, valueName, frame, canResume)=>{\n            const animationId = appearStoreId(elementId, valueName);\n            const data = appearAnimationStore.get(animationId);\n            if (!data) return;\n            if (frame && canResume === undefined) {\n                /**\n                 * Wait until the end of the subsequent frame to cancel the animation\n                 * to ensure we don't remove the animation before the main thread has\n                 * had a chance to resolve keyframes and render.\n                 */ frame.postRender(()=>{\n                    frame.postRender(()=>{\n                        data.animation.cancel();\n                    });\n                });\n            } else {\n                data.animation.cancel();\n            }\n            if (frame && canResume) {\n                suspendedAnimations.add(data);\n                frame.render(resumeSuspendedAnimations);\n            } else {\n                appearAnimationStore.delete(animationId);\n                /**\n                 * If there are no more animations left, we can remove the cancel function.\n                 * This will let us know when we can stop checking for conflicting layout animations.\n                 */ if (!appearAnimationStore.size) {\n                    window.MotionCancelOptimisedAnimation = undefined;\n                }\n            }\n        };\n        window.MotionCheckAppearSync = (visualElement, valueName, value)=>{\n            var _a, _b;\n            const appearId = getOptimisedAppearId(visualElement);\n            if (!appearId) return;\n            const valueIsOptimised = (_a = window.MotionHasOptimisedAnimation) === null || _a === void 0 ? void 0 : _a.call(window, appearId, valueName);\n            const externalAnimationValue = (_b = visualElement.props.values) === null || _b === void 0 ? void 0 : _b[valueName];\n            if (!valueIsOptimised || !externalAnimationValue) return;\n            const removeSyncCheck = value.on(\"change\", (latestValue)=>{\n                var _a;\n                if (externalAnimationValue.get() !== latestValue) {\n                    (_a = window.MotionCancelOptimisedAnimation) === null || _a === void 0 ? void 0 : _a.call(window, appearId, valueName);\n                    removeSyncCheck();\n                }\n            });\n            return removeSyncCheck;\n        };\n    }\n    const startAnimation = ()=>{\n        readyAnimation.cancel();\n        const appearAnimation = startWaapiAnimation(element, name, keyframes, options);\n        /**\n         * Record the time of the first started animation. We call performance.now() once\n         * here and once in handoff to ensure we're getting\n         * close to a frame-locked time. This keeps all animations in sync.\n         */ if (startFrameTime === undefined) {\n            startFrameTime = performance.now();\n        }\n        appearAnimation.startTime = startFrameTime;\n        appearAnimationStore.set(storeId, {\n            animation: appearAnimation,\n            startTime: startFrameTime\n        });\n        if (onReady) onReady(appearAnimation);\n    };\n    appearComplete.set(id, false);\n    if (readyAnimation.ready) {\n        readyAnimation.ready.then(startAnimation).catch(motionUtils.noop);\n    } else {\n        startAnimation();\n    }\n}\nconst createObject = ()=>({});\nclass StateVisualElement extends VisualElement {\n    build() {}\n    resetTransform() {}\n    restoreTransform() {}\n    removeValueFromRenderState() {}\n    renderInstance() {}\n    scrapeMotionValuesFromProps() {\n        return createObject();\n    }\n    getBaseTargetFromProps() {\n        return undefined;\n    }\n    readValueFromInstance(_state, key, options) {\n        return options.initialState[key] || 0;\n    }\n    sortInstanceNodePosition() {\n        return 0;\n    }\n    constructor(){\n        super(...arguments);\n        this.measureInstanceViewportBox = createBox;\n    }\n}\nconst useVisualState = makeUseVisualState({\n    scrapeMotionValuesFromProps: createObject,\n    createRenderState: createObject\n});\n/**\n * This is not an officially supported API and may be removed\n * on any version.\n */ function useAnimatedState(initialState) {\n    _s52();\n    const [animationState, setAnimationState] = React.useState(initialState);\n    const visualState = useVisualState({}, false);\n    const element = useConstant(()=>{\n        return new StateVisualElement({\n            props: {\n                onUpdate: (v)=>{\n                    setAnimationState({\n                        ...v\n                    });\n                }\n            },\n            visualState,\n            presenceContext: null\n        }, {\n            initialState\n        });\n    });\n    React.useLayoutEffect(()=>{\n        element.mount({});\n        return ()=>element.unmount();\n    }, [\n        element\n    ]);\n    const startAnimation = useConstant(()=>(animationDefinition)=>{\n            return animateVisualElement(element, animationDefinition);\n        });\n    return [\n        animationState,\n        startAnimation\n    ];\n}\n_s52(useAnimatedState, \"BaCKSGicGkj+7U0A7zzlCgROXA8=\", false, function() {\n    return [\n        useVisualState,\n        useConstant,\n        useConstant\n    ];\n});\n// Keep things reasonable and avoid scale: Infinity. In practise we might need\n// to add another value, opacity, that could interpolate scaleX/Y [0,0.01] => [0,1]\n// to simply hide content at unreasonable scales.\nconst maxScale = 100000;\nconst invertScale = (scale)=>scale > 0.001 ? 1 / scale : maxScale;\nlet hasWarned = false;\n/**\n * Returns a `MotionValue` each for `scaleX` and `scaleY` that update with the inverse\n * of their respective parent scales.\n *\n * This is useful for undoing the distortion of content when scaling a parent component.\n *\n * By default, `useInvertedScale` will automatically fetch `scaleX` and `scaleY` from the nearest parent.\n * By passing other `MotionValue`s in as `useInvertedScale({ scaleX, scaleY })`, it will invert the output\n * of those instead.\n *\n * ```jsx\n * const MyComponent = () => {\n *   const { scaleX, scaleY } = useInvertedScale()\n *   return <motion.div style={{ scaleX, scaleY }} />\n * }\n * ```\n *\n * @deprecated\n */ function useInvertedScale(scale) {\n    _s53();\n    let parentScaleX = useMotionValue(1);\n    let parentScaleY = useMotionValue(1);\n    const { visualElement } = React.useContext(MotionContext);\n    motionUtils.invariant(!!(scale || visualElement), \"If no scale values are provided, useInvertedScale must be used within a child of another motion component.\");\n    motionUtils.warning(hasWarned, \"useInvertedScale is deprecated and will be removed in 3.0. Use the layout prop instead.\");\n    hasWarned = true;\n    if (scale) {\n        parentScaleX = scale.scaleX || parentScaleX;\n        parentScaleY = scale.scaleY || parentScaleY;\n    } else if (visualElement) {\n        parentScaleX = visualElement.getValue(\"scaleX\", 1);\n        parentScaleY = visualElement.getValue(\"scaleY\", 1);\n    }\n    const scaleX = useTransform(parentScaleX, invertScale);\n    const scaleY = useTransform(parentScaleY, invertScale);\n    return {\n        scaleX,\n        scaleY\n    };\n}\n_s53(useInvertedScale, \"6hJiEnj3+2UwWUlnnln1jLPl9sI=\", false, function() {\n    return [\n        useMotionValue,\n        useMotionValue,\n        useTransform,\n        useTransform\n    ];\n});\nlet id = 0;\nconst AnimateSharedLayout = (param)=>{\n    let { children } = param;\n    _s54();\n    React__namespace.useEffect(()=>{\n        motionUtils.invariant(false, \"AnimateSharedLayout is deprecated: https://www.framer.com/docs/guide-upgrade/##shared-layout-animations\");\n    }, []);\n    return jsxRuntime.jsx(LayoutGroup, {\n        id: useConstant(()=>\"asl-\".concat(id++)),\n        children: children\n    });\n};\n_s54(AnimateSharedLayout, \"6Asiosfd5muJCrePGOibZvd7pb4=\", false, function() {\n    return [\n        useConstant\n    ];\n});\n_c12 = AnimateSharedLayout;\nObject.defineProperty(exports, \"invariant\", ({\n    enumerable: true,\n    get: function() {\n        return motionUtils.invariant;\n    }\n}));\nObject.defineProperty(exports, \"noop\", ({\n    enumerable: true,\n    get: function() {\n        return motionUtils.noop;\n    }\n}));\nObject.defineProperty(exports, \"isDragActive\", ({\n    enumerable: true,\n    get: function() {\n        return motionDom.isDragActive;\n    }\n}));\nexports.AcceleratedAnimation = AcceleratedAnimation;\nexports.AnimatePresence = AnimatePresence;\nexports.AnimateSharedLayout = AnimateSharedLayout;\nexports.DeprecatedLayoutGroupContext = DeprecatedLayoutGroupContext;\nexports.DragControls = DragControls;\nexports.FlatTree = FlatTree;\nexports.LayoutGroup = LayoutGroup;\nexports.LayoutGroupContext = LayoutGroupContext;\nexports.LazyMotion = LazyMotion;\nexports.MotionConfig = MotionConfig;\nexports.MotionConfigContext = MotionConfigContext;\nexports.MotionContext = MotionContext;\nexports.MotionGlobalConfig = MotionGlobalConfig;\nexports.MotionValue = MotionValue;\nexports.PresenceContext = PresenceContext;\nexports.Reorder = namespace;\nexports.SwitchLayoutGroupContext = SwitchLayoutGroupContext;\nexports.VisualElement = VisualElement;\nexports.addPointerEvent = addPointerEvent;\nexports.addPointerInfo = addPointerInfo;\nexports.addScaleCorrector = addScaleCorrector;\nexports.animate = animate;\nexports.animateMini = animateMini;\nexports.animateValue = animateValue;\nexports.animateVisualElement = animateVisualElement;\nexports.animationControls = animationControls;\nexports.animations = animations;\nexports.anticipate = anticipate;\nexports.backIn = backIn;\nexports.backInOut = backInOut;\nexports.backOut = backOut;\nexports.buildTransform = buildTransform;\nexports.calcLength = calcLength;\nexports.cancelFrame = cancelFrame;\nexports.cancelSync = cancelSync;\nexports.circIn = circIn;\nexports.circInOut = circInOut;\nexports.circOut = circOut;\nexports.clamp = clamp;\nexports.color = color;\nexports.complex = complex;\nexports.createBox = createBox;\nexports.createRendererMotionComponent = createRendererMotionComponent;\nexports.createScopedAnimate = createScopedAnimate;\nexports.cubicBezier = cubicBezier;\nexports.delay = delay;\nexports.disableInstantTransitions = disableInstantTransitions;\nexports.distance = distance;\nexports.distance2D = distance2D;\nexports.domAnimation = domAnimation;\nexports.domMax = domMax;\nexports.domMin = domMin;\nexports.easeIn = easeIn;\nexports.easeInOut = easeInOut;\nexports.easeOut = easeOut;\nexports.filterProps = filterProps;\nexports.findSpring = findSpring;\nexports.frame = frame;\nexports.frameData = frameData;\nexports.frameSteps = frameSteps;\nexports.inView = inView;\nexports.inertia = inertia;\nexports.interpolate = interpolate;\nexports.isBrowser = isBrowser;\nexports.isMotionComponent = isMotionComponent;\nexports.isMotionValue = isMotionValue;\nexports.isValidMotionProp = isValidMotionProp;\nexports.keyframes = keyframes;\nexports.m = m;\nexports.makeUseVisualState = makeUseVisualState;\nexports.mirrorEasing = mirrorEasing;\nexports.mix = mix;\nexports.motion = motion;\nexports.motionValue = motionValue;\nexports.optimizedAppearDataAttribute = optimizedAppearDataAttribute;\nexports.pipe = pipe;\nexports.progress = progress;\nexports.px = px;\nexports.resolveMotionValue = resolveMotionValue;\nexports.reverseEasing = reverseEasing;\nexports.scroll = scroll;\nexports.scrollInfo = scrollInfo;\nexports.spring = spring;\nexports.stagger = stagger;\nexports.startOptimizedAppearAnimation = startOptimizedAppearAnimation;\nexports.steps = steps;\nexports.sync = sync;\nexports.time = time;\nexports.transform = transform;\nexports.unwrapMotionComponent = unwrapMotionComponent;\nexports.useAnimate = useAnimate;\nexports.useAnimateMini = useAnimateMini;\nexports.useAnimation = useAnimation;\nexports.useAnimationControls = useAnimationControls;\nexports.useAnimationFrame = useAnimationFrame;\nexports.useCycle = useCycle;\nexports.useDeprecatedAnimatedState = useAnimatedState;\nexports.useDeprecatedInvertedScale = useInvertedScale;\nexports.useDomEvent = useDomEvent;\nexports.useDragControls = useDragControls;\nexports.useElementScroll = useElementScroll;\nexports.useForceUpdate = useForceUpdate;\nexports.useInView = useInView;\nexports.useInstantLayoutTransition = useInstantLayoutTransition;\nexports.useInstantTransition = useInstantTransition;\nexports.useIsPresent = useIsPresent;\nexports.useIsomorphicLayoutEffect = useIsomorphicLayoutEffect;\nexports.useMotionTemplate = useMotionTemplate;\nexports.useMotionValue = useMotionValue;\nexports.useMotionValueEvent = useMotionValueEvent;\nexports.usePresence = usePresence;\nexports.useReducedMotion = useReducedMotion;\nexports.useReducedMotionConfig = useReducedMotionConfig;\nexports.useResetProjection = useResetProjection;\nexports.useScroll = useScroll;\nexports.useSpring = useSpring;\nexports.useTime = useTime;\nexports.useTransform = useTransform;\nexports.useUnmountEffect = useUnmountEffect;\nexports.useVelocity = useVelocity;\nexports.useViewportScroll = useViewportScroll;\nexports.useWillChange = useWillChange;\nexports.visualElementStore = visualElementStore;\nexports.wrap = wrap;\nvar _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12;\n$RefreshReg$(_c, \"React__namespace\");\n$RefreshReg$(_c1, \"MeasureLayout\");\n$RefreshReg$(_c2, \"PopChild\");\n$RefreshReg$(_c3, \"PresenceChild\");\n$RefreshReg$(_c4, \"AnimatePresence\");\n$RefreshReg$(_c5, \"MotionConfig\");\n$RefreshReg$(_c6, \"LazyMotion\");\n$RefreshReg$(_c7, \"LayoutGroup\");\n$RefreshReg$(_c8, \"ReorderGroupComponent\");\n$RefreshReg$(_c9, \"ReorderGroup\");\n$RefreshReg$(_c10, \"ReorderItemComponent\");\n$RefreshReg$(_c11, \"ReorderItem\");\n$RefreshReg$(_c12, \"AnimateSharedLayout\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/framer-motion/dist/cjs/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/Icon.js":
/*!****************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/Icon.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Icon; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _defaultAttributes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./defaultAttributes.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/defaultAttributes.js\");\n/* harmony import */ var _shared_src_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shared/src/utils.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/shared/src/utils.js\");\n/**\n * @license lucide-react v0.469.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \n\n\nconst Icon = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(_c = (param, ref)=>{\n    let { color = \"currentColor\", size = 24, strokeWidth = 2, absoluteStrokeWidth, className = \"\", children, iconNode, ...rest } = param;\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"svg\", {\n        ref,\n        ..._defaultAttributes_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n        width: size,\n        height: size,\n        stroke: color,\n        strokeWidth: absoluteStrokeWidth ? Number(strokeWidth) * 24 / Number(size) : strokeWidth,\n        className: (0,_shared_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.mergeClasses)(\"lucide\", className),\n        ...rest\n    }, [\n        ...iconNode.map((param)=>{\n            let [tag, attrs] = param;\n            return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(tag, attrs);\n        }),\n        ...Array.isArray(children) ? children : [\n            children\n        ]\n    ]);\n});\n_c1 = Icon;\n //# sourceMappingURL=Icon.js.map\nvar _c, _c1;\n$RefreshReg$(_c, \"Icon$forwardRef\");\n$RefreshReg$(_c1, \"Icon\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vSWNvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7OztDQUtDLEdBRWlEO0FBQ0s7QUFDRjtBQUVyRCxNQUFNSSxxQkFBT0osaURBQVVBLE1BQ3JCLFFBU0dLO1FBVEYsRUFDQ0MsUUFBUSxjQUFjLEVBQ3RCQyxPQUFPLEVBQUUsRUFDVEMsY0FBYyxDQUFDLEVBQ2ZDLG1CQUFtQixFQUNuQkMsWUFBWSxFQUFFLEVBQ2RDLFFBQVEsRUFDUkMsUUFBUSxFQUNSLEdBQUdDLE1BQ0o7SUFDQyxxQkFBT1osb0RBQWFBLENBQ2xCLE9BQ0E7UUFDRUk7UUFDQSxHQUFHSCw2REFBaUI7UUFDcEJZLE9BQU9QO1FBQ1BRLFFBQVFSO1FBQ1JTLFFBQVFWO1FBQ1JFLGFBQWFDLHNCQUFzQlEsT0FBT1QsZUFBZSxLQUFLUyxPQUFPVixRQUFRQztRQUM3RUUsV0FBV1Asa0VBQVlBLENBQUMsVUFBVU87UUFDbEMsR0FBR0csSUFBSTtJQUNULEdBQ0E7V0FDS0QsU0FBU00sR0FBRyxDQUFDO2dCQUFDLENBQUNDLEtBQUtDLE1BQU07aUNBQUtuQixvREFBYUEsQ0FBQ2tCLEtBQUtDOztXQUNsREMsTUFBTUMsT0FBTyxDQUFDWCxZQUFZQSxXQUFXO1lBQUNBO1NBQVM7S0FDbkQ7QUFFTDs7QUFHeUIsQ0FDM0IsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vSWNvbi5qcz85MjMxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2UgbHVjaWRlLXJlYWN0IHYwLjQ2OS4wIC0gSVNDXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgSVNDIGxpY2Vuc2UuXG4gKiBTZWUgdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pbXBvcnQgeyBmb3J3YXJkUmVmLCBjcmVhdGVFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGRlZmF1bHRBdHRyaWJ1dGVzIGZyb20gJy4vZGVmYXVsdEF0dHJpYnV0ZXMuanMnO1xuaW1wb3J0IHsgbWVyZ2VDbGFzc2VzIH0gZnJvbSAnLi9zaGFyZWQvc3JjL3V0aWxzLmpzJztcblxuY29uc3QgSWNvbiA9IGZvcndhcmRSZWYoXG4gICh7XG4gICAgY29sb3IgPSBcImN1cnJlbnRDb2xvclwiLFxuICAgIHNpemUgPSAyNCxcbiAgICBzdHJva2VXaWR0aCA9IDIsXG4gICAgYWJzb2x1dGVTdHJva2VXaWR0aCxcbiAgICBjbGFzc05hbWUgPSBcIlwiLFxuICAgIGNoaWxkcmVuLFxuICAgIGljb25Ob2RlLFxuICAgIC4uLnJlc3RcbiAgfSwgcmVmKSA9PiB7XG4gICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoXG4gICAgICBcInN2Z1wiLFxuICAgICAge1xuICAgICAgICByZWYsXG4gICAgICAgIC4uLmRlZmF1bHRBdHRyaWJ1dGVzLFxuICAgICAgICB3aWR0aDogc2l6ZSxcbiAgICAgICAgaGVpZ2h0OiBzaXplLFxuICAgICAgICBzdHJva2U6IGNvbG9yLFxuICAgICAgICBzdHJva2VXaWR0aDogYWJzb2x1dGVTdHJva2VXaWR0aCA/IE51bWJlcihzdHJva2VXaWR0aCkgKiAyNCAvIE51bWJlcihzaXplKSA6IHN0cm9rZVdpZHRoLFxuICAgICAgICBjbGFzc05hbWU6IG1lcmdlQ2xhc3NlcyhcImx1Y2lkZVwiLCBjbGFzc05hbWUpLFxuICAgICAgICAuLi5yZXN0XG4gICAgICB9LFxuICAgICAgW1xuICAgICAgICAuLi5pY29uTm9kZS5tYXAoKFt0YWcsIGF0dHJzXSkgPT4gY3JlYXRlRWxlbWVudCh0YWcsIGF0dHJzKSksXG4gICAgICAgIC4uLkFycmF5LmlzQXJyYXkoY2hpbGRyZW4pID8gY2hpbGRyZW4gOiBbY2hpbGRyZW5dXG4gICAgICBdXG4gICAgKTtcbiAgfVxuKTtcblxuZXhwb3J0IHsgSWNvbiBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1JY29uLmpzLm1hcFxuIl0sIm5hbWVzIjpbImZvcndhcmRSZWYiLCJjcmVhdGVFbGVtZW50IiwiZGVmYXVsdEF0dHJpYnV0ZXMiLCJtZXJnZUNsYXNzZXMiLCJJY29uIiwicmVmIiwiY29sb3IiLCJzaXplIiwic3Ryb2tlV2lkdGgiLCJhYnNvbHV0ZVN0cm9rZVdpZHRoIiwiY2xhc3NOYW1lIiwiY2hpbGRyZW4iLCJpY29uTm9kZSIsInJlc3QiLCJ3aWR0aCIsImhlaWdodCIsInN0cm9rZSIsIk51bWJlciIsIm1hcCIsInRhZyIsImF0dHJzIiwiQXJyYXkiLCJpc0FycmF5IiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/Icon.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js":
/*!****************************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/createLucideIcon.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ createLucideIcon; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _shared_src_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shared/src/utils.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/shared/src/utils.js\");\n/* harmony import */ var _Icon_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Icon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/Icon.js\");\n/**\n * @license lucide-react v0.469.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \n\n\nconst createLucideIcon = (iconName, iconNode)=>{\n    const Component = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((param, ref)=>{\n        let { className, ...props } = param;\n        return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(_Icon_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n            ref,\n            iconNode,\n            className: (0,_shared_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.mergeClasses)(\"lucide-\".concat((0,_shared_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.toKebabCase)(iconName)), className),\n            ...props\n        });\n    });\n    Component.displayName = \"\".concat(iconName);\n    return Component;\n};\n //# sourceMappingURL=createLucideIcon.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vY3JlYXRlTHVjaWRlSWNvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7OztDQUtDLEdBRWlEO0FBQ2dCO0FBQ3JDO0FBRTdCLE1BQU1LLG1CQUFtQixDQUFDQyxVQUFVQztJQUNsQyxNQUFNQywwQkFBWVIsaURBQVVBLENBQzFCLFFBQTBCUztZQUF6QixFQUFFQyxTQUFTLEVBQUUsR0FBR0MsT0FBTzs2QkFBVVYsb0RBQWFBLENBQUNHLGdEQUFJQSxFQUFFO1lBQ3BESztZQUNBRjtZQUNBRyxXQUFXUixrRUFBWUEsQ0FBQyxVQUFnQyxPQUF0QkMsaUVBQVdBLENBQUNHLFlBQWFJO1lBQzNELEdBQUdDLEtBQUs7UUFDVjs7SUFFRkgsVUFBVUksV0FBVyxHQUFHLEdBQVksT0FBVE47SUFDM0IsT0FBT0U7QUFDVDtBQUV1QyxDQUN2Qyw0Q0FBNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2x1Y2lkZS1yZWFjdC9kaXN0L2VzbS9jcmVhdGVMdWNpZGVJY29uLmpzPzQwYzQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZSBsdWNpZGUtcmVhY3QgdjAuNDY5LjAgLSBJU0NcbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBJU0MgbGljZW5zZS5cbiAqIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmltcG9ydCB7IGZvcndhcmRSZWYsIGNyZWF0ZUVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBtZXJnZUNsYXNzZXMsIHRvS2ViYWJDYXNlIH0gZnJvbSAnLi9zaGFyZWQvc3JjL3V0aWxzLmpzJztcbmltcG9ydCBJY29uIGZyb20gJy4vSWNvbi5qcyc7XG5cbmNvbnN0IGNyZWF0ZUx1Y2lkZUljb24gPSAoaWNvbk5hbWUsIGljb25Ob2RlKSA9PiB7XG4gIGNvbnN0IENvbXBvbmVudCA9IGZvcndhcmRSZWYoXG4gICAgKHsgY2xhc3NOYW1lLCAuLi5wcm9wcyB9LCByZWYpID0+IGNyZWF0ZUVsZW1lbnQoSWNvbiwge1xuICAgICAgcmVmLFxuICAgICAgaWNvbk5vZGUsXG4gICAgICBjbGFzc05hbWU6IG1lcmdlQ2xhc3NlcyhgbHVjaWRlLSR7dG9LZWJhYkNhc2UoaWNvbk5hbWUpfWAsIGNsYXNzTmFtZSksXG4gICAgICAuLi5wcm9wc1xuICAgIH0pXG4gICk7XG4gIENvbXBvbmVudC5kaXNwbGF5TmFtZSA9IGAke2ljb25OYW1lfWA7XG4gIHJldHVybiBDb21wb25lbnQ7XG59O1xuXG5leHBvcnQgeyBjcmVhdGVMdWNpZGVJY29uIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZUx1Y2lkZUljb24uanMubWFwXG4iXSwibmFtZXMiOlsiZm9yd2FyZFJlZiIsImNyZWF0ZUVsZW1lbnQiLCJtZXJnZUNsYXNzZXMiLCJ0b0tlYmFiQ2FzZSIsIkljb24iLCJjcmVhdGVMdWNpZGVJY29uIiwiaWNvbk5hbWUiLCJpY29uTm9kZSIsIkNvbXBvbmVudCIsInJlZiIsImNsYXNzTmFtZSIsInByb3BzIiwiZGlzcGxheU5hbWUiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/defaultAttributes.js":
/*!*****************************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/defaultAttributes.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ defaultAttributes; }\n/* harmony export */ });\n/**\n * @license lucide-react v0.469.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ var defaultAttributes = {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: \"currentColor\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n};\n //# sourceMappingURL=defaultAttributes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vZGVmYXVsdEF0dHJpYnV0ZXMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7OztDQUtDLEdBRUQsSUFBSUEsb0JBQW9CO0lBQ3RCQyxPQUFPO0lBQ1BDLE9BQU87SUFDUEMsUUFBUTtJQUNSQyxTQUFTO0lBQ1RDLE1BQU07SUFDTkMsUUFBUTtJQUNSQyxhQUFhO0lBQ2JDLGVBQWU7SUFDZkMsZ0JBQWdCO0FBQ2xCO0FBRXdDLENBQ3hDLDZDQUE2QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbHVjaWRlLXJlYWN0L2Rpc3QvZXNtL2RlZmF1bHRBdHRyaWJ1dGVzLmpzPzFkN2YiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZSBsdWNpZGUtcmVhY3QgdjAuNDY5LjAgLSBJU0NcbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBJU0MgbGljZW5zZS5cbiAqIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBkZWZhdWx0QXR0cmlidXRlcyA9IHtcbiAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgd2lkdGg6IDI0LFxuICBoZWlnaHQ6IDI0LFxuICB2aWV3Qm94OiBcIjAgMCAyNCAyNFwiLFxuICBmaWxsOiBcIm5vbmVcIixcbiAgc3Ryb2tlOiBcImN1cnJlbnRDb2xvclwiLFxuICBzdHJva2VXaWR0aDogMixcbiAgc3Ryb2tlTGluZWNhcDogXCJyb3VuZFwiLFxuICBzdHJva2VMaW5lam9pbjogXCJyb3VuZFwiXG59O1xuXG5leHBvcnQgeyBkZWZhdWx0QXR0cmlidXRlcyBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWZhdWx0QXR0cmlidXRlcy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJkZWZhdWx0QXR0cmlidXRlcyIsInhtbG5zIiwid2lkdGgiLCJoZWlnaHQiLCJ2aWV3Qm94IiwiZmlsbCIsInN0cm9rZSIsInN0cm9rZVdpZHRoIiwic3Ryb2tlTGluZWNhcCIsInN0cm9rZUxpbmVqb2luIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/defaultAttributes.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/award.js":
/*!***********************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/award.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Award; }\n/* harmony export */ });\n/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\");\n/**\n * @license lucide-react v0.469.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \nconst Award = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"Award\", [\n    [\n        \"path\",\n        {\n            d: \"m15.477 12.89 1.515 8.526a.5.5 0 0 1-.81.47l-3.58-2.687a1 1 0 0 0-1.197 0l-3.586 2.686a.5.5 0 0 1-.81-.469l1.514-8.526\",\n            key: \"1yiouv\"\n        }\n    ],\n    [\n        \"circle\",\n        {\n            cx: \"12\",\n            cy: \"8\",\n            r: \"6\",\n            key: \"1vp47v\"\n        }\n    ]\n]);\n //# sourceMappingURL=award.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvYXdhcmQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Q0FLQyxHQUVxRDtBQUV0RCxNQUFNQyxRQUFRRCxnRUFBZ0JBLENBQUMsU0FBUztJQUN0QztRQUNFO1FBQ0E7WUFDRUUsR0FBRztZQUNIQyxLQUFLO1FBQ1A7S0FDRDtJQUNEO1FBQUM7UUFBVTtZQUFFQyxJQUFJO1lBQU1DLElBQUk7WUFBS0MsR0FBRztZQUFLSCxLQUFLO1FBQVM7S0FBRTtDQUN6RDtBQUUyQixDQUM1QixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2x1Y2lkZS1yZWFjdC9kaXN0L2VzbS9pY29ucy9hd2FyZC5qcz83OTJmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2UgbHVjaWRlLXJlYWN0IHYwLjQ2OS4wIC0gSVNDXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgSVNDIGxpY2Vuc2UuXG4gKiBTZWUgdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pbXBvcnQgY3JlYXRlTHVjaWRlSWNvbiBmcm9tICcuLi9jcmVhdGVMdWNpZGVJY29uLmpzJztcblxuY29uc3QgQXdhcmQgPSBjcmVhdGVMdWNpZGVJY29uKFwiQXdhcmRcIiwgW1xuICBbXG4gICAgXCJwYXRoXCIsXG4gICAge1xuICAgICAgZDogXCJtMTUuNDc3IDEyLjg5IDEuNTE1IDguNTI2YS41LjUgMCAwIDEtLjgxLjQ3bC0zLjU4LTIuNjg3YTEgMSAwIDAgMC0xLjE5NyAwbC0zLjU4NiAyLjY4NmEuNS41IDAgMCAxLS44MS0uNDY5bDEuNTE0LTguNTI2XCIsXG4gICAgICBrZXk6IFwiMXlpb3V2XCJcbiAgICB9XG4gIF0sXG4gIFtcImNpcmNsZVwiLCB7IGN4OiBcIjEyXCIsIGN5OiBcIjhcIiwgcjogXCI2XCIsIGtleTogXCIxdnA0N3ZcIiB9XVxuXSk7XG5cbmV4cG9ydCB7IEF3YXJkIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF3YXJkLmpzLm1hcFxuIl0sIm5hbWVzIjpbImNyZWF0ZUx1Y2lkZUljb24iLCJBd2FyZCIsImQiLCJrZXkiLCJjeCIsImN5IiwiciIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/award.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/book.js":
/*!**********************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/book.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Book; }\n/* harmony export */ });\n/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\");\n/**\n * @license lucide-react v0.469.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \nconst Book = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"Book\", [\n    [\n        \"path\",\n        {\n            d: \"M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20\",\n            key: \"k3hazp\"\n        }\n    ]\n]);\n //# sourceMappingURL=book.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvYm9vay5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7OztDQUtDLEdBRXFEO0FBRXRELE1BQU1DLE9BQU9ELGdFQUFnQkEsQ0FBQyxRQUFRO0lBQ3BDO1FBQ0U7UUFDQTtZQUNFRSxHQUFHO1lBQ0hDLEtBQUs7UUFDUDtLQUNEO0NBQ0Y7QUFFMEIsQ0FDM0IsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvYm9vay5qcz84NjM4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2UgbHVjaWRlLXJlYWN0IHYwLjQ2OS4wIC0gSVNDXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgSVNDIGxpY2Vuc2UuXG4gKiBTZWUgdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pbXBvcnQgY3JlYXRlTHVjaWRlSWNvbiBmcm9tICcuLi9jcmVhdGVMdWNpZGVJY29uLmpzJztcblxuY29uc3QgQm9vayA9IGNyZWF0ZUx1Y2lkZUljb24oXCJCb29rXCIsIFtcbiAgW1xuICAgIFwicGF0aFwiLFxuICAgIHtcbiAgICAgIGQ6IFwiTTQgMTkuNXYtMTVBMi41IDIuNSAwIDAgMSA2LjUgMkgxOWExIDEgMCAwIDEgMSAxdjE4YTEgMSAwIDAgMS0xIDFINi41YTEgMSAwIDAgMSAwLTVIMjBcIixcbiAgICAgIGtleTogXCJrM2hhenBcIlxuICAgIH1cbiAgXVxuXSk7XG5cbmV4cG9ydCB7IEJvb2sgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Ym9vay5qcy5tYXBcbiJdLCJuYW1lcyI6WyJjcmVhdGVMdWNpZGVJY29uIiwiQm9vayIsImQiLCJrZXkiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/book.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/chart-bar.js":
/*!***************************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/chart-bar.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ ChartBar; }\n/* harmony export */ });\n/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\");\n/**\n * @license lucide-react v0.469.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \nconst ChartBar = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"ChartBar\", [\n    [\n        \"path\",\n        {\n            d: \"M3 3v16a2 2 0 0 0 2 2h16\",\n            key: \"c24i48\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M7 16h8\",\n            key: \"srdodz\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M7 11h12\",\n            key: \"127s9w\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M7 6h3\",\n            key: \"w9rmul\"\n        }\n    ]\n]);\n //# sourceMappingURL=chart-bar.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvY2hhcnQtYmFyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7O0NBS0MsR0FFcUQ7QUFFdEQsTUFBTUMsV0FBV0QsZ0VBQWdCQSxDQUFDLFlBQVk7SUFDNUM7UUFBQztRQUFRO1lBQUVFLEdBQUc7WUFBNEJDLEtBQUs7UUFBUztLQUFFO0lBQzFEO1FBQUM7UUFBUTtZQUFFRCxHQUFHO1lBQVdDLEtBQUs7UUFBUztLQUFFO0lBQ3pDO1FBQUM7UUFBUTtZQUFFRCxHQUFHO1lBQVlDLEtBQUs7UUFBUztLQUFFO0lBQzFDO1FBQUM7UUFBUTtZQUFFRCxHQUFHO1lBQVVDLEtBQUs7UUFBUztLQUFFO0NBQ3pDO0FBRThCLENBQy9CLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbHVjaWRlLXJlYWN0L2Rpc3QvZXNtL2ljb25zL2NoYXJ0LWJhci5qcz9mNTMxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2UgbHVjaWRlLXJlYWN0IHYwLjQ2OS4wIC0gSVNDXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgSVNDIGxpY2Vuc2UuXG4gKiBTZWUgdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pbXBvcnQgY3JlYXRlTHVjaWRlSWNvbiBmcm9tICcuLi9jcmVhdGVMdWNpZGVJY29uLmpzJztcblxuY29uc3QgQ2hhcnRCYXIgPSBjcmVhdGVMdWNpZGVJY29uKFwiQ2hhcnRCYXJcIiwgW1xuICBbXCJwYXRoXCIsIHsgZDogXCJNMyAzdjE2YTIgMiAwIDAgMCAyIDJoMTZcIiwga2V5OiBcImMyNGk0OFwiIH1dLFxuICBbXCJwYXRoXCIsIHsgZDogXCJNNyAxNmg4XCIsIGtleTogXCJzcmRvZHpcIiB9XSxcbiAgW1wicGF0aFwiLCB7IGQ6IFwiTTcgMTFoMTJcIiwga2V5OiBcIjEyN3M5d1wiIH1dLFxuICBbXCJwYXRoXCIsIHsgZDogXCJNNyA2aDNcIiwga2V5OiBcInc5cm11bFwiIH1dXG5dKTtcblxuZXhwb3J0IHsgQ2hhcnRCYXIgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2hhcnQtYmFyLmpzLm1hcFxuIl0sIm5hbWVzIjpbImNyZWF0ZUx1Y2lkZUljb24iLCJDaGFydEJhciIsImQiLCJrZXkiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/chart-bar.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/chart-no-axes-column.js":
/*!**************************************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/chart-no-axes-column.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ ChartNoAxesColumn; }\n/* harmony export */ });\n/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\");\n/**\n * @license lucide-react v0.469.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \nconst ChartNoAxesColumn = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"ChartNoAxesColumn\", [\n    [\n        \"line\",\n        {\n            x1: \"18\",\n            x2: \"18\",\n            y1: \"20\",\n            y2: \"10\",\n            key: \"1xfpm4\"\n        }\n    ],\n    [\n        \"line\",\n        {\n            x1: \"12\",\n            x2: \"12\",\n            y1: \"20\",\n            y2: \"4\",\n            key: \"be30l9\"\n        }\n    ],\n    [\n        \"line\",\n        {\n            x1: \"6\",\n            x2: \"6\",\n            y1: \"20\",\n            y2: \"14\",\n            key: \"1r4le6\"\n        }\n    ]\n]);\n //# sourceMappingURL=chart-no-axes-column.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvY2hhcnQtbm8tYXhlcy1jb2x1bW4uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Q0FLQyxHQUVxRDtBQUV0RCxNQUFNQyxvQkFBb0JELGdFQUFnQkEsQ0FBQyxxQkFBcUI7SUFDOUQ7UUFBQztRQUFRO1lBQUVFLElBQUk7WUFBTUMsSUFBSTtZQUFNQyxJQUFJO1lBQU1DLElBQUk7WUFBTUMsS0FBSztRQUFTO0tBQUU7SUFDbkU7UUFBQztRQUFRO1lBQUVKLElBQUk7WUFBTUMsSUFBSTtZQUFNQyxJQUFJO1lBQU1DLElBQUk7WUFBS0MsS0FBSztRQUFTO0tBQUU7SUFDbEU7UUFBQztRQUFRO1lBQUVKLElBQUk7WUFBS0MsSUFBSTtZQUFLQyxJQUFJO1lBQU1DLElBQUk7WUFBTUMsS0FBSztRQUFTO0tBQUU7Q0FDbEU7QUFFdUMsQ0FDeEMsZ0RBQWdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvY2hhcnQtbm8tYXhlcy1jb2x1bW4uanM/NjVkNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlIGx1Y2lkZS1yZWFjdCB2MC40NjkuMCAtIElTQ1xuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIElTQyBsaWNlbnNlLlxuICogU2VlIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaW1wb3J0IGNyZWF0ZUx1Y2lkZUljb24gZnJvbSAnLi4vY3JlYXRlTHVjaWRlSWNvbi5qcyc7XG5cbmNvbnN0IENoYXJ0Tm9BeGVzQ29sdW1uID0gY3JlYXRlTHVjaWRlSWNvbihcIkNoYXJ0Tm9BeGVzQ29sdW1uXCIsIFtcbiAgW1wibGluZVwiLCB7IHgxOiBcIjE4XCIsIHgyOiBcIjE4XCIsIHkxOiBcIjIwXCIsIHkyOiBcIjEwXCIsIGtleTogXCIxeGZwbTRcIiB9XSxcbiAgW1wibGluZVwiLCB7IHgxOiBcIjEyXCIsIHgyOiBcIjEyXCIsIHkxOiBcIjIwXCIsIHkyOiBcIjRcIiwga2V5OiBcImJlMzBsOVwiIH1dLFxuICBbXCJsaW5lXCIsIHsgeDE6IFwiNlwiLCB4MjogXCI2XCIsIHkxOiBcIjIwXCIsIHkyOiBcIjE0XCIsIGtleTogXCIxcjRsZTZcIiB9XVxuXSk7XG5cbmV4cG9ydCB7IENoYXJ0Tm9BeGVzQ29sdW1uIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNoYXJ0LW5vLWF4ZXMtY29sdW1uLmpzLm1hcFxuIl0sIm5hbWVzIjpbImNyZWF0ZUx1Y2lkZUljb24iLCJDaGFydE5vQXhlc0NvbHVtbiIsIngxIiwieDIiLCJ5MSIsInkyIiwia2V5IiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/chart-no-axes-column.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/settings.js":
/*!**************************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/settings.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Settings; }\n/* harmony export */ });\n/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\");\n/**\n * @license lucide-react v0.469.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \nconst Settings = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"Settings\", [\n    [\n        \"path\",\n        {\n            d: \"M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z\",\n            key: \"1qme2f\"\n        }\n    ],\n    [\n        \"circle\",\n        {\n            cx: \"12\",\n            cy: \"12\",\n            r: \"3\",\n            key: \"1v7zrd\"\n        }\n    ]\n]);\n //# sourceMappingURL=settings.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvc2V0dGluZ3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Q0FLQyxHQUVxRDtBQUV0RCxNQUFNQyxXQUFXRCxnRUFBZ0JBLENBQUMsWUFBWTtJQUM1QztRQUNFO1FBQ0E7WUFDRUUsR0FBRztZQUNIQyxLQUFLO1FBQ1A7S0FDRDtJQUNEO1FBQUM7UUFBVTtZQUFFQyxJQUFJO1lBQU1DLElBQUk7WUFBTUMsR0FBRztZQUFLSCxLQUFLO1FBQVM7S0FBRTtDQUMxRDtBQUU4QixDQUMvQixvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2x1Y2lkZS1yZWFjdC9kaXN0L2VzbS9pY29ucy9zZXR0aW5ncy5qcz8yYzA1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2UgbHVjaWRlLXJlYWN0IHYwLjQ2OS4wIC0gSVNDXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgSVNDIGxpY2Vuc2UuXG4gKiBTZWUgdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pbXBvcnQgY3JlYXRlTHVjaWRlSWNvbiBmcm9tICcuLi9jcmVhdGVMdWNpZGVJY29uLmpzJztcblxuY29uc3QgU2V0dGluZ3MgPSBjcmVhdGVMdWNpZGVJY29uKFwiU2V0dGluZ3NcIiwgW1xuICBbXG4gICAgXCJwYXRoXCIsXG4gICAge1xuICAgICAgZDogXCJNMTIuMjIgMmgtLjQ0YTIgMiAwIDAgMC0yIDJ2LjE4YTIgMiAwIDAgMS0xIDEuNzNsLS40My4yNWEyIDIgMCAwIDEtMiAwbC0uMTUtLjA4YTIgMiAwIDAgMC0yLjczLjczbC0uMjIuMzhhMiAyIDAgMCAwIC43MyAyLjczbC4xNS4xYTIgMiAwIDAgMSAxIDEuNzJ2LjUxYTIgMiAwIDAgMS0xIDEuNzRsLS4xNS4wOWEyIDIgMCAwIDAtLjczIDIuNzNsLjIyLjM4YTIgMiAwIDAgMCAyLjczLjczbC4xNS0uMDhhMiAyIDAgMCAxIDIgMGwuNDMuMjVhMiAyIDAgMCAxIDEgMS43M1YyMGEyIDIgMCAwIDAgMiAyaC40NGEyIDIgMCAwIDAgMi0ydi0uMThhMiAyIDAgMCAxIDEtMS43M2wuNDMtLjI1YTIgMiAwIDAgMSAyIDBsLjE1LjA4YTIgMiAwIDAgMCAyLjczLS43M2wuMjItLjM5YTIgMiAwIDAgMC0uNzMtMi43M2wtLjE1LS4wOGEyIDIgMCAwIDEtMS0xLjc0di0uNWEyIDIgMCAwIDEgMS0xLjc0bC4xNS0uMDlhMiAyIDAgMCAwIC43My0yLjczbC0uMjItLjM4YTIgMiAwIDAgMC0yLjczLS43M2wtLjE1LjA4YTIgMiAwIDAgMS0yIDBsLS40My0uMjVhMiAyIDAgMCAxLTEtMS43M1Y0YTIgMiAwIDAgMC0yLTJ6XCIsXG4gICAgICBrZXk6IFwiMXFtZTJmXCJcbiAgICB9XG4gIF0sXG4gIFtcImNpcmNsZVwiLCB7IGN4OiBcIjEyXCIsIGN5OiBcIjEyXCIsIHI6IFwiM1wiLCBrZXk6IFwiMXY3enJkXCIgfV1cbl0pO1xuXG5leHBvcnQgeyBTZXR0aW5ncyBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXR0aW5ncy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJjcmVhdGVMdWNpZGVJY29uIiwiU2V0dGluZ3MiLCJkIiwia2V5IiwiY3giLCJjeSIsInIiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/settings.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/shield.js":
/*!************************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/shield.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Shield; }\n/* harmony export */ });\n/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\");\n/**\n * @license lucide-react v0.469.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \nconst Shield = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"Shield\", [\n    [\n        \"path\",\n        {\n            d: \"M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z\",\n            key: \"oel41y\"\n        }\n    ]\n]);\n //# sourceMappingURL=shield.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvc2hpZWxkLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7O0NBS0MsR0FFcUQ7QUFFdEQsTUFBTUMsU0FBU0QsZ0VBQWdCQSxDQUFDLFVBQVU7SUFDeEM7UUFDRTtRQUNBO1lBQ0VFLEdBQUc7WUFDSEMsS0FBSztRQUNQO0tBQ0Q7Q0FDRjtBQUU0QixDQUM3QixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2x1Y2lkZS1yZWFjdC9kaXN0L2VzbS9pY29ucy9zaGllbGQuanM/ZDI2OCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlIGx1Y2lkZS1yZWFjdCB2MC40NjkuMCAtIElTQ1xuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIElTQyBsaWNlbnNlLlxuICogU2VlIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaW1wb3J0IGNyZWF0ZUx1Y2lkZUljb24gZnJvbSAnLi4vY3JlYXRlTHVjaWRlSWNvbi5qcyc7XG5cbmNvbnN0IFNoaWVsZCA9IGNyZWF0ZUx1Y2lkZUljb24oXCJTaGllbGRcIiwgW1xuICBbXG4gICAgXCJwYXRoXCIsXG4gICAge1xuICAgICAgZDogXCJNMjAgMTNjMCA1LTMuNSA3LjUtNy42NiA4Ljk1YTEgMSAwIDAgMS0uNjctLjAxQzcuNSAyMC41IDQgMTggNCAxM1Y2YTEgMSAwIDAgMSAxLTFjMiAwIDQuNS0xLjIgNi4yNC0yLjcyYTEuMTcgMS4xNyAwIDAgMSAxLjUyIDBDMTQuNTEgMy44MSAxNyA1IDE5IDVhMSAxIDAgMCAxIDEgMXpcIixcbiAgICAgIGtleTogXCJvZWw0MXlcIlxuICAgIH1cbiAgXVxuXSk7XG5cbmV4cG9ydCB7IFNoaWVsZCBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaGllbGQuanMubWFwXG4iXSwibmFtZXMiOlsiY3JlYXRlTHVjaWRlSWNvbiIsIlNoaWVsZCIsImQiLCJrZXkiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/shield.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/star.js":
/*!**********************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/star.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Star; }\n/* harmony export */ });\n/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\");\n/**\n * @license lucide-react v0.469.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \nconst Star = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"Star\", [\n    [\n        \"path\",\n        {\n            d: \"M11.525 2.295a.53.53 0 0 1 .95 0l2.31 4.679a2.123 2.123 0 0 0 1.595 1.16l5.166.756a.53.53 0 0 1 .294.904l-3.736 3.638a2.123 2.123 0 0 0-.611 1.878l.882 5.14a.53.53 0 0 1-.771.56l-4.618-2.428a2.122 2.122 0 0 0-1.973 0L6.396 21.01a.53.53 0 0 1-.77-.56l.881-5.139a2.122 2.122 0 0 0-.611-1.879L2.16 9.795a.53.53 0 0 1 .294-.906l5.165-.755a2.122 2.122 0 0 0 1.597-1.16z\",\n            key: \"r04s7s\"\n        }\n    ]\n]);\n //# sourceMappingURL=star.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvc3Rhci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7OztDQUtDLEdBRXFEO0FBRXRELE1BQU1DLE9BQU9ELGdFQUFnQkEsQ0FBQyxRQUFRO0lBQ3BDO1FBQ0U7UUFDQTtZQUNFRSxHQUFHO1lBQ0hDLEtBQUs7UUFDUDtLQUNEO0NBQ0Y7QUFFMEIsQ0FDM0IsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvc3Rhci5qcz8yYzAwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2UgbHVjaWRlLXJlYWN0IHYwLjQ2OS4wIC0gSVNDXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgSVNDIGxpY2Vuc2UuXG4gKiBTZWUgdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pbXBvcnQgY3JlYXRlTHVjaWRlSWNvbiBmcm9tICcuLi9jcmVhdGVMdWNpZGVJY29uLmpzJztcblxuY29uc3QgU3RhciA9IGNyZWF0ZUx1Y2lkZUljb24oXCJTdGFyXCIsIFtcbiAgW1xuICAgIFwicGF0aFwiLFxuICAgIHtcbiAgICAgIGQ6IFwiTTExLjUyNSAyLjI5NWEuNTMuNTMgMCAwIDEgLjk1IDBsMi4zMSA0LjY3OWEyLjEyMyAyLjEyMyAwIDAgMCAxLjU5NSAxLjE2bDUuMTY2Ljc1NmEuNTMuNTMgMCAwIDEgLjI5NC45MDRsLTMuNzM2IDMuNjM4YTIuMTIzIDIuMTIzIDAgMCAwLS42MTEgMS44NzhsLjg4MiA1LjE0YS41My41MyAwIDAgMS0uNzcxLjU2bC00LjYxOC0yLjQyOGEyLjEyMiAyLjEyMiAwIDAgMC0xLjk3MyAwTDYuMzk2IDIxLjAxYS41My41MyAwIDAgMS0uNzctLjU2bC44ODEtNS4xMzlhMi4xMjIgMi4xMjIgMCAwIDAtLjYxMS0xLjg3OUwyLjE2IDkuNzk1YS41My41MyAwIDAgMSAuMjk0LS45MDZsNS4xNjUtLjc1NWEyLjEyMiAyLjEyMiAwIDAgMCAxLjU5Ny0xLjE2elwiLFxuICAgICAga2V5OiBcInIwNHM3c1wiXG4gICAgfVxuICBdXG5dKTtcblxuZXhwb3J0IHsgU3RhciBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGFyLmpzLm1hcFxuIl0sIm5hbWVzIjpbImNyZWF0ZUx1Y2lkZUljb24iLCJTdGFyIiwiZCIsImtleSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/star.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/trending-up.js":
/*!*****************************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/trending-up.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ TrendingUp; }\n/* harmony export */ });\n/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\");\n/**\n * @license lucide-react v0.469.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \nconst TrendingUp = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"TrendingUp\", [\n    [\n        \"polyline\",\n        {\n            points: \"22 7 13.5 15.5 8.5 10.5 2 17\",\n            key: \"126l90\"\n        }\n    ],\n    [\n        \"polyline\",\n        {\n            points: \"16 7 22 7 22 13\",\n            key: \"kwv8wd\"\n        }\n    ]\n]);\n //# sourceMappingURL=trending-up.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvdHJlbmRpbmctdXAuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Q0FLQyxHQUVxRDtBQUV0RCxNQUFNQyxhQUFhRCxnRUFBZ0JBLENBQUMsY0FBYztJQUNoRDtRQUFDO1FBQVk7WUFBRUUsUUFBUTtZQUFnQ0MsS0FBSztRQUFTO0tBQUU7SUFDdkU7UUFBQztRQUFZO1lBQUVELFFBQVE7WUFBbUJDLEtBQUs7UUFBUztLQUFFO0NBQzNEO0FBRWdDLENBQ2pDLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbHVjaWRlLXJlYWN0L2Rpc3QvZXNtL2ljb25zL3RyZW5kaW5nLXVwLmpzPzE5N2MiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZSBsdWNpZGUtcmVhY3QgdjAuNDY5LjAgLSBJU0NcbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBJU0MgbGljZW5zZS5cbiAqIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmltcG9ydCBjcmVhdGVMdWNpZGVJY29uIGZyb20gJy4uL2NyZWF0ZUx1Y2lkZUljb24uanMnO1xuXG5jb25zdCBUcmVuZGluZ1VwID0gY3JlYXRlTHVjaWRlSWNvbihcIlRyZW5kaW5nVXBcIiwgW1xuICBbXCJwb2x5bGluZVwiLCB7IHBvaW50czogXCIyMiA3IDEzLjUgMTUuNSA4LjUgMTAuNSAyIDE3XCIsIGtleTogXCIxMjZsOTBcIiB9XSxcbiAgW1wicG9seWxpbmVcIiwgeyBwb2ludHM6IFwiMTYgNyAyMiA3IDIyIDEzXCIsIGtleTogXCJrd3Y4d2RcIiB9XVxuXSk7XG5cbmV4cG9ydCB7IFRyZW5kaW5nVXAgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJlbmRpbmctdXAuanMubWFwXG4iXSwibmFtZXMiOlsiY3JlYXRlTHVjaWRlSWNvbiIsIlRyZW5kaW5nVXAiLCJwb2ludHMiLCJrZXkiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/trending-up.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/trophy.js":
/*!************************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/trophy.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Trophy; }\n/* harmony export */ });\n/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\");\n/**\n * @license lucide-react v0.469.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \nconst Trophy = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"Trophy\", [\n    [\n        \"path\",\n        {\n            d: \"M6 9H4.5a2.5 2.5 0 0 1 0-5H6\",\n            key: \"17hqa7\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M18 9h1.5a2.5 2.5 0 0 0 0-5H18\",\n            key: \"lmptdp\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M4 22h16\",\n            key: \"57wxv0\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M10 14.66V17c0 .55-.47.98-.97 1.21C7.85 18.75 7 20.24 7 22\",\n            key: \"1nw9bq\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M14 14.66V17c0 .55.47.98.97 1.21C16.15 18.75 17 20.24 17 22\",\n            key: \"1np0yb\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M18 2H6v7a6 6 0 0 0 12 0V2Z\",\n            key: \"u46fv3\"\n        }\n    ]\n]);\n //# sourceMappingURL=trophy.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvdHJvcGh5LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7O0NBS0MsR0FFcUQ7QUFFdEQsTUFBTUMsU0FBU0QsZ0VBQWdCQSxDQUFDLFVBQVU7SUFDeEM7UUFBQztRQUFRO1lBQUVFLEdBQUc7WUFBZ0NDLEtBQUs7UUFBUztLQUFFO0lBQzlEO1FBQUM7UUFBUTtZQUFFRCxHQUFHO1lBQWtDQyxLQUFLO1FBQVM7S0FBRTtJQUNoRTtRQUFDO1FBQVE7WUFBRUQsR0FBRztZQUFZQyxLQUFLO1FBQVM7S0FBRTtJQUMxQztRQUFDO1FBQVE7WUFBRUQsR0FBRztZQUE4REMsS0FBSztRQUFTO0tBQUU7SUFDNUY7UUFBQztRQUFRO1lBQUVELEdBQUc7WUFBK0RDLEtBQUs7UUFBUztLQUFFO0lBQzdGO1FBQUM7UUFBUTtZQUFFRCxHQUFHO1lBQStCQyxLQUFLO1FBQVM7S0FBRTtDQUM5RDtBQUU0QixDQUM3QixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2x1Y2lkZS1yZWFjdC9kaXN0L2VzbS9pY29ucy90cm9waHkuanM/NzYwZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlIGx1Y2lkZS1yZWFjdCB2MC40NjkuMCAtIElTQ1xuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIElTQyBsaWNlbnNlLlxuICogU2VlIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaW1wb3J0IGNyZWF0ZUx1Y2lkZUljb24gZnJvbSAnLi4vY3JlYXRlTHVjaWRlSWNvbi5qcyc7XG5cbmNvbnN0IFRyb3BoeSA9IGNyZWF0ZUx1Y2lkZUljb24oXCJUcm9waHlcIiwgW1xuICBbXCJwYXRoXCIsIHsgZDogXCJNNiA5SDQuNWEyLjUgMi41IDAgMCAxIDAtNUg2XCIsIGtleTogXCIxN2hxYTdcIiB9XSxcbiAgW1wicGF0aFwiLCB7IGQ6IFwiTTE4IDloMS41YTIuNSAyLjUgMCAwIDAgMC01SDE4XCIsIGtleTogXCJsbXB0ZHBcIiB9XSxcbiAgW1wicGF0aFwiLCB7IGQ6IFwiTTQgMjJoMTZcIiwga2V5OiBcIjU3d3h2MFwiIH1dLFxuICBbXCJwYXRoXCIsIHsgZDogXCJNMTAgMTQuNjZWMTdjMCAuNTUtLjQ3Ljk4LS45NyAxLjIxQzcuODUgMTguNzUgNyAyMC4yNCA3IDIyXCIsIGtleTogXCIxbnc5YnFcIiB9XSxcbiAgW1wicGF0aFwiLCB7IGQ6IFwiTTE0IDE0LjY2VjE3YzAgLjU1LjQ3Ljk4Ljk3IDEuMjFDMTYuMTUgMTguNzUgMTcgMjAuMjQgMTcgMjJcIiwga2V5OiBcIjFucDB5YlwiIH1dLFxuICBbXCJwYXRoXCIsIHsgZDogXCJNMTggMkg2djdhNiA2IDAgMCAwIDEyIDBWMlpcIiwga2V5OiBcInU0NmZ2M1wiIH1dXG5dKTtcblxuZXhwb3J0IHsgVHJvcGh5IGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyb3BoeS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJjcmVhdGVMdWNpZGVJY29uIiwiVHJvcGh5IiwiZCIsImtleSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/trophy.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/wallet.js":
/*!************************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/wallet.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Wallet; }\n/* harmony export */ });\n/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\");\n/**\n * @license lucide-react v0.469.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \nconst Wallet = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"Wallet\", [\n    [\n        \"path\",\n        {\n            d: \"M19 7V4a1 1 0 0 0-1-1H5a2 2 0 0 0 0 4h15a1 1 0 0 1 1 1v4h-3a2 2 0 0 0 0 4h3a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1\",\n            key: \"18etb6\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M3 5v14a2 2 0 0 0 2 2h15a1 1 0 0 0 1-1v-4\",\n            key: \"xoc0q4\"\n        }\n    ]\n]);\n //# sourceMappingURL=wallet.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvd2FsbGV0LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7O0NBS0MsR0FFcUQ7QUFFdEQsTUFBTUMsU0FBU0QsZ0VBQWdCQSxDQUFDLFVBQVU7SUFDeEM7UUFDRTtRQUNBO1lBQ0VFLEdBQUc7WUFDSEMsS0FBSztRQUNQO0tBQ0Q7SUFDRDtRQUFDO1FBQVE7WUFBRUQsR0FBRztZQUE2Q0MsS0FBSztRQUFTO0tBQUU7Q0FDNUU7QUFFNEIsQ0FDN0Isa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvd2FsbGV0LmpzP2M4NDMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZSBsdWNpZGUtcmVhY3QgdjAuNDY5LjAgLSBJU0NcbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBJU0MgbGljZW5zZS5cbiAqIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmltcG9ydCBjcmVhdGVMdWNpZGVJY29uIGZyb20gJy4uL2NyZWF0ZUx1Y2lkZUljb24uanMnO1xuXG5jb25zdCBXYWxsZXQgPSBjcmVhdGVMdWNpZGVJY29uKFwiV2FsbGV0XCIsIFtcbiAgW1xuICAgIFwicGF0aFwiLFxuICAgIHtcbiAgICAgIGQ6IFwiTTE5IDdWNGExIDEgMCAwIDAtMS0xSDVhMiAyIDAgMCAwIDAgNGgxNWExIDEgMCAwIDEgMSAxdjRoLTNhMiAyIDAgMCAwIDAgNGgzYTEgMSAwIDAgMCAxLTF2LTJhMSAxIDAgMCAwLTEtMVwiLFxuICAgICAga2V5OiBcIjE4ZXRiNlwiXG4gICAgfVxuICBdLFxuICBbXCJwYXRoXCIsIHsgZDogXCJNMyA1djE0YTIgMiAwIDAgMCAyIDJoMTVhMSAxIDAgMCAwIDEtMXYtNFwiLCBrZXk6IFwieG9jMHE0XCIgfV1cbl0pO1xuXG5leHBvcnQgeyBXYWxsZXQgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2FsbGV0LmpzLm1hcFxuIl0sIm5hbWVzIjpbImNyZWF0ZUx1Y2lkZUljb24iLCJXYWxsZXQiLCJkIiwia2V5IiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/wallet.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/zap.js":
/*!*********************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/zap.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Zap; }\n/* harmony export */ });\n/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\");\n/**\n * @license lucide-react v0.469.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \nconst Zap = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"Zap\", [\n    [\n        \"path\",\n        {\n            d: \"M4 14a1 1 0 0 1-.78-1.63l9.9-10.2a.5.5 0 0 1 .86.46l-1.92 6.02A1 1 0 0 0 13 10h7a1 1 0 0 1 .78 1.63l-9.9 10.2a.5.5 0 0 1-.86-.46l1.92-6.02A1 1 0 0 0 11 14z\",\n            key: \"1xq2db\"\n        }\n    ]\n]);\n //# sourceMappingURL=zap.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvemFwLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7O0NBS0MsR0FFcUQ7QUFFdEQsTUFBTUMsTUFBTUQsZ0VBQWdCQSxDQUFDLE9BQU87SUFDbEM7UUFDRTtRQUNBO1lBQ0VFLEdBQUc7WUFDSEMsS0FBSztRQUNQO0tBQ0Q7Q0FDRjtBQUV5QixDQUMxQiwrQkFBK0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2x1Y2lkZS1yZWFjdC9kaXN0L2VzbS9pY29ucy96YXAuanM/NmM3ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlIGx1Y2lkZS1yZWFjdCB2MC40NjkuMCAtIElTQ1xuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIElTQyBsaWNlbnNlLlxuICogU2VlIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaW1wb3J0IGNyZWF0ZUx1Y2lkZUljb24gZnJvbSAnLi4vY3JlYXRlTHVjaWRlSWNvbi5qcyc7XG5cbmNvbnN0IFphcCA9IGNyZWF0ZUx1Y2lkZUljb24oXCJaYXBcIiwgW1xuICBbXG4gICAgXCJwYXRoXCIsXG4gICAge1xuICAgICAgZDogXCJNNCAxNGExIDEgMCAwIDEtLjc4LTEuNjNsOS45LTEwLjJhLjUuNSAwIDAgMSAuODYuNDZsLTEuOTIgNi4wMkExIDEgMCAwIDAgMTMgMTBoN2ExIDEgMCAwIDEgLjc4IDEuNjNsLTkuOSAxMC4yYS41LjUgMCAwIDEtLjg2LS40NmwxLjkyLTYuMDJBMSAxIDAgMCAwIDExIDE0elwiLFxuICAgICAga2V5OiBcIjF4cTJkYlwiXG4gICAgfVxuICBdXG5dKTtcblxuZXhwb3J0IHsgWmFwIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXphcC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJjcmVhdGVMdWNpZGVJY29uIiwiWmFwIiwiZCIsImtleSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/zap.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/shared/src/utils.js":
/*!****************************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/shared/src/utils.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mergeClasses: function() { return /* binding */ mergeClasses; },\n/* harmony export */   toKebabCase: function() { return /* binding */ toKebabCase; }\n/* harmony export */ });\n/**\n * @license lucide-react v0.469.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const toKebabCase = (string)=>string.replace(/([a-z0-9])([A-Z])/g, \"$1-$2\").toLowerCase();\nconst mergeClasses = function() {\n    for(var _len = arguments.length, classes = new Array(_len), _key = 0; _key < _len; _key++){\n        classes[_key] = arguments[_key];\n    }\n    return classes.filter((className, index, array)=>{\n        return Boolean(className) && className.trim() !== \"\" && array.indexOf(className) === index;\n    }).join(\" \").trim();\n};\n //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vc2hhcmVkL3NyYy91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7OztDQUtDLEdBRUQsTUFBTUEsY0FBYyxDQUFDQyxTQUFXQSxPQUFPQyxPQUFPLENBQUMsc0JBQXNCLFNBQVNDLFdBQVc7QUFDekYsTUFBTUMsZUFBZTtxQ0FBSUM7UUFBQUE7O1dBQVlBLFFBQVFDLE1BQU0sQ0FBQyxDQUFDQyxXQUFXQyxPQUFPQztRQUNyRSxPQUFPQyxRQUFRSCxjQUFjQSxVQUFVSSxJQUFJLE9BQU8sTUFBTUYsTUFBTUcsT0FBTyxDQUFDTCxlQUFlQztJQUN2RixHQUFHSyxJQUFJLENBQUMsS0FBS0YsSUFBSTs7QUFFb0IsQ0FDckMsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vc2hhcmVkL3NyYy91dGlscy5qcz8wYTkwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2UgbHVjaWRlLXJlYWN0IHYwLjQ2OS4wIC0gSVNDXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgSVNDIGxpY2Vuc2UuXG4gKiBTZWUgdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5jb25zdCB0b0tlYmFiQ2FzZSA9IChzdHJpbmcpID0+IHN0cmluZy5yZXBsYWNlKC8oW2EtejAtOV0pKFtBLVpdKS9nLCBcIiQxLSQyXCIpLnRvTG93ZXJDYXNlKCk7XG5jb25zdCBtZXJnZUNsYXNzZXMgPSAoLi4uY2xhc3NlcykgPT4gY2xhc3Nlcy5maWx0ZXIoKGNsYXNzTmFtZSwgaW5kZXgsIGFycmF5KSA9PiB7XG4gIHJldHVybiBCb29sZWFuKGNsYXNzTmFtZSkgJiYgY2xhc3NOYW1lLnRyaW0oKSAhPT0gXCJcIiAmJiBhcnJheS5pbmRleE9mKGNsYXNzTmFtZSkgPT09IGluZGV4O1xufSkuam9pbihcIiBcIikudHJpbSgpO1xuXG5leHBvcnQgeyBtZXJnZUNsYXNzZXMsIHRvS2ViYWJDYXNlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJ0b0tlYmFiQ2FzZSIsInN0cmluZyIsInJlcGxhY2UiLCJ0b0xvd2VyQ2FzZSIsIm1lcmdlQ2xhc3NlcyIsImNsYXNzZXMiLCJmaWx0ZXIiLCJjbGFzc05hbWUiLCJpbmRleCIsImFycmF5IiwiQm9vbGVhbiIsInRyaW0iLCJpbmRleE9mIiwiam9pbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/shared/src/utils.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/motion-dom/dist/cjs/index.js":
/*!***************************************************!*\
  !*** ./node_modules/motion-dom/dist/cjs/index.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst isDragging = {\n    x: false,\n    y: false\n};\nfunction isDragActive() {\n    return isDragging.x || isDragging.y;\n}\nfunction resolveElements(elementOrSelector, scope, selectorCache) {\n    var _a;\n    if (elementOrSelector instanceof Element) {\n        return [\n            elementOrSelector\n        ];\n    } else if (typeof elementOrSelector === \"string\") {\n        let root = document;\n        if (scope) {\n            // TODO: Refactor to utils package\n            // invariant(\n            //     Boolean(scope.current),\n            //     \"Scope provided, but no element detected.\"\n            // )\n            root = scope.current;\n        }\n        const elements = (_a = selectorCache === null || selectorCache === void 0 ? void 0 : selectorCache[elementOrSelector]) !== null && _a !== void 0 ? _a : root.querySelectorAll(elementOrSelector);\n        return elements ? Array.from(elements) : [];\n    }\n    return Array.from(elementOrSelector);\n}\nfunction setupGesture(elementOrSelector, options) {\n    const elements = resolveElements(elementOrSelector);\n    const gestureAbortController = new AbortController();\n    const eventOptions = {\n        passive: true,\n        ...options,\n        signal: gestureAbortController.signal\n    };\n    const cancel = ()=>gestureAbortController.abort();\n    return [\n        elements,\n        eventOptions,\n        cancel\n    ];\n}\n/**\n * Filter out events that are not pointer events, or are triggering\n * while a Motion gesture is active.\n */ function filterEvents$1(callback) {\n    return (event)=>{\n        if (event.pointerType === \"touch\" || isDragActive()) return;\n        callback(event);\n    };\n}\n/**\n * Create a hover gesture. hover() is different to .addEventListener(\"pointerenter\")\n * in that it has an easier syntax, filters out polyfilled touch events, interoperates\n * with drag gestures, and automatically removes the \"pointerennd\" event listener when the hover ends.\n *\n * @public\n */ function hover(elementOrSelector, onHoverStart) {\n    let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    const [elements, eventOptions, cancel] = setupGesture(elementOrSelector, options);\n    const onPointerEnter = filterEvents$1((enterEvent)=>{\n        const { target } = enterEvent;\n        const onHoverEnd = onHoverStart(enterEvent);\n        if (!onHoverEnd || !target) return;\n        const onPointerLeave = filterEvents$1((leaveEvent)=>{\n            onHoverEnd(leaveEvent);\n            target.removeEventListener(\"pointerleave\", onPointerLeave);\n        });\n        target.addEventListener(\"pointerleave\", onPointerLeave, eventOptions);\n    });\n    elements.forEach((element)=>{\n        element.addEventListener(\"pointerenter\", onPointerEnter, eventOptions);\n    });\n    return cancel;\n}\nconst isPrimaryPointer = (event)=>{\n    if (event.pointerType === \"mouse\") {\n        return typeof event.button !== \"number\" || event.button <= 0;\n    } else {\n        /**\n         * isPrimary is true for all mice buttons, whereas every touch point\n         * is regarded as its own input. So subsequent concurrent touch points\n         * will be false.\n         *\n         * Specifically match against false here as incomplete versions of\n         * PointerEvents in very old browser might have it set as undefined.\n         */ return event.isPrimary !== false;\n    }\n};\nconst isPressing = new WeakSet();\n/**\n * Filter out events that are not \"Enter\" keys.\n */ function filterEvents(callback) {\n    return (event)=>{\n        if (event.key !== \"Enter\") return;\n        callback(event);\n    };\n}\nfunction firePointerEvent(target, type) {\n    target.dispatchEvent(new PointerEvent(\"pointer\" + type, {\n        isPrimary: true,\n        bubbles: true\n    }));\n}\nconst enableKeyboardPress = (focusEvent, eventOptions)=>{\n    const element = focusEvent.currentTarget;\n    if (!element) return;\n    const handleKeydown = filterEvents(()=>{\n        if (isPressing.has(element)) return;\n        firePointerEvent(element, \"down\");\n        const handleKeyup = filterEvents(()=>{\n            firePointerEvent(element, \"up\");\n        });\n        const handleBlur = ()=>firePointerEvent(element, \"cancel\");\n        element.addEventListener(\"keyup\", handleKeyup, eventOptions);\n        element.addEventListener(\"blur\", handleBlur, eventOptions);\n    });\n    element.addEventListener(\"keydown\", handleKeydown, eventOptions);\n    /**\n     * Add an event listener that fires on blur to remove the keydown events.\n     */ element.addEventListener(\"blur\", ()=>element.removeEventListener(\"keydown\", handleKeydown), eventOptions);\n};\nconst focusableElements = new Set([\n    \"BUTTON\",\n    \"INPUT\",\n    \"SELECT\",\n    \"TEXTAREA\",\n    \"A\"\n]);\nfunction isElementKeyboardAccessible(element) {\n    return focusableElements.has(element.tagName) || element.tabIndex !== -1;\n}\n/**\n * Recursively traverse up the tree to check whether the provided child node\n * is the parent or a descendant of it.\n *\n * @param parent - Element to find\n * @param child - Element to test against parent\n */ const isNodeOrChild = (parent, child)=>{\n    if (!child) {\n        return false;\n    } else if (parent === child) {\n        return true;\n    } else {\n        return isNodeOrChild(parent, child.parentElement);\n    }\n};\n/**\n * Filter out events that are not primary pointer events, or are triggering\n * while a Motion gesture is active.\n */ function isValidPressEvent(event) {\n    return isPrimaryPointer(event) && !isDragActive();\n}\n/**\n * Create a press gesture.\n *\n * Press is different to `\"pointerdown\"`, `\"pointerup\"` in that it\n * automatically filters out secondary pointer events like right\n * click and multitouch.\n *\n * It also adds accessibility support for keyboards, where\n * an element with a press gesture will receive focus and\n *  trigger on Enter `\"keydown\"` and `\"keyup\"` events.\n *\n * This is different to a browser's `\"click\"` event, which does\n * respond to keyboards but only for the `\"click\"` itself, rather\n * than the press start and end/cancel. The element also needs\n * to be focusable for this to work, whereas a press gesture will\n * make an element focusable by default.\n *\n * @public\n */ function press(elementOrSelector, onPressStart) {\n    let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    const [elements, eventOptions, cancelEvents] = setupGesture(elementOrSelector, options);\n    const startPress = (startEvent)=>{\n        const element = startEvent.currentTarget;\n        if (!isValidPressEvent(startEvent) || isPressing.has(element)) return;\n        isPressing.add(element);\n        const onPressEnd = onPressStart(startEvent);\n        const onPointerEnd = (endEvent, success)=>{\n            window.removeEventListener(\"pointerup\", onPointerUp);\n            window.removeEventListener(\"pointercancel\", onPointerCancel);\n            if (!isValidPressEvent(endEvent) || !isPressing.has(element)) {\n                return;\n            }\n            isPressing.delete(element);\n            if (onPressEnd) {\n                onPressEnd(endEvent, {\n                    success\n                });\n            }\n        };\n        const onPointerUp = (upEvent)=>{\n            onPointerEnd(upEvent, options.useGlobalTarget || isNodeOrChild(element, upEvent.target));\n        };\n        const onPointerCancel = (cancelEvent)=>{\n            onPointerEnd(cancelEvent, false);\n        };\n        window.addEventListener(\"pointerup\", onPointerUp, eventOptions);\n        window.addEventListener(\"pointercancel\", onPointerCancel, eventOptions);\n    };\n    elements.forEach((element)=>{\n        if (!isElementKeyboardAccessible(element)) {\n            element.tabIndex = 0;\n        }\n        const target = options.useGlobalTarget ? window : element;\n        target.addEventListener(\"pointerdown\", startPress, eventOptions);\n        element.addEventListener(\"focus\", (event)=>enableKeyboardPress(event, eventOptions), eventOptions);\n    });\n    return cancelEvents;\n}\nfunction setDragLock(axis) {\n    if (axis === \"x\" || axis === \"y\") {\n        if (isDragging[axis]) {\n            return null;\n        } else {\n            isDragging[axis] = true;\n            return ()=>{\n                isDragging[axis] = false;\n            };\n        }\n    } else {\n        if (isDragging.x || isDragging.y) {\n            return null;\n        } else {\n            isDragging.x = isDragging.y = true;\n            return ()=>{\n                isDragging.x = isDragging.y = false;\n            };\n        }\n    }\n}\nexports.hover = hover;\nexports.isDragActive = isDragActive;\nexports.isDragging = isDragging;\nexports.isNodeOrChild = isNodeOrChild;\nexports.isPrimaryPointer = isPrimaryPointer;\nexports.press = press;\nexports.resolveElements = resolveElements;\nexports.setDragLock = setDragLock;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/motion-dom/dist/cjs/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/motion-utils/dist/cjs/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/motion-utils/dist/cjs/index.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst noop = (any)=>any;\nexports.warning = noop;\nexports.invariant = noop;\nif (true) {\n    exports.warning = (check, message)=>{\n        if (!check && typeof console !== \"undefined\") {\n            console.warn(message);\n        }\n    };\n    exports.invariant = (check, message)=>{\n        if (!check) {\n            throw new Error(message);\n        }\n    };\n}\nexports.noop = noop;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9tb3Rpb24tdXRpbHMvZGlzdC9janMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQUEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsT0FBTyxDQUFDQyxNQUFRQTtBQUV0QkgsZUFBZSxHQUFHRTtBQUNsQkYsaUJBQWlCLEdBQUdFO0FBQ3BCLElBQUlJLElBQXFDLEVBQUU7SUFDdkNOLGVBQWUsR0FBRyxDQUFDTyxPQUFPQztRQUN0QixJQUFJLENBQUNELFNBQVMsT0FBT0UsWUFBWSxhQUFhO1lBQzFDQSxRQUFRQyxJQUFJLENBQUNGO1FBQ2pCO0lBQ0o7SUFDQVIsaUJBQWlCLEdBQUcsQ0FBQ08sT0FBT0M7UUFDeEIsSUFBSSxDQUFDRCxPQUFPO1lBQ1IsTUFBTSxJQUFJSSxNQUFNSDtRQUNwQjtJQUNKO0FBQ0o7QUFFQVIsWUFBWSxHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbW90aW9uLXV0aWxzL2Rpc3QvY2pzL2luZGV4LmpzPzhjNzIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBub29wID0gKGFueSkgPT4gYW55O1xuXG5leHBvcnRzLndhcm5pbmcgPSBub29wO1xuZXhwb3J0cy5pbnZhcmlhbnQgPSBub29wO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIGV4cG9ydHMud2FybmluZyA9IChjaGVjaywgbWVzc2FnZSkgPT4ge1xuICAgICAgICBpZiAoIWNoZWNrICYmIHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4obWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGV4cG9ydHMuaW52YXJpYW50ID0gKGNoZWNrLCBtZXNzYWdlKSA9PiB7XG4gICAgICAgIGlmICghY2hlY2spIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbmV4cG9ydHMubm9vcCA9IG5vb3A7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJub29wIiwiYW55Iiwid2FybmluZyIsImludmFyaWFudCIsInByb2Nlc3MiLCJjaGVjayIsIm1lc3NhZ2UiLCJjb25zb2xlIiwid2FybiIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/motion-utils/dist/cjs/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \nif (true) {\n    (function() {\n        \"use strict\";\n        var React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n        // ATTENTION\n        // When adding new symbols to this file,\n        // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n        // The Symbol used to tag the ReactElement-like types.\n        var REACT_ELEMENT_TYPE = Symbol.for(\"react.element\");\n        var REACT_PORTAL_TYPE = Symbol.for(\"react.portal\");\n        var REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\");\n        var REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\");\n        var REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n        var REACT_PROVIDER_TYPE = Symbol.for(\"react.provider\");\n        var REACT_CONTEXT_TYPE = Symbol.for(\"react.context\");\n        var REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\");\n        var REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\");\n        var REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\");\n        var REACT_MEMO_TYPE = Symbol.for(\"react.memo\");\n        var REACT_LAZY_TYPE = Symbol.for(\"react.lazy\");\n        var REACT_OFFSCREEN_TYPE = Symbol.for(\"react.offscreen\");\n        var REACT_CACHE_TYPE = Symbol.for(\"react.cache\");\n        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\n        var FAUX_ITERATOR_SYMBOL = \"@@iterator\";\n        function getIteratorFn(maybeIterable) {\n            if (maybeIterable === null || typeof maybeIterable !== \"object\") {\n                return null;\n            }\n            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n            if (typeof maybeIterator === \"function\") {\n                return maybeIterator;\n            }\n            return null;\n        }\n        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n        function error(format) {\n            {\n                {\n                    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n                        args[_key2 - 1] = arguments[_key2];\n                    }\n                    printWarning(\"error\", format, args);\n                }\n            }\n        }\n        function printWarning(level, format, args) {\n            // When changing this logic, you might want to also\n            // update consoleWithStackDev.www.js as well.\n            {\n                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n                var stack = ReactDebugCurrentFrame.getStackAddendum();\n                if (stack !== \"\") {\n                    format += \"%s\";\n                    args = args.concat([\n                        stack\n                    ]);\n                } // eslint-disable-next-line react-internal/safe-string-coercion\n                var argsWithFormat = args.map(function(item) {\n                    return String(item);\n                }); // Careful: RN currently depends on this prefix\n                argsWithFormat.unshift(\"Warning: \" + format); // We intentionally don't use spread (or .apply) directly because it\n                // breaks IE9: https://github.com/facebook/react/issues/13610\n                // eslint-disable-next-line react-internal/no-production-logging\n                Function.prototype.apply.call(console[level], console, argsWithFormat);\n            }\n        }\n        // -----------------------------------------------------------------------------\n        var enableScopeAPI = false; // Experimental Create Event Handle API.\n        var enableCacheElement = false;\n        var enableTransitionTracing = false; // No known bugs, but needs performance testing\n        var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n        // stuff. Intended to enable React core members to more easily debug scheduling\n        // issues in DEV builds.\n        var enableDebugTracing = false;\n        var REACT_CLIENT_REFERENCE$2 = Symbol.for(\"react.client.reference\");\n        function isValidElementType(type) {\n            if (typeof type === \"string\" || typeof type === \"function\") {\n                return true;\n            } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {\n                return true;\n            }\n            if (typeof type === \"object\" && type !== null) {\n                if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n                // types supported by any Flight configuration anywhere since\n                // we don't know which Flight build this will end up being used\n                // with.\n                type.$$typeof === REACT_CLIENT_REFERENCE$2 || type.getModuleId !== undefined) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        function getWrappedName(outerType, innerType, wrapperName) {\n            var displayName = outerType.displayName;\n            if (displayName) {\n                return displayName;\n            }\n            var functionName = innerType.displayName || innerType.name || \"\";\n            return functionName !== \"\" ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n        } // Keep in sync with react-reconciler/getComponentNameFromFiber\n        function getContextName(type) {\n            return type.displayName || \"Context\";\n        }\n        var REACT_CLIENT_REFERENCE$1 = Symbol.for(\"react.client.reference\"); // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n        function getComponentNameFromType(type) {\n            if (type == null) {\n                // Host root, text node or just invalid type.\n                return null;\n            }\n            if (typeof type === \"function\") {\n                if (type.$$typeof === REACT_CLIENT_REFERENCE$1) {\n                    // TODO: Create a convention for naming client references with debug info.\n                    return null;\n                }\n                return type.displayName || type.name || null;\n            }\n            if (typeof type === \"string\") {\n                return type;\n            }\n            switch(type){\n                case REACT_FRAGMENT_TYPE:\n                    return \"Fragment\";\n                case REACT_PORTAL_TYPE:\n                    return \"Portal\";\n                case REACT_PROFILER_TYPE:\n                    return \"Profiler\";\n                case REACT_STRICT_MODE_TYPE:\n                    return \"StrictMode\";\n                case REACT_SUSPENSE_TYPE:\n                    return \"Suspense\";\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return \"SuspenseList\";\n                case REACT_CACHE_TYPE:\n                    {\n                        return \"Cache\";\n                    }\n            }\n            if (typeof type === \"object\") {\n                {\n                    if (typeof type.tag === \"number\") {\n                        error(\"Received an unexpected object in getComponentNameFromType(). \" + \"This is likely a bug in React. Please file an issue.\");\n                    }\n                }\n                switch(type.$$typeof){\n                    case REACT_CONTEXT_TYPE:\n                        var context = type;\n                        return getContextName(context) + \".Consumer\";\n                    case REACT_PROVIDER_TYPE:\n                        var provider = type;\n                        return getContextName(provider._context) + \".Provider\";\n                    case REACT_FORWARD_REF_TYPE:\n                        return getWrappedName(type, type.render, \"ForwardRef\");\n                    case REACT_MEMO_TYPE:\n                        var outerName = type.displayName || null;\n                        if (outerName !== null) {\n                            return outerName;\n                        }\n                        return getComponentNameFromType(type.type) || \"Memo\";\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                return getComponentNameFromType(init(payload));\n                            } catch (x) {\n                                return null;\n                            }\n                        }\n                }\n            }\n            return null;\n        }\n        var assign = Object.assign;\n        // Helpers to patch console.logs to avoid logging during side-effect free\n        // replaying on render function. This currently only patches the object\n        // lazily which won't cover if the log function was extracted eagerly.\n        // We could also eagerly patch the method.\n        var disabledDepth = 0;\n        var prevLog;\n        var prevInfo;\n        var prevWarn;\n        var prevError;\n        var prevGroup;\n        var prevGroupCollapsed;\n        var prevGroupEnd;\n        function disabledLog() {}\n        disabledLog.__reactDisabledLog = true;\n        function disableLogs() {\n            {\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;\n                    prevInfo = console.info;\n                    prevWarn = console.warn;\n                    prevError = console.error;\n                    prevGroup = console.group;\n                    prevGroupCollapsed = console.groupCollapsed;\n                    prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n                    var props = {\n                        configurable: true,\n                        enumerable: true,\n                        value: disabledLog,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        info: props,\n                        log: props,\n                        warn: props,\n                        error: props,\n                        group: props,\n                        groupCollapsed: props,\n                        groupEnd: props\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                disabledDepth++;\n            }\n        }\n        function reenableLogs() {\n            {\n                disabledDepth--;\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ var props = {\n                        configurable: true,\n                        enumerable: true,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        log: assign({}, props, {\n                            value: prevLog\n                        }),\n                        info: assign({}, props, {\n                            value: prevInfo\n                        }),\n                        warn: assign({}, props, {\n                            value: prevWarn\n                        }),\n                        error: assign({}, props, {\n                            value: prevError\n                        }),\n                        group: assign({}, props, {\n                            value: prevGroup\n                        }),\n                        groupCollapsed: assign({}, props, {\n                            value: prevGroupCollapsed\n                        }),\n                        groupEnd: assign({}, props, {\n                            value: prevGroupEnd\n                        })\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                if (disabledDepth < 0) {\n                    error(\"disabledDepth fell below zero. \" + \"This is a bug in React. Please file an issue.\");\n                }\n            }\n        }\n        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n        var prefix;\n        function describeBuiltInComponentFrame(name, source, ownerFn) {\n            {\n                if (prefix === undefined) {\n                    // Extract the VM specific prefix used by each line.\n                    try {\n                        throw Error();\n                    } catch (x) {\n                        var match = x.stack.trim().match(/\\n( *(at )?)/);\n                        prefix = match && match[1] || \"\";\n                    }\n                } // We use the prefix to ensure our stacks line up with native stack frames.\n                return \"\\n\" + prefix + name;\n            }\n        }\n        var reentry = false;\n        var componentFrameCache;\n        {\n            var PossiblyWeakMap = typeof WeakMap === \"function\" ? WeakMap : Map;\n            componentFrameCache = new PossiblyWeakMap();\n        }\n        /**\n * Leverages native browser/VM stack frames to get proper details (e.g.\n * filename, line + col number) for a single component in a component stack. We\n * do this by:\n *   (1) throwing and catching an error in the function - this will be our\n *       control error.\n *   (2) calling the component which will eventually throw an error that we'll\n *       catch - this will be our sample error.\n *   (3) diffing the control and sample error stacks to find the stack frame\n *       which represents our component.\n */ function describeNativeComponentFrame(fn, construct) {\n            // If something asked for a stack inside a fake render, it should get ignored.\n            if (!fn || reentry) {\n                return \"\";\n            }\n            {\n                var frame = componentFrameCache.get(fn);\n                if (frame !== undefined) {\n                    return frame;\n                }\n            }\n            reentry = true;\n            var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n            Error.prepareStackTrace = undefined;\n            var previousDispatcher;\n            {\n                previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n                // for warnings.\n                ReactCurrentDispatcher.current = null;\n                disableLogs();\n            }\n            /**\n   * Finding a common stack frame between sample and control errors can be\n   * tricky given the different types and levels of stack trace truncation from\n   * different JS VMs. So instead we'll attempt to control what that common\n   * frame should be through this object method:\n   * Having both the sample and control errors be in the function under the\n   * `DescribeNativeComponentFrameRoot` property, + setting the `name` and\n   * `displayName` properties of the function ensures that a stack\n   * frame exists that has the method name `DescribeNativeComponentFrameRoot` in\n   * it for both control and sample stacks.\n   */ var RunInRootFrame = {\n                DetermineComponentFrameRoot: function() {\n                    var control;\n                    try {\n                        // This should throw.\n                        if (construct) {\n                            // Something should be setting the props in the constructor.\n                            var Fake = function() {\n                                throw Error();\n                            }; // $FlowFixMe[prop-missing]\n                            Object.defineProperty(Fake.prototype, \"props\", {\n                                set: function() {\n                                    // We use a throwing setter instead of frozen or non-writable props\n                                    // because that won't throw in a non-strict mode function.\n                                    throw Error();\n                                }\n                            });\n                            if (typeof Reflect === \"object\" && Reflect.construct) {\n                                // We construct a different control for this case to include any extra\n                                // frames added by the construct call.\n                                try {\n                                    Reflect.construct(Fake, []);\n                                } catch (x) {\n                                    control = x;\n                                }\n                                Reflect.construct(fn, [], Fake);\n                            } else {\n                                try {\n                                    Fake.call();\n                                } catch (x) {\n                                    control = x;\n                                } // $FlowFixMe[prop-missing] found when upgrading Flow\n                                fn.call(Fake.prototype);\n                            }\n                        } else {\n                            try {\n                                throw Error();\n                            } catch (x) {\n                                control = x;\n                            } // TODO(luna): This will currently only throw if the function component\n                            // tries to access React/ReactDOM/props. We should probably make this throw\n                            // in simple components too\n                            var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n                            // component, which we don't yet support. Attach a noop catch handler to\n                            // silence the error.\n                            // TODO: Implement component stacks for async client components?\n                            if (maybePromise && typeof maybePromise.catch === \"function\") {\n                                maybePromise.catch(function() {});\n                            }\n                        }\n                    } catch (sample) {\n                        // This is inlined manually because closure doesn't do it for us.\n                        if (sample && control && typeof sample.stack === \"string\") {\n                            return [\n                                sample.stack,\n                                control.stack\n                            ];\n                        }\n                    }\n                    return [\n                        null,\n                        null\n                    ];\n                }\n            }; // $FlowFixMe[prop-missing]\n            RunInRootFrame.DetermineComponentFrameRoot.displayName = \"DetermineComponentFrameRoot\";\n            var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, \"name\"); // Before ES6, the `name` property was not configurable.\n            if (namePropDescriptor && namePropDescriptor.configurable) {\n                // V8 utilizes a function's `name` property when generating a stack trace.\n                Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, // is set to `false`.\n                // $FlowFixMe[cannot-write]\n                \"name\", {\n                    value: \"DetermineComponentFrameRoot\"\n                });\n            }\n            try {\n                var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];\n                if (sampleStack && controlStack) {\n                    // This extracts the first frame from the sample that isn't also in the control.\n                    // Skipping one frame that we assume is the frame that calls the two.\n                    var sampleLines = sampleStack.split(\"\\n\");\n                    var controlLines = controlStack.split(\"\\n\");\n                    var s = 0;\n                    var c = 0;\n                    while(s < sampleLines.length && !sampleLines[s].includes(\"DetermineComponentFrameRoot\")){\n                        s++;\n                    }\n                    while(c < controlLines.length && !controlLines[c].includes(\"DetermineComponentFrameRoot\")){\n                        c++;\n                    } // We couldn't find our intentionally injected common root frame, attempt\n                    // to find another common root frame by search from the bottom of the\n                    // control stack...\n                    if (s === sampleLines.length || c === controlLines.length) {\n                        s = sampleLines.length - 1;\n                        c = controlLines.length - 1;\n                        while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]){\n                            // We expect at least one stack frame to be shared.\n                            // Typically this will be the root most one. However, stack frames may be\n                            // cut off due to maximum stack limits. In this case, one maybe cut off\n                            // earlier than the other. We assume that the sample is longer or the same\n                            // and there for cut off earlier. So we should find the root most frame in\n                            // the sample somewhere in the control.\n                            c--;\n                        }\n                    }\n                    for(; s >= 1 && c >= 0; s--, c--){\n                        // Next we find the first one that isn't the same which should be the\n                        // frame that called our sample function and the control.\n                        if (sampleLines[s] !== controlLines[c]) {\n                            // In V8, the first line is describing the message but other VMs don't.\n                            // If we're about to return the first line, and the control is also on the same\n                            // line, that's a pretty good indicator that our sample threw at same line as\n                            // the control. I.e. before we entered the sample frame. So we ignore this result.\n                            // This can happen if you passed a class to function component, or non-function.\n                            if (s !== 1 || c !== 1) {\n                                do {\n                                    s--;\n                                    c--; // We may still have similar intermediate frames from the construct call.\n                                    // The next one that isn't the same should be our match though.\n                                    if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                                        // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                                        var _frame = \"\\n\" + sampleLines[s].replace(\" at new \", \" at \"); // If our component frame is labeled \"<anonymous>\"\n                                        // but we have a user-provided \"displayName\"\n                                        // splice it in to make the stack more readable.\n                                        if (fn.displayName && _frame.includes(\"<anonymous>\")) {\n                                            _frame = _frame.replace(\"<anonymous>\", fn.displayName);\n                                        }\n                                        if (true) {\n                                            if (typeof fn === \"function\") {\n                                                componentFrameCache.set(fn, _frame);\n                                            }\n                                        } // Return the line we found.\n                                        return _frame;\n                                    }\n                                }while (s >= 1 && c >= 0);\n                            }\n                            break;\n                        }\n                    }\n                }\n            } finally{\n                reentry = false;\n                {\n                    ReactCurrentDispatcher.current = previousDispatcher;\n                    reenableLogs();\n                }\n                Error.prepareStackTrace = previousPrepareStackTrace;\n            } // Fallback to just using the name if we couldn't make it throw.\n            var name = fn ? fn.displayName || fn.name : \"\";\n            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : \"\";\n            {\n                if (typeof fn === \"function\") {\n                    componentFrameCache.set(fn, syntheticFrame);\n                }\n            }\n            return syntheticFrame;\n        }\n        function describeFunctionComponentFrame(fn, source, ownerFn) {\n            {\n                return describeNativeComponentFrame(fn, false);\n            }\n        }\n        function shouldConstruct(Component) {\n            var prototype = Component.prototype;\n            return !!(prototype && prototype.isReactComponent);\n        }\n        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n            if (type == null) {\n                return \"\";\n            }\n            if (typeof type === \"function\") {\n                {\n                    return describeNativeComponentFrame(type, shouldConstruct(type));\n                }\n            }\n            if (typeof type === \"string\") {\n                return describeBuiltInComponentFrame(type);\n            }\n            switch(type){\n                case REACT_SUSPENSE_TYPE:\n                    return describeBuiltInComponentFrame(\"Suspense\");\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return describeBuiltInComponentFrame(\"SuspenseList\");\n            }\n            if (typeof type === \"object\") {\n                switch(type.$$typeof){\n                    case REACT_FORWARD_REF_TYPE:\n                        return describeFunctionComponentFrame(type.render);\n                    case REACT_MEMO_TYPE:\n                        // Memo may contain any component type so we recursively resolve it.\n                        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                // Lazy may contain any component type so we recursively resolve it.\n                                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n                            } catch (x) {}\n                        }\n                }\n            }\n            return \"\";\n        }\n        // $FlowFixMe[method-unbinding]\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\n        var loggedTypeFailures = {};\n        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n        function setCurrentlyValidatingElement$1(element) {\n            {\n                if (element) {\n                    var owner = element._owner;\n                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n                    ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n                } else {\n                    ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n                }\n            }\n        }\n        function checkPropTypes(typeSpecs, values, location, componentName, element) {\n            {\n                // $FlowFixMe[incompatible-use] This is okay but Flow doesn't know it.\n                var has = Function.call.bind(hasOwnProperty);\n                for(var typeSpecName in typeSpecs){\n                    if (has(typeSpecs, typeSpecName)) {\n                        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n                        // fail the render phase where it didn't fail before. So we log it.\n                        // After these have been cleaned up, we'll let them throw.\n                        try {\n                            // This is intentionally an invariant that gets caught. It's the same\n                            // behavior as without this statement except with a better message.\n                            if (typeof typeSpecs[typeSpecName] !== \"function\") {\n                                // eslint-disable-next-line react-internal/prod-error-codes\n                                var err = Error((componentName || \"React class\") + \": \" + location + \" type `\" + typeSpecName + \"` is invalid; \" + \"it must be a function, usually from the `prop-types` package, but received `\" + typeof typeSpecs[typeSpecName] + \"`.\" + \"This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                                err.name = \"Invariant Violation\";\n                                throw err;\n                            }\n                            error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\");\n                        } catch (ex) {\n                            error$1 = ex;\n                        }\n                        if (error$1 && !(error$1 instanceof Error)) {\n                            setCurrentlyValidatingElement$1(element);\n                            error(\"%s: type specification of %s\" + \" `%s` is invalid; the type checker \" + \"function must return `null` or an `Error` but returned a %s. \" + \"You may have forgotten to pass an argument to the type checker \" + \"creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and \" + \"shape all require an argument).\", componentName || \"React class\", location, typeSpecName, typeof error$1);\n                            setCurrentlyValidatingElement$1(null);\n                        }\n                        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n                            // Only monitor this failure once because there tends to be a lot of the\n                            // same error.\n                            loggedTypeFailures[error$1.message] = true;\n                            setCurrentlyValidatingElement$1(element);\n                            error(\"Failed %s type: %s\", location, error$1.message);\n                            setCurrentlyValidatingElement$1(null);\n                        }\n                    }\n                }\n            }\n        }\n        var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n        function isArray(a) {\n            return isArrayImpl(a);\n        }\n        /*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */ // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function typeName(value) {\n            {\n                // toStringTag is needed for namespaced types like Temporal.Instant\n                var hasToStringTag = typeof Symbol === \"function\" && Symbol.toStringTag;\n                var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || \"Object\"; // $FlowFixMe[incompatible-return]\n                return type;\n            }\n        } // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function willCoercionThrow(value) {\n            {\n                try {\n                    testStringCoercion(value);\n                    return false;\n                } catch (e) {\n                    return true;\n                }\n            }\n        }\n        function testStringCoercion(value) {\n            // If you ended up here by following an exception call stack, here's what's\n            // happened: you supplied an object or symbol value to React (as a prop, key,\n            // DOM attribute, CSS property, string ref, etc.) and when React tried to\n            // coerce it to a string using `'' + value`, an exception was thrown.\n            //\n            // The most common types that will cause this exception are `Symbol` instances\n            // and Temporal objects like `Temporal.Instant`. But any object that has a\n            // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n            // exception. (Library authors do this to prevent users from using built-in\n            // numeric operators like `+` or comparison operators like `>=` because custom\n            // methods are needed to perform accurate arithmetic or comparison.)\n            //\n            // To fix the problem, coerce this object or symbol value to a string before\n            // passing it to React. The most reliable way is usually `String(value)`.\n            //\n            // To find which value is throwing, check the browser or debugger console.\n            // Before this exception was thrown, there should be `console.error` output\n            // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n            // problem and how that type was used: key, atrribute, input value prop, etc.\n            // In most cases, this console output also shows the component and its\n            // ancestor components where the exception happened.\n            //\n            // eslint-disable-next-line react-internal/safe-string-coercion\n            return \"\" + value;\n        }\n        function checkKeyStringCoercion(value) {\n            {\n                if (willCoercionThrow(value)) {\n                    error(\"The provided key is an unsupported type %s.\" + \" This value must be coerced to a string before using it here.\", typeName(value));\n                    return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n                }\n            }\n        }\n        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\n        var RESERVED_PROPS = {\n            key: true,\n            ref: true,\n            __self: true,\n            __source: true\n        };\n        var specialPropKeyWarningShown;\n        var specialPropRefWarningShown;\n        var didWarnAboutStringRefs;\n        {\n            didWarnAboutStringRefs = {};\n        }\n        function hasValidRef(config) {\n            {\n                if (hasOwnProperty.call(config, \"ref\")) {\n                    var getter = Object.getOwnPropertyDescriptor(config, \"ref\").get;\n                    if (getter && getter.isReactWarning) {\n                        return false;\n                    }\n                }\n            }\n            return config.ref !== undefined;\n        }\n        function hasValidKey(config) {\n            {\n                if (hasOwnProperty.call(config, \"key\")) {\n                    var getter = Object.getOwnPropertyDescriptor(config, \"key\").get;\n                    if (getter && getter.isReactWarning) {\n                        return false;\n                    }\n                }\n            }\n            return config.key !== undefined;\n        }\n        function warnIfStringRefCannotBeAutoConverted(config, self) {\n            {\n                if (typeof config.ref === \"string\" && ReactCurrentOwner$1.current && self && ReactCurrentOwner$1.current.stateNode !== self) {\n                    var componentName = getComponentNameFromType(ReactCurrentOwner$1.current.type);\n                    if (!didWarnAboutStringRefs[componentName]) {\n                        error('Component \"%s\" contains the string ref \"%s\". ' + \"Support for string refs will be removed in a future major release. \" + \"This case cannot be automatically converted to an arrow function. \" + \"We ask you to manually fix this case by using useRef() or createRef() instead. \" + \"Learn more about using refs safely here: \" + \"https://reactjs.org/link/strict-mode-string-ref\", getComponentNameFromType(ReactCurrentOwner$1.current.type), config.ref);\n                        didWarnAboutStringRefs[componentName] = true;\n                    }\n                }\n            }\n        }\n        function defineKeyPropWarningGetter(props, displayName) {\n            {\n                var warnAboutAccessingKey = function() {\n                    if (!specialPropKeyWarningShown) {\n                        specialPropKeyWarningShown = true;\n                        error(\"%s: `key` is not a prop. Trying to access it will result \" + \"in `undefined` being returned. If you need to access the same \" + \"value within the child component, you should pass it as a different \" + \"prop. (https://reactjs.org/link/special-props)\", displayName);\n                    }\n                };\n                warnAboutAccessingKey.isReactWarning = true;\n                Object.defineProperty(props, \"key\", {\n                    get: warnAboutAccessingKey,\n                    configurable: true\n                });\n            }\n        }\n        function defineRefPropWarningGetter(props, displayName) {\n            {\n                var warnAboutAccessingRef = function() {\n                    if (!specialPropRefWarningShown) {\n                        specialPropRefWarningShown = true;\n                        error(\"%s: `ref` is not a prop. Trying to access it will result \" + \"in `undefined` being returned. If you need to access the same \" + \"value within the child component, you should pass it as a different \" + \"prop. (https://reactjs.org/link/special-props)\", displayName);\n                    }\n                };\n                warnAboutAccessingRef.isReactWarning = true;\n                Object.defineProperty(props, \"ref\", {\n                    get: warnAboutAccessingRef,\n                    configurable: true\n                });\n            }\n        }\n        /**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */ function ReactElement(type, key, ref, self, source, owner, props) {\n            var element = {\n                // This tag allows us to uniquely identify this as a React Element\n                $$typeof: REACT_ELEMENT_TYPE,\n                // Built-in properties that belong on the element\n                type: type,\n                key: key,\n                ref: ref,\n                props: props,\n                // Record the component responsible for creating this element.\n                _owner: owner\n            };\n            {\n                // The validation flag is currently mutative. We put it on\n                // an external backing store so that we can freeze the whole object.\n                // This can be replaced with a WeakMap once they are implemented in\n                // commonly used development environments.\n                element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n                // the validation flag non-enumerable (where possible, which should\n                // include every environment we run tests in), so the test framework\n                // ignores it.\n                Object.defineProperty(element._store, \"validated\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: true,\n                    value: false\n                }); // self and source are DEV only properties.\n                Object.defineProperty(element, \"_self\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: false,\n                    value: self\n                }); // Two elements created in two different places should be considered\n                // equal for testing purposes and therefore we hide it from enumeration.\n                Object.defineProperty(element, \"_source\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: false,\n                    value: source\n                });\n                if (Object.freeze) {\n                    Object.freeze(element.props);\n                    Object.freeze(element);\n                }\n            }\n            return element;\n        }\n        /**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */ function jsxDEV$1(type, config, maybeKey, source, self) {\n            {\n                var propName; // Reserved names are extracted\n                var props = {};\n                var key = null;\n                var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n                // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n                // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n                // but as an intermediary step, we will use jsxDEV for everything except\n                // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n                // key is explicitly declared to be undefined or not.\n                if (maybeKey !== undefined) {\n                    {\n                        checkKeyStringCoercion(maybeKey);\n                    }\n                    key = \"\" + maybeKey;\n                }\n                if (hasValidKey(config)) {\n                    {\n                        checkKeyStringCoercion(config.key);\n                    }\n                    key = \"\" + config.key;\n                }\n                if (hasValidRef(config)) {\n                    ref = config.ref;\n                    warnIfStringRefCannotBeAutoConverted(config, self);\n                } // Remaining properties are added to a new props object\n                for(propName in config){\n                    if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n                        props[propName] = config[propName];\n                    }\n                } // Resolve default props\n                if (type && type.defaultProps) {\n                    var defaultProps = type.defaultProps;\n                    for(propName in defaultProps){\n                        if (props[propName] === undefined) {\n                            props[propName] = defaultProps[propName];\n                        }\n                    }\n                }\n                if (key || ref) {\n                    var displayName = typeof type === \"function\" ? type.displayName || type.name || \"Unknown\" : type;\n                    if (key) {\n                        defineKeyPropWarningGetter(props, displayName);\n                    }\n                    if (ref) {\n                        defineRefPropWarningGetter(props, displayName);\n                    }\n                }\n                return ReactElement(type, key, ref, self, source, ReactCurrentOwner$1.current, props);\n            }\n        }\n        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n        var REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\");\n        function setCurrentlyValidatingElement(element) {\n            {\n                if (element) {\n                    var owner = element._owner;\n                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n                    ReactDebugCurrentFrame.setExtraStackFrame(stack);\n                } else {\n                    ReactDebugCurrentFrame.setExtraStackFrame(null);\n                }\n            }\n        }\n        var propTypesMisspellWarningShown;\n        {\n            propTypesMisspellWarningShown = false;\n        }\n        /**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */ function isValidElement(object) {\n            {\n                return typeof object === \"object\" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n            }\n        }\n        function getDeclarationErrorAddendum() {\n            {\n                if (ReactCurrentOwner.current) {\n                    var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n                    if (name) {\n                        return \"\\n\\nCheck the render method of `\" + name + \"`.\";\n                    }\n                }\n                return \"\";\n            }\n        }\n        function getSourceInfoErrorAddendum(source) {\n            {\n                if (source !== undefined) {\n                    var fileName = source.fileName.replace(/^.*[\\\\\\/]/, \"\");\n                    var lineNumber = source.lineNumber;\n                    return \"\\n\\nCheck your code at \" + fileName + \":\" + lineNumber + \".\";\n                }\n                return \"\";\n            }\n        }\n        /**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */ var ownerHasKeyUseWarning = {};\n        function getCurrentComponentErrorInfo(parentType) {\n            {\n                var info = getDeclarationErrorAddendum();\n                if (!info) {\n                    var parentName = getComponentNameFromType(parentType);\n                    if (parentName) {\n                        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n                    }\n                }\n                return info;\n            }\n        }\n        /**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */ function validateExplicitKey(element, parentType) {\n            {\n                if (!element._store || element._store.validated || element.key != null) {\n                    return;\n                }\n                element._store.validated = true;\n                var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n                if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n                    return;\n                }\n                ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n                // property, it may be the creator of the child that's responsible for\n                // assigning it a key.\n                var childOwner = \"\";\n                if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n                    // Give the component that originally created this child.\n                    childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n                }\n                setCurrentlyValidatingElement(element);\n                error('Each child in a list should have a unique \"key\" prop.' + \"%s%s See https://reactjs.org/link/warning-keys for more information.\", currentComponentErrorInfo, childOwner);\n                setCurrentlyValidatingElement(null);\n            }\n        }\n        /**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */ function validateChildKeys(node, parentType) {\n            {\n                if (typeof node !== \"object\" || !node) {\n                    return;\n                }\n                if (node.$$typeof === REACT_CLIENT_REFERENCE) ;\n                else if (isArray(node)) {\n                    for(var i = 0; i < node.length; i++){\n                        var child = node[i];\n                        if (isValidElement(child)) {\n                            validateExplicitKey(child, parentType);\n                        }\n                    }\n                } else if (isValidElement(node)) {\n                    // This element was passed in a valid location.\n                    if (node._store) {\n                        node._store.validated = true;\n                    }\n                } else {\n                    var iteratorFn = getIteratorFn(node);\n                    if (typeof iteratorFn === \"function\") {\n                        // Entry iterators used to provide implicit keys,\n                        // but now we print a separate warning for them later.\n                        if (iteratorFn !== node.entries) {\n                            var iterator = iteratorFn.call(node);\n                            var step;\n                            while(!(step = iterator.next()).done){\n                                if (isValidElement(step.value)) {\n                                    validateExplicitKey(step.value, parentType);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        /**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */ function validatePropTypes(element) {\n            {\n                var type = element.type;\n                if (type === null || type === undefined || typeof type === \"string\") {\n                    return;\n                }\n                if (type.$$typeof === REACT_CLIENT_REFERENCE) {\n                    return;\n                }\n                var propTypes;\n                if (typeof type === \"function\") {\n                    propTypes = type.propTypes;\n                } else if (typeof type === \"object\" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n                // Inner props are checked in the reconciler.\n                type.$$typeof === REACT_MEMO_TYPE)) {\n                    propTypes = type.propTypes;\n                } else {\n                    return;\n                }\n                if (propTypes) {\n                    // Intentionally inside to avoid triggering lazy initializers:\n                    var name = getComponentNameFromType(type);\n                    checkPropTypes(propTypes, element.props, \"prop\", name, element);\n                } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n                    propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n                    var _name = getComponentNameFromType(type);\n                    error(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\", _name || \"Unknown\");\n                }\n                if (typeof type.getDefaultProps === \"function\" && !type.getDefaultProps.isReactClassApproved) {\n                    error(\"getDefaultProps is only used on classic React.createClass \" + \"definitions. Use a static property named `defaultProps` instead.\");\n                }\n            }\n        }\n        /**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */ function validateFragmentProps(fragment) {\n            {\n                var keys = Object.keys(fragment.props);\n                for(var i = 0; i < keys.length; i++){\n                    var key = keys[i];\n                    if (key !== \"children\" && key !== \"key\") {\n                        setCurrentlyValidatingElement(fragment);\n                        error(\"Invalid prop `%s` supplied to `React.Fragment`. \" + \"React.Fragment can only have `key` and `children` props.\", key);\n                        setCurrentlyValidatingElement(null);\n                        break;\n                    }\n                }\n                if (fragment.ref !== null) {\n                    setCurrentlyValidatingElement(fragment);\n                    error(\"Invalid attribute `ref` supplied to `React.Fragment`.\");\n                    setCurrentlyValidatingElement(null);\n                }\n            }\n        }\n        var didWarnAboutKeySpread = {};\n        function jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n            {\n                var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n                // succeed and there will likely be errors in render.\n                if (!validType) {\n                    var info = \"\";\n                    if (type === undefined || typeof type === \"object\" && type !== null && Object.keys(type).length === 0) {\n                        info += \" You likely forgot to export your component from the file \" + \"it's defined in, or you might have mixed up default and named imports.\";\n                    }\n                    var sourceInfo = getSourceInfoErrorAddendum(source);\n                    if (sourceInfo) {\n                        info += sourceInfo;\n                    } else {\n                        info += getDeclarationErrorAddendum();\n                    }\n                    var typeString;\n                    if (type === null) {\n                        typeString = \"null\";\n                    } else if (isArray(type)) {\n                        typeString = \"array\";\n                    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n                        typeString = \"<\" + (getComponentNameFromType(type.type) || \"Unknown\") + \" />\";\n                        info = \" Did you accidentally export a JSX literal instead of a component?\";\n                    } else {\n                        typeString = typeof type;\n                    }\n                    error(\"React.jsx: type is invalid -- expected a string (for \" + \"built-in components) or a class/function (for composite \" + \"components) but got: %s.%s\", typeString, info);\n                }\n                var element = jsxDEV$1(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n                // TODO: Drop this when these are no longer allowed as the type argument.\n                if (element == null) {\n                    return element;\n                } // Skip key warning if the type isn't valid since our key validation logic\n                // doesn't expect a non-string/function type and can throw confusing errors.\n                // We don't want exception behavior to differ between dev and prod.\n                // (Rendering will throw with a helpful message and as soon as the type is\n                // fixed, the key warnings will appear.)\n                if (validType) {\n                    var children = props.children;\n                    if (children !== undefined) {\n                        if (isStaticChildren) {\n                            if (isArray(children)) {\n                                for(var i = 0; i < children.length; i++){\n                                    validateChildKeys(children[i], type);\n                                }\n                                if (Object.freeze) {\n                                    Object.freeze(children);\n                                }\n                            } else {\n                                error(\"React.jsx: Static children should always be an array. \" + \"You are likely explicitly calling React.jsxs or React.jsxDEV. \" + \"Use the Babel transform instead.\");\n                            }\n                        } else {\n                            validateChildKeys(children, type);\n                        }\n                    }\n                }\n                if (hasOwnProperty.call(props, \"key\")) {\n                    var componentName = getComponentNameFromType(type);\n                    var keys = Object.keys(props).filter(function(k) {\n                        return k !== \"key\";\n                    });\n                    var beforeExample = keys.length > 0 ? \"{key: someKey, \" + keys.join(\": ..., \") + \": ...}\" : \"{key: someKey}\";\n                    if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n                        var afterExample = keys.length > 0 ? \"{\" + keys.join(\": ..., \") + \": ...}\" : \"{}\";\n                        error('A props object containing a \"key\" prop is being spread into JSX:\\n' + \"  let props = %s;\\n\" + \"  <%s {...props} />\\n\" + \"React keys must be passed directly to JSX without using spread:\\n\" + \"  let props = %s;\\n\" + \"  <%s key={someKey} {...props} />\", beforeExample, componentName, afterExample, componentName);\n                        didWarnAboutKeySpread[componentName + beforeExample] = true;\n                    }\n                }\n                if (type === REACT_FRAGMENT_TYPE) {\n                    validateFragmentProps(element);\n                } else {\n                    validatePropTypes(element);\n                }\n                return element;\n            }\n        } // These two functions exist to still get child warnings in dev\n        var jsxDEV = jsxWithValidation;\n        exports.Fragment = REACT_FRAGMENT_TYPE;\n        exports.jsxDEV = jsxDEV;\n    })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nif (false) {} else {\n    module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsS0FBeUIsRUFBYyxFQUUxQyxNQUFNO0lBQ0xDLDhMQUF5QjtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0L2pzeC1kZXYtcnVudGltZS5qcz9jYTIwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtZGV2LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOlsicHJvY2VzcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/components/ClientOnly.tsx":
/*!***************************************!*\
  !*** ./app/components/ClientOnly.tsx ***!
  \***************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ ClientOnly; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\nfunction ClientOnly(param) {\n    let { children } = param;\n    _s();\n    const [mounted, setMounted] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        setMounted(true);\n    }, []);\n    if (!mounted) {\n        return null;\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: children\n    }, void 0, false);\n}\n_s(ClientOnly, \"LrrVfNW3d1raFE0BNzCTILYmIfo=\");\n_c = ClientOnly;\nvar _c;\n$RefreshReg$(_c, \"ClientOnly\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9jb21wb25lbnRzL0NsaWVudE9ubHkudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUU0QztBQUU3QixTQUFTRSxXQUFXLEtBQTJDO1FBQTNDLEVBQUVDLFFBQVEsRUFBaUMsR0FBM0M7O0lBQ2pDLE1BQU0sQ0FBQ0MsU0FBU0MsV0FBVyxHQUFHSiwrQ0FBUUEsQ0FBQztJQUV2Q0QsZ0RBQVNBLENBQUM7UUFDUkssV0FBVztJQUNiLEdBQUcsRUFBRTtJQUVMLElBQUksQ0FBQ0QsU0FBUztRQUNaLE9BQU87SUFDVDtJQUVBLHFCQUFPO2tCQUFHRDs7QUFDWjtHQVp3QkQ7S0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vYXBwL2NvbXBvbmVudHMvQ2xpZW50T25seS50c3g/YTI5OCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCc7XG5cbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENsaWVudE9ubHkoeyBjaGlsZHJlbiB9OiB7IGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUgfSkge1xuICBjb25zdCBbbW91bnRlZCwgc2V0TW91bnRlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBzZXRNb3VudGVkKHRydWUpO1xuICB9LCBbXSk7XG5cbiAgaWYgKCFtb3VudGVkKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gPD57Y2hpbGRyZW59PC8+O1xufSAiXSwibmFtZXMiOlsidXNlRWZmZWN0IiwidXNlU3RhdGUiLCJDbGllbnRPbmx5IiwiY2hpbGRyZW4iLCJtb3VudGVkIiwic2V0TW91bnRlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/components/ClientOnly.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/components/LearningProgress.tsx":
/*!*********************************************!*\
  !*** ./app/components/LearningProgress.tsx ***!
  \*********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ LearningProgress; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var framer_motion__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! framer-motion */ \"(app-pages-browser)/./node_modules/framer-motion/dist/cjs/index.js\");\n/* harmony import */ var _barrel_optimize_names_Award_Book_Star_Trophy_lucide_react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=Award,Book,Star,Trophy!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/book.js\");\n/* harmony import */ var _barrel_optimize_names_Award_Book_Star_Trophy_lucide_react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! __barrel_optimize__?names=Award,Book,Star,Trophy!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/trophy.js\");\n/* harmony import */ var _barrel_optimize_names_Award_Book_Star_Trophy_lucide_react__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! __barrel_optimize__?names=Award,Book,Star,Trophy!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/star.js\");\n/* harmony import */ var _barrel_optimize_names_Award_Book_Star_Trophy_lucide_react__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! __barrel_optimize__?names=Award,Book,Star,Trophy!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/award.js\");\n/* harmony import */ var _lib_services_user_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/services/user.service */ \"(app-pages-browser)/./app/lib/services/user.service.ts\");\n/* harmony import */ var _providers_WalletProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../providers/WalletProvider */ \"(app-pages-browser)/./app/providers/WalletProvider.tsx\");\n/* harmony import */ var _ClientOnly__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ClientOnly */ \"(app-pages-browser)/./app/components/ClientOnly.tsx\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\nfunction LearningProgress() {\n    _s();\n    const { publicKey } = (0,_providers_WalletProvider__WEBPACK_IMPORTED_MODULE_3__.useWallet)();\n    const [stats, setStats] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        async function loadStats() {\n            if (!publicKey) return;\n            try {\n                const profile = await _lib_services_user_service__WEBPACK_IMPORTED_MODULE_2__.userService.getProfile(publicKey.toString());\n                if (profile) {\n                    setStats(profile.learningStats);\n                }\n            } catch (error) {\n                console.error(\"Error loading learning stats:\", error);\n            } finally{\n                setLoading(false);\n            }\n        }\n        loadStats();\n    }, [\n        publicKey\n    ]);\n    if (!publicKey) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"flex flex-col items-center justify-center p-8 text-center\",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Award_Book_Star_Trophy_lucide_react__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                    className: \"w-12 h-12 mb-4 text-gray-400\"\n                }, void 0, false, {\n                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/LearningProgress.tsx\",\n                    lineNumber: 36,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                    className: \"text-xl font-semibold mb-2\",\n                    children: \"Connect Your Wallet\"\n                }, void 0, false, {\n                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/LearningProgress.tsx\",\n                    lineNumber: 37,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                    className: \"text-gray-500\",\n                    children: \"Connect your wallet to track your learning progress\"\n                }, void 0, false, {\n                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/LearningProgress.tsx\",\n                    lineNumber: 38,\n                    columnNumber: 9\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/LearningProgress.tsx\",\n            lineNumber: 35,\n            columnNumber: 7\n        }, this);\n    }\n    if (loading) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"flex items-center justify-center p-8\",\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"\n            }, void 0, false, {\n                fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/LearningProgress.tsx\",\n                lineNumber: 46,\n                columnNumber: 9\n            }, this)\n        }, void 0, false, {\n            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/LearningProgress.tsx\",\n            lineNumber: 45,\n            columnNumber: 7\n        }, this);\n    }\n    if (!stats) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"flex flex-col items-center justify-center p-8 text-center\",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Award_Book_Star_Trophy_lucide_react__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                    className: \"w-12 h-12 mb-4 text-gray-400\"\n                }, void 0, false, {\n                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/LearningProgress.tsx\",\n                    lineNumber: 54,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                    className: \"text-xl font-semibold mb-2\",\n                    children: \"No Progress Yet\"\n                }, void 0, false, {\n                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/LearningProgress.tsx\",\n                    lineNumber: 55,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                    className: \"text-gray-500\",\n                    children: \"Start learning to track your progress\"\n                }, void 0, false, {\n                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/LearningProgress.tsx\",\n                    lineNumber: 56,\n                    columnNumber: 9\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/LearningProgress.tsx\",\n            lineNumber: 53,\n            columnNumber: 7\n        }, this);\n    }\n    const progressPercent = stats.completedLessons / stats.totalLessons * 100;\n    const xpProgressPercent = stats.xp / stats.xpToNextLevel * 100;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ClientOnly__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_6__.motion.div, {\n            initial: {\n                opacity: 0,\n                y: 20\n            },\n            animate: {\n                opacity: 1,\n                y: 0\n            },\n            transition: {\n                duration: 0.3\n            },\n            className: \"w-full\",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"bg-card rounded-lg p-6 shadow-lg\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"flex items-center justify-between mb-4\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"flex items-center space-x-3\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Award_Book_Star_Trophy_lucide_react__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                                            className: \"w-6 h-6 text-yellow-500\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/LearningProgress.tsx\",\n                                            lineNumber: 76,\n                                            columnNumber: 15\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                            className: \"text-xl font-semibold\",\n                                            children: [\n                                                \"Level \",\n                                                stats.currentLevel\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/LearningProgress.tsx\",\n                                            lineNumber: 77,\n                                            columnNumber: 15\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/LearningProgress.tsx\",\n                                    lineNumber: 75,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                    className: \"text-sm text-gray-500\",\n                                    children: [\n                                        stats.xp,\n                                        \" / \",\n                                        stats.xpToNextLevel,\n                                        \" XP\"\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/LearningProgress.tsx\",\n                                    lineNumber: 79,\n                                    columnNumber: 13\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/LearningProgress.tsx\",\n                            lineNumber: 74,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"w-full h-2 bg-gray-200 rounded-full overflow-hidden\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_6__.motion.div, {\n                                initial: {\n                                    width: 0\n                                },\n                                animate: {\n                                    width: \"\".concat(xpProgressPercent, \"%\")\n                                },\n                                transition: {\n                                    duration: 1\n                                },\n                                className: \"h-full bg-primary\"\n                            }, void 0, false, {\n                                fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/LearningProgress.tsx\",\n                                lineNumber: 82,\n                                columnNumber: 13\n                            }, this)\n                        }, void 0, false, {\n                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/LearningProgress.tsx\",\n                            lineNumber: 81,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/LearningProgress.tsx\",\n                    lineNumber: 73,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"bg-card rounded-lg p-6 shadow-lg\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"flex items-center justify-between mb-4\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"flex items-center space-x-3\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Award_Book_Star_Trophy_lucide_react__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                                            className: \"w-6 h-6 text-blue-500\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/LearningProgress.tsx\",\n                                            lineNumber: 95,\n                                            columnNumber: 15\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                            className: \"text-xl font-semibold\",\n                                            children: \"Lesson Progress\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/LearningProgress.tsx\",\n                                            lineNumber: 96,\n                                            columnNumber: 15\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/LearningProgress.tsx\",\n                                    lineNumber: 94,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                    className: \"text-sm text-gray-500\",\n                                    children: [\n                                        stats.completedLessons,\n                                        \" / \",\n                                        stats.totalLessons,\n                                        \" Completed\"\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/LearningProgress.tsx\",\n                                    lineNumber: 98,\n                                    columnNumber: 13\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/LearningProgress.tsx\",\n                            lineNumber: 93,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"w-full h-2 bg-gray-200 rounded-full overflow-hidden\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_6__.motion.div, {\n                                initial: {\n                                    width: 0\n                                },\n                                animate: {\n                                    width: \"\".concat(progressPercent, \"%\")\n                                },\n                                transition: {\n                                    duration: 1\n                                },\n                                className: \"h-full bg-blue-500\"\n                            }, void 0, false, {\n                                fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/LearningProgress.tsx\",\n                                lineNumber: 103,\n                                columnNumber: 13\n                            }, this)\n                        }, void 0, false, {\n                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/LearningProgress.tsx\",\n                            lineNumber: 102,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/LearningProgress.tsx\",\n                    lineNumber: 92,\n                    columnNumber: 9\n                }, this),\n                stats.achievements.length > 0 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"bg-card rounded-lg p-6 shadow-lg\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"flex items-center space-x-3 mb-4\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Award_Book_Star_Trophy_lucide_react__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n                                    className: \"w-6 h-6 text-yellow-500\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/LearningProgress.tsx\",\n                                    lineNumber: 116,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                    className: \"text-xl font-semibold\",\n                                    children: \"Recent Achievements\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/LearningProgress.tsx\",\n                                    lineNumber: 117,\n                                    columnNumber: 15\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/LearningProgress.tsx\",\n                            lineNumber: 115,\n                            columnNumber: 13\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"space-y-4\",\n                            children: stats.achievements.slice(-3).map((achievement, index)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_6__.motion.div, {\n                                    initial: {\n                                        opacity: 0,\n                                        x: -20\n                                    },\n                                    animate: {\n                                        opacity: 1,\n                                        x: 0\n                                    },\n                                    transition: {\n                                        delay: index * 0.1\n                                    },\n                                    className: \"flex items-center space-x-3 text-sm\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Award_Book_Star_Trophy_lucide_react__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n                                            className: \"w-4 h-4 text-yellow-500\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/LearningProgress.tsx\",\n                                            lineNumber: 128,\n                                            columnNumber: 19\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                            children: achievement\n                                        }, void 0, false, {\n                                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/LearningProgress.tsx\",\n                                            lineNumber: 129,\n                                            columnNumber: 19\n                                        }, this)\n                                    ]\n                                }, index, true, {\n                                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/LearningProgress.tsx\",\n                                    lineNumber: 121,\n                                    columnNumber: 17\n                                }, this))\n                        }, void 0, false, {\n                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/LearningProgress.tsx\",\n                            lineNumber: 119,\n                            columnNumber: 13\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/LearningProgress.tsx\",\n                    lineNumber: 114,\n                    columnNumber: 11\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/LearningProgress.tsx\",\n            lineNumber: 66,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/LearningProgress.tsx\",\n        lineNumber: 65,\n        columnNumber: 5\n    }, this);\n}\n_s(LearningProgress, \"+CemVp+viaudExBtpWpHh0+g/UA=\", false, function() {\n    return [\n        _providers_WalletProvider__WEBPACK_IMPORTED_MODULE_3__.useWallet\n    ];\n});\n_c = LearningProgress;\nvar _c;\n$RefreshReg$(_c, \"LearningProgress\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9jb21wb25lbnRzL0xlYXJuaW5nUHJvZ3Jlc3MudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRTRDO0FBQ0w7QUFDa0I7QUFDaUI7QUFDbEI7QUFDbEI7QUFFdkIsU0FBU1U7O0lBQ3RCLE1BQU0sRUFBRUMsU0FBUyxFQUFFLEdBQUdILG9FQUFTQTtJQUMvQixNQUFNLENBQUNJLE9BQU9DLFNBQVMsR0FBR1osK0NBQVFBLENBQXVCO0lBQ3pELE1BQU0sQ0FBQ2EsU0FBU0MsV0FBVyxHQUFHZCwrQ0FBUUEsQ0FBQztJQUV2Q0QsZ0RBQVNBLENBQUM7UUFDUixlQUFlZ0I7WUFDYixJQUFJLENBQUNMLFdBQVc7WUFDaEIsSUFBSTtnQkFDRixNQUFNTSxVQUFVLE1BQU1WLG1FQUFXQSxDQUFDVyxVQUFVLENBQUNQLFVBQVVRLFFBQVE7Z0JBQy9ELElBQUlGLFNBQVM7b0JBQ1hKLFNBQVNJLFFBQVFHLGFBQWE7Z0JBQ2hDO1lBQ0YsRUFBRSxPQUFPQyxPQUFPO2dCQUNkQyxRQUFRRCxLQUFLLENBQUMsaUNBQWlDQTtZQUNqRCxTQUFVO2dCQUNSTixXQUFXO1lBQ2I7UUFDRjtRQUVBQztJQUNGLEdBQUc7UUFBQ0w7S0FBVTtJQUVkLElBQUksQ0FBQ0EsV0FBVztRQUNkLHFCQUNFLDhEQUFDWTtZQUFJQyxXQUFVOzs4QkFDYiw4REFBQ3JCLGtHQUFJQTtvQkFBQ3FCLFdBQVU7Ozs7Ozs4QkFDaEIsOERBQUNDO29CQUFHRCxXQUFVOzhCQUE2Qjs7Ozs7OzhCQUMzQyw4REFBQ0U7b0JBQUVGLFdBQVU7OEJBQWdCOzs7Ozs7Ozs7Ozs7SUFHbkM7SUFFQSxJQUFJVixTQUFTO1FBQ1gscUJBQ0UsOERBQUNTO1lBQUlDLFdBQVU7c0JBQ2IsNEVBQUNEO2dCQUFJQyxXQUFVOzs7Ozs7Ozs7OztJQUdyQjtJQUVBLElBQUksQ0FBQ1osT0FBTztRQUNWLHFCQUNFLDhEQUFDVztZQUFJQyxXQUFVOzs4QkFDYiw4REFBQ3JCLGtHQUFJQTtvQkFBQ3FCLFdBQVU7Ozs7Ozs4QkFDaEIsOERBQUNDO29CQUFHRCxXQUFVOzhCQUE2Qjs7Ozs7OzhCQUMzQyw4REFBQ0U7b0JBQUVGLFdBQVU7OEJBQWdCOzs7Ozs7Ozs7Ozs7SUFHbkM7SUFFQSxNQUFNRyxrQkFBa0IsTUFBT0MsZ0JBQWdCLEdBQUdoQixNQUFNaUIsWUFBWSxHQUFJO0lBQ3hFLE1BQU1DLG9CQUFvQixNQUFPQyxFQUFFLEdBQUduQixNQUFNb0IsYUFBYSxHQUFJO0lBRTdELHFCQUNFLDhEQUFDdkIsbURBQVVBO2tCQUNULDRFQUFDUCxpREFBTUEsQ0FBQ3FCLEdBQUc7WUFDVFUsU0FBUztnQkFBRUMsU0FBUztnQkFBR0MsR0FBRztZQUFHO1lBQzdCQyxTQUFTO2dCQUFFRixTQUFTO2dCQUFHQyxHQUFHO1lBQUU7WUFDNUJFLFlBQVk7Z0JBQUVDLFVBQVU7WUFBSTtZQUM1QmQsV0FBVTs7OEJBR1YsOERBQUNEO29CQUFJQyxXQUFVOztzQ0FDYiw4REFBQ0Q7NEJBQUlDLFdBQVU7OzhDQUNiLDhEQUFDRDtvQ0FBSUMsV0FBVTs7c0RBQ2IsOERBQUNwQixrR0FBTUE7NENBQUNvQixXQUFVOzs7Ozs7c0RBQ2xCLDhEQUFDQzs0Q0FBR0QsV0FBVTs7Z0RBQXdCO2dEQUFPWixNQUFNMkIsWUFBWTs7Ozs7Ozs7Ozs7Ozs4Q0FFakUsOERBQUNDO29DQUFLaEIsV0FBVTs7d0NBQXlCWixNQUFNbUIsRUFBRTt3Q0FBQzt3Q0FBSW5CLE1BQU1vQixhQUFhO3dDQUFDOzs7Ozs7Ozs7Ozs7O3NDQUU1RSw4REFBQ1Q7NEJBQUlDLFdBQVU7c0NBQ2IsNEVBQUN0QixpREFBTUEsQ0FBQ3FCLEdBQUc7Z0NBQ1RVLFNBQVM7b0NBQUVRLE9BQU87Z0NBQUU7Z0NBQ3BCTCxTQUFTO29DQUFFSyxPQUFPLEdBQXFCLE9BQWxCWCxtQkFBa0I7Z0NBQUc7Z0NBQzFDTyxZQUFZO29DQUFFQyxVQUFVO2dDQUFFO2dDQUMxQmQsV0FBVTs7Ozs7Ozs7Ozs7Ozs7Ozs7OEJBTWhCLDhEQUFDRDtvQkFBSUMsV0FBVTs7c0NBQ2IsOERBQUNEOzRCQUFJQyxXQUFVOzs4Q0FDYiw4REFBQ0Q7b0NBQUlDLFdBQVU7O3NEQUNiLDhEQUFDckIsa0dBQUlBOzRDQUFDcUIsV0FBVTs7Ozs7O3NEQUNoQiw4REFBQ0M7NENBQUdELFdBQVU7c0RBQXdCOzs7Ozs7Ozs7Ozs7OENBRXhDLDhEQUFDZ0I7b0NBQUtoQixXQUFVOzt3Q0FDYlosTUFBTWdCLGdCQUFnQjt3Q0FBQzt3Q0FBSWhCLE1BQU1pQixZQUFZO3dDQUFDOzs7Ozs7Ozs7Ozs7O3NDQUduRCw4REFBQ047NEJBQUlDLFdBQVU7c0NBQ2IsNEVBQUN0QixpREFBTUEsQ0FBQ3FCLEdBQUc7Z0NBQ1RVLFNBQVM7b0NBQUVRLE9BQU87Z0NBQUU7Z0NBQ3BCTCxTQUFTO29DQUFFSyxPQUFPLEdBQW1CLE9BQWhCZCxpQkFBZ0I7Z0NBQUc7Z0NBQ3hDVSxZQUFZO29DQUFFQyxVQUFVO2dDQUFFO2dDQUMxQmQsV0FBVTs7Ozs7Ozs7Ozs7Ozs7Ozs7Z0JBTWZaLE1BQU04QixZQUFZLENBQUNDLE1BQU0sR0FBRyxtQkFDM0IsOERBQUNwQjtvQkFBSUMsV0FBVTs7c0NBQ2IsOERBQUNEOzRCQUFJQyxXQUFVOzs4Q0FDYiw4REFBQ25CLGtHQUFJQTtvQ0FBQ21CLFdBQVU7Ozs7Ozs4Q0FDaEIsOERBQUNDO29DQUFHRCxXQUFVOzhDQUF3Qjs7Ozs7Ozs7Ozs7O3NDQUV4Qyw4REFBQ0Q7NEJBQUlDLFdBQVU7c0NBQ1paLE1BQU04QixZQUFZLENBQUNFLEtBQUssQ0FBQyxDQUFDLEdBQUdDLEdBQUcsQ0FBQyxDQUFDQyxhQUFhQyxzQkFDOUMsOERBQUM3QyxpREFBTUEsQ0FBQ3FCLEdBQUc7b0NBRVRVLFNBQVM7d0NBQUVDLFNBQVM7d0NBQUdjLEdBQUcsQ0FBQztvQ0FBRztvQ0FDOUJaLFNBQVM7d0NBQUVGLFNBQVM7d0NBQUdjLEdBQUc7b0NBQUU7b0NBQzVCWCxZQUFZO3dDQUFFWSxPQUFPRixRQUFRO29DQUFJO29DQUNqQ3ZCLFdBQVU7O3NEQUVWLDhEQUFDbEIsa0dBQUtBOzRDQUFDa0IsV0FBVTs7Ozs7O3NEQUNqQiw4REFBQ2dCO3NEQUFNTTs7Ozs7OzttQ0FQRkM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWdCdkI7R0FoSXdCckM7O1FBQ0FGLGdFQUFTQTs7O0tBRFRFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2FwcC9jb21wb25lbnRzL0xlYXJuaW5nUHJvZ3Jlc3MudHN4P2I2NTIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgbW90aW9uIH0gZnJvbSAnZnJhbWVyLW1vdGlvbic7XG5pbXBvcnQgeyBCb29rLCBUcm9waHksIFN0YXIsIEF3YXJkIH0gZnJvbSAnbHVjaWRlLXJlYWN0JztcbmltcG9ydCB7IHVzZXJTZXJ2aWNlLCBMZWFybmluZ1N0YXRzIH0gZnJvbSAnLi4vbGliL3NlcnZpY2VzL3VzZXIuc2VydmljZSc7XG5pbXBvcnQgeyB1c2VXYWxsZXQgfSBmcm9tICcuLi9wcm92aWRlcnMvV2FsbGV0UHJvdmlkZXInO1xuaW1wb3J0IENsaWVudE9ubHkgZnJvbSAnLi9DbGllbnRPbmx5JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTGVhcm5pbmdQcm9ncmVzcygpIHtcbiAgY29uc3QgeyBwdWJsaWNLZXkgfSA9IHVzZVdhbGxldCgpO1xuICBjb25zdCBbc3RhdHMsIHNldFN0YXRzXSA9IHVzZVN0YXRlPExlYXJuaW5nU3RhdHMgfCBudWxsPihudWxsKTtcbiAgY29uc3QgW2xvYWRpbmcsIHNldExvYWRpbmddID0gdXNlU3RhdGUodHJ1ZSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBhc3luYyBmdW5jdGlvbiBsb2FkU3RhdHMoKSB7XG4gICAgICBpZiAoIXB1YmxpY0tleSkgcmV0dXJuO1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcHJvZmlsZSA9IGF3YWl0IHVzZXJTZXJ2aWNlLmdldFByb2ZpbGUocHVibGljS2V5LnRvU3RyaW5nKCkpO1xuICAgICAgICBpZiAocHJvZmlsZSkge1xuICAgICAgICAgIHNldFN0YXRzKHByb2ZpbGUubGVhcm5pbmdTdGF0cyk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGxvYWRpbmcgbGVhcm5pbmcgc3RhdHM6JywgZXJyb3IpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgc2V0TG9hZGluZyhmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbG9hZFN0YXRzKCk7XG4gIH0sIFtwdWJsaWNLZXldKTtcblxuICBpZiAoIXB1YmxpY0tleSkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2wgaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHAtOCB0ZXh0LWNlbnRlclwiPlxuICAgICAgICA8Qm9vayBjbGFzc05hbWU9XCJ3LTEyIGgtMTIgbWItNCB0ZXh0LWdyYXktNDAwXCIgLz5cbiAgICAgICAgPGgzIGNsYXNzTmFtZT1cInRleHQteGwgZm9udC1zZW1pYm9sZCBtYi0yXCI+Q29ubmVjdCBZb3VyIFdhbGxldDwvaDM+XG4gICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtZ3JheS01MDBcIj5Db25uZWN0IHlvdXIgd2FsbGV0IHRvIHRyYWNrIHlvdXIgbGVhcm5pbmcgcHJvZ3Jlc3M8L3A+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgaWYgKGxvYWRpbmcpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciBwLThcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbmltYXRlLXNwaW4gcm91bmRlZC1mdWxsIGgtOCB3LTggYm9yZGVyLWItMiBib3JkZXItcHJpbWFyeVwiIC8+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgaWYgKCFzdGF0cykge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2wgaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHAtOCB0ZXh0LWNlbnRlclwiPlxuICAgICAgICA8Qm9vayBjbGFzc05hbWU9XCJ3LTEyIGgtMTIgbWItNCB0ZXh0LWdyYXktNDAwXCIgLz5cbiAgICAgICAgPGgzIGNsYXNzTmFtZT1cInRleHQteGwgZm9udC1zZW1pYm9sZCBtYi0yXCI+Tm8gUHJvZ3Jlc3MgWWV0PC9oMz5cbiAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1ncmF5LTUwMFwiPlN0YXJ0IGxlYXJuaW5nIHRvIHRyYWNrIHlvdXIgcHJvZ3Jlc3M8L3A+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgY29uc3QgcHJvZ3Jlc3NQZXJjZW50ID0gKHN0YXRzLmNvbXBsZXRlZExlc3NvbnMgLyBzdGF0cy50b3RhbExlc3NvbnMpICogMTAwO1xuICBjb25zdCB4cFByb2dyZXNzUGVyY2VudCA9IChzdGF0cy54cCAvIHN0YXRzLnhwVG9OZXh0TGV2ZWwpICogMTAwO1xuXG4gIHJldHVybiAoXG4gICAgPENsaWVudE9ubHk+XG4gICAgICA8bW90aW9uLmRpdlxuICAgICAgICBpbml0aWFsPXt7IG9wYWNpdHk6IDAsIHk6IDIwIH19XG4gICAgICAgIGFuaW1hdGU9e3sgb3BhY2l0eTogMSwgeTogMCB9fVxuICAgICAgICB0cmFuc2l0aW9uPXt7IGR1cmF0aW9uOiAwLjMgfX1cbiAgICAgICAgY2xhc3NOYW1lPVwidy1mdWxsXCJcbiAgICAgID5cbiAgICAgICAgey8qIExldmVsIGFuZCBYUCAqL31cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJiZy1jYXJkIHJvdW5kZWQtbGcgcC02IHNoYWRvdy1sZ1wiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1iZXR3ZWVuIG1iLTRcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIgc3BhY2UteC0zXCI+XG4gICAgICAgICAgICAgIDxUcm9waHkgY2xhc3NOYW1lPVwidy02IGgtNiB0ZXh0LXllbGxvdy01MDBcIiAvPlxuICAgICAgICAgICAgICA8aDMgY2xhc3NOYW1lPVwidGV4dC14bCBmb250LXNlbWlib2xkXCI+TGV2ZWwge3N0YXRzLmN1cnJlbnRMZXZlbH08L2gzPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LXNtIHRleHQtZ3JheS01MDBcIj57c3RhdHMueHB9IC8ge3N0YXRzLnhwVG9OZXh0TGV2ZWx9IFhQPC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidy1mdWxsIGgtMiBiZy1ncmF5LTIwMCByb3VuZGVkLWZ1bGwgb3ZlcmZsb3ctaGlkZGVuXCI+XG4gICAgICAgICAgICA8bW90aW9uLmRpdlxuICAgICAgICAgICAgICBpbml0aWFsPXt7IHdpZHRoOiAwIH19XG4gICAgICAgICAgICAgIGFuaW1hdGU9e3sgd2lkdGg6IGAke3hwUHJvZ3Jlc3NQZXJjZW50fSVgIH19XG4gICAgICAgICAgICAgIHRyYW5zaXRpb249e3sgZHVyYXRpb246IDEgfX1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiaC1mdWxsIGJnLXByaW1hcnlcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgey8qIExlc3NvbiBQcm9ncmVzcyAqL31cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJiZy1jYXJkIHJvdW5kZWQtbGcgcC02IHNoYWRvdy1sZ1wiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1iZXR3ZWVuIG1iLTRcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIgc3BhY2UteC0zXCI+XG4gICAgICAgICAgICAgIDxCb29rIGNsYXNzTmFtZT1cInctNiBoLTYgdGV4dC1ibHVlLTUwMFwiIC8+XG4gICAgICAgICAgICAgIDxoMyBjbGFzc05hbWU9XCJ0ZXh0LXhsIGZvbnQtc2VtaWJvbGRcIj5MZXNzb24gUHJvZ3Jlc3M8L2gzPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LXNtIHRleHQtZ3JheS01MDBcIj5cbiAgICAgICAgICAgICAge3N0YXRzLmNvbXBsZXRlZExlc3NvbnN9IC8ge3N0YXRzLnRvdGFsTGVzc29uc30gQ29tcGxldGVkXG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3LWZ1bGwgaC0yIGJnLWdyYXktMjAwIHJvdW5kZWQtZnVsbCBvdmVyZmxvdy1oaWRkZW5cIj5cbiAgICAgICAgICAgIDxtb3Rpb24uZGl2XG4gICAgICAgICAgICAgIGluaXRpYWw9e3sgd2lkdGg6IDAgfX1cbiAgICAgICAgICAgICAgYW5pbWF0ZT17eyB3aWR0aDogYCR7cHJvZ3Jlc3NQZXJjZW50fSVgIH19XG4gICAgICAgICAgICAgIHRyYW5zaXRpb249e3sgZHVyYXRpb246IDEgfX1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiaC1mdWxsIGJnLWJsdWUtNTAwXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIHsvKiBSZWNlbnQgQWNoaWV2ZW1lbnRzICovfVxuICAgICAgICB7c3RhdHMuYWNoaWV2ZW1lbnRzLmxlbmd0aCA+IDAgJiYgKFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYmctY2FyZCByb3VuZGVkLWxnIHAtNiBzaGFkb3ctbGdcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIgc3BhY2UteC0zIG1iLTRcIj5cbiAgICAgICAgICAgICAgPFN0YXIgY2xhc3NOYW1lPVwidy02IGgtNiB0ZXh0LXllbGxvdy01MDBcIiAvPlxuICAgICAgICAgICAgICA8aDMgY2xhc3NOYW1lPVwidGV4dC14bCBmb250LXNlbWlib2xkXCI+UmVjZW50IEFjaGlldmVtZW50czwvaDM+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3BhY2UteS00XCI+XG4gICAgICAgICAgICAgIHtzdGF0cy5hY2hpZXZlbWVudHMuc2xpY2UoLTMpLm1hcCgoYWNoaWV2ZW1lbnQsIGluZGV4KSA9PiAoXG4gICAgICAgICAgICAgICAgPG1vdGlvbi5kaXZcbiAgICAgICAgICAgICAgICAgIGtleT17aW5kZXh9XG4gICAgICAgICAgICAgICAgICBpbml0aWFsPXt7IG9wYWNpdHk6IDAsIHg6IC0yMCB9fVxuICAgICAgICAgICAgICAgICAgYW5pbWF0ZT17eyBvcGFjaXR5OiAxLCB4OiAwIH19XG4gICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uPXt7IGRlbGF5OiBpbmRleCAqIDAuMSB9fVxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIgc3BhY2UteC0zIHRleHQtc21cIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxBd2FyZCBjbGFzc05hbWU9XCJ3LTQgaC00IHRleHQteWVsbG93LTUwMFwiIC8+XG4gICAgICAgICAgICAgICAgICA8c3Bhbj57YWNoaWV2ZW1lbnR9PC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvbW90aW9uLmRpdj5cbiAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKX1cbiAgICAgIDwvbW90aW9uLmRpdj5cbiAgICA8L0NsaWVudE9ubHk+XG4gICk7XG59ICJdLCJuYW1lcyI6WyJ1c2VFZmZlY3QiLCJ1c2VTdGF0ZSIsIm1vdGlvbiIsIkJvb2siLCJUcm9waHkiLCJTdGFyIiwiQXdhcmQiLCJ1c2VyU2VydmljZSIsInVzZVdhbGxldCIsIkNsaWVudE9ubHkiLCJMZWFybmluZ1Byb2dyZXNzIiwicHVibGljS2V5Iiwic3RhdHMiLCJzZXRTdGF0cyIsImxvYWRpbmciLCJzZXRMb2FkaW5nIiwibG9hZFN0YXRzIiwicHJvZmlsZSIsImdldFByb2ZpbGUiLCJ0b1N0cmluZyIsImxlYXJuaW5nU3RhdHMiLCJlcnJvciIsImNvbnNvbGUiLCJkaXYiLCJjbGFzc05hbWUiLCJoMyIsInAiLCJwcm9ncmVzc1BlcmNlbnQiLCJjb21wbGV0ZWRMZXNzb25zIiwidG90YWxMZXNzb25zIiwieHBQcm9ncmVzc1BlcmNlbnQiLCJ4cCIsInhwVG9OZXh0TGV2ZWwiLCJpbml0aWFsIiwib3BhY2l0eSIsInkiLCJhbmltYXRlIiwidHJhbnNpdGlvbiIsImR1cmF0aW9uIiwiY3VycmVudExldmVsIiwic3BhbiIsIndpZHRoIiwiYWNoaWV2ZW1lbnRzIiwibGVuZ3RoIiwic2xpY2UiLCJtYXAiLCJhY2hpZXZlbWVudCIsImluZGV4IiwieCIsImRlbGF5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/components/LearningProgress.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/components/ProfileSettings.tsx":
/*!********************************************!*\
  !*** ./app/components/ProfileSettings.tsx ***!
  \********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ ProfileSettings; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var framer_motion__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! framer-motion */ \"(app-pages-browser)/./node_modules/framer-motion/dist/cjs/index.js\");\n/* harmony import */ var _barrel_optimize_names_Settings_Shield_Wallet_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! __barrel_optimize__?names=Settings,Shield,Wallet,Zap!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/settings.js\");\n/* harmony import */ var _barrel_optimize_names_Settings_Shield_Wallet_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! __barrel_optimize__?names=Settings,Shield,Wallet,Zap!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/wallet.js\");\n/* harmony import */ var _barrel_optimize_names_Settings_Shield_Wallet_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! __barrel_optimize__?names=Settings,Shield,Wallet,Zap!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/shield.js\");\n/* harmony import */ var _barrel_optimize_names_Settings_Shield_Wallet_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! __barrel_optimize__?names=Settings,Shield,Wallet,Zap!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/zap.js\");\n/* harmony import */ var _providers_WalletProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../providers/WalletProvider */ \"(app-pages-browser)/./app/providers/WalletProvider.tsx\");\n/* harmony import */ var _ui_button__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ui/button */ \"(app-pages-browser)/./app/components/ui/button.tsx\");\n/* harmony import */ var _ui_input__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ui/input */ \"(app-pages-browser)/./app/components/ui/input.tsx\");\n/* harmony import */ var _ui_textarea__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ui/textarea */ \"(app-pages-browser)/./app/components/ui/textarea.tsx\");\n/* harmony import */ var _ui_switch__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ui/switch */ \"(app-pages-browser)/./app/components/ui/switch.tsx\");\n/* harmony import */ var _ui_label__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ui/label */ \"(app-pages-browser)/./app/components/ui/label.tsx\");\n/* harmony import */ var _lib_services_user_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../lib/services/user.service */ \"(app-pages-browser)/./app/lib/services/user.service.ts\");\n/* harmony import */ var _ClientOnly__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ClientOnly */ \"(app-pages-browser)/./app/components/ClientOnly.tsx\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n\n\n\n\nfunction ProfileSettings() {\n    _s();\n    const { publicKey, connect, isConnected } = (0,_providers_WalletProvider__WEBPACK_IMPORTED_MODULE_2__.useWallet)();\n    const [profile, setProfile] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        async function loadProfile() {\n            if (!publicKey) return;\n            try {\n                const userProfile = await _lib_services_user_service__WEBPACK_IMPORTED_MODULE_8__.userService.getOrCreateProfile(publicKey.toString());\n                setProfile(userProfile);\n            } catch (error) {\n                console.error(\"Error loading profile:\", error);\n            } finally{\n                setLoading(false);\n            }\n        }\n        loadProfile();\n    }, [\n        publicKey\n    ]);\n    const handleUpdateProfile = async (updates)=>{\n        if (!publicKey || !profile) return;\n        try {\n            const updatedProfile = await _lib_services_user_service__WEBPACK_IMPORTED_MODULE_8__.userService.updateProfile(publicKey.toString(), updates);\n            setProfile(updatedProfile);\n        } catch (error) {\n            console.error(\"Error updating profile:\", error);\n        }\n    };\n    if (!publicKey) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ClientOnly__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_10__.motion.div, {\n                initial: {\n                    opacity: 0,\n                    y: 20\n                },\n                animate: {\n                    opacity: 1,\n                    y: 0\n                },\n                className: \"flex flex-col items-center justify-center min-h-[60vh] max-w-xl mx-auto text-center p-6\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Settings_Shield_Wallet_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n                        className: \"w-24 h-24 mb-8 text-primary animate-pulse\"\n                    }, void 0, false, {\n                        fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                        lineNumber: 54,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n                        className: \"text-4xl font-bold mb-4 bg-gradient-to-r from-primary to-primary/60 bg-clip-text text-transparent\",\n                        children: \"Connect Your Wallet\"\n                    }, void 0, false, {\n                        fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                        lineNumber: 55,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        className: \"text-lg text-gray-400 mb-8\",\n                        children: \"Connect your Phantom wallet to access your profile settings and start tracking your progress\"\n                    }, void 0, false, {\n                        fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                        lineNumber: 58,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"grid grid-cols-1 md:grid-cols-3 gap-6 w-full mb-8\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_10__.motion.div, {\n                                whileHover: {\n                                    scale: 1.05\n                                },\n                                className: \"bg-card p-6 rounded-lg shadow-lg\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Settings_Shield_Wallet_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {\n                                        className: \"w-8 h-8 mb-4 text-primary\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                                        lineNumber: 66,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                        className: \"text-lg font-semibold mb-2\",\n                                        children: \"Secure Profile\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                                        lineNumber: 67,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                        className: \"text-sm text-gray-400\",\n                                        children: \"Your profile is securely linked to your wallet\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                                        lineNumber: 68,\n                                        columnNumber: 15\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                                lineNumber: 62,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_10__.motion.div, {\n                                whileHover: {\n                                    scale: 1.05\n                                },\n                                className: \"bg-card p-6 rounded-lg shadow-lg\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Settings_Shield_Wallet_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_13__[\"default\"], {\n                                        className: \"w-8 h-8 mb-4 text-primary\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                                        lineNumber: 74,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                        className: \"text-lg font-semibold mb-2\",\n                                        children: \"Privacy Control\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                                        lineNumber: 75,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                        className: \"text-sm text-gray-400\",\n                                        children: \"Full control over your profile visibility\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                                        lineNumber: 76,\n                                        columnNumber: 15\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                                lineNumber: 70,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_10__.motion.div, {\n                                whileHover: {\n                                    scale: 1.05\n                                },\n                                className: \"bg-card p-6 rounded-lg shadow-lg\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Settings_Shield_Wallet_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n                                        className: \"w-8 h-8 mb-4 text-primary\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                                        lineNumber: 82,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                        className: \"text-lg font-semibold mb-2\",\n                                        children: \"Track Progress\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                                        lineNumber: 83,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                        className: \"text-sm text-gray-400\",\n                                        children: \"Monitor your learning and trading journey\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                                        lineNumber: 84,\n                                        columnNumber: 15\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                                lineNumber: 78,\n                                columnNumber: 13\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                        lineNumber: 61,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ui_button__WEBPACK_IMPORTED_MODULE_3__.Button, {\n                        size: \"lg\",\n                        onClick: ()=>connect(),\n                        className: \"bg-primary hover:bg-primary/90 text-white px-8\",\n                        children: \"Connect Wallet\"\n                    }, void 0, false, {\n                        fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                        lineNumber: 87,\n                        columnNumber: 11\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                lineNumber: 49,\n                columnNumber: 9\n            }, this)\n        }, void 0, false, {\n            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n            lineNumber: 48,\n            columnNumber: 7\n        }, this);\n    }\n    if (loading) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"flex items-center justify-center min-h-[60vh]\",\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"\n            }, void 0, false, {\n                fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                lineNumber: 102,\n                columnNumber: 9\n            }, this)\n        }, void 0, false, {\n            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n            lineNumber: 101,\n            columnNumber: 7\n        }, this);\n    }\n    if (!profile) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"flex flex-col items-center justify-center min-h-[60vh] text-center\",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Settings_Shield_Wallet_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n                    className: \"w-12 h-12 mb-4 text-gray-400\"\n                }, void 0, false, {\n                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                    lineNumber: 110,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                    className: \"text-xl font-semibold mb-2\",\n                    children: \"Profile Not Found\"\n                }, void 0, false, {\n                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                    lineNumber: 111,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                    className: \"text-gray-500\",\n                    children: \"There was an error loading your profile\"\n                }, void 0, false, {\n                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                    lineNumber: 112,\n                    columnNumber: 9\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n            lineNumber: 109,\n            columnNumber: 7\n        }, this);\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ClientOnly__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_10__.motion.div, {\n            initial: {\n                opacity: 0,\n                y: 20\n            },\n            animate: {\n                opacity: 1,\n                y: 0\n            },\n            transition: {\n                duration: 0.3\n            },\n            className: \"space-y-8 max-w-2xl mx-auto p-6\",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"bg-card rounded-lg p-6 shadow-lg space-y-6\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                            className: \"text-xl font-semibold mb-4\",\n                            children: \"Profile Information\"\n                        }, void 0, false, {\n                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                            lineNumber: 127,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"space-y-4\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"space-y-2\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ui_label__WEBPACK_IMPORTED_MODULE_7__.Label, {\n                                            htmlFor: \"username\",\n                                            children: \"Username\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                                            lineNumber: 130,\n                                            columnNumber: 15\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ui_input__WEBPACK_IMPORTED_MODULE_4__.Input, {\n                                            id: \"username\",\n                                            value: profile.username || \"\",\n                                            onChange: (e)=>handleUpdateProfile({\n                                                    username: e.target.value\n                                                }),\n                                            placeholder: \"Enter your username\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                                            lineNumber: 131,\n                                            columnNumber: 15\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                                    lineNumber: 129,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"space-y-2\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ui_label__WEBPACK_IMPORTED_MODULE_7__.Label, {\n                                            htmlFor: \"avatar\",\n                                            children: \"Avatar URL\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                                            lineNumber: 139,\n                                            columnNumber: 15\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ui_input__WEBPACK_IMPORTED_MODULE_4__.Input, {\n                                            id: \"avatar\",\n                                            value: profile.avatar || \"\",\n                                            onChange: (e)=>handleUpdateProfile({\n                                                    avatar: e.target.value\n                                                }),\n                                            placeholder: \"Enter avatar URL\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                                            lineNumber: 140,\n                                            columnNumber: 15\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                                    lineNumber: 138,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"space-y-2\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ui_label__WEBPACK_IMPORTED_MODULE_7__.Label, {\n                                            htmlFor: \"bio\",\n                                            children: \"Bio\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                                            lineNumber: 148,\n                                            columnNumber: 15\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ui_textarea__WEBPACK_IMPORTED_MODULE_5__.Textarea, {\n                                            id: \"bio\",\n                                            value: profile.bio || \"\",\n                                            onChange: (e)=>handleUpdateProfile({\n                                                    bio: e.target.value\n                                                }),\n                                            placeholder: \"Tell us about yourself\",\n                                            className: \"min-h-[100px]\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                                            lineNumber: 149,\n                                            columnNumber: 15\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                                    lineNumber: 147,\n                                    columnNumber: 13\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                            lineNumber: 128,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                    lineNumber: 126,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"bg-card rounded-lg p-6 shadow-lg space-y-6\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                            className: \"text-xl font-semibold mb-4\",\n                            children: \"Settings\"\n                        }, void 0, false, {\n                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                            lineNumber: 162,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"space-y-6\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"flex items-center justify-between\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            className: \"space-y-0.5\",\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ui_label__WEBPACK_IMPORTED_MODULE_7__.Label, {\n                                                    htmlFor: \"notifications\",\n                                                    children: \"Notifications\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                                                    lineNumber: 166,\n                                                    columnNumber: 17\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                                    className: \"text-sm text-gray-500\",\n                                                    children: \"Receive updates about your progress\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                                                    lineNumber: 167,\n                                                    columnNumber: 17\n                                                }, this)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                                            lineNumber: 165,\n                                            columnNumber: 15\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ui_switch__WEBPACK_IMPORTED_MODULE_6__.Switch, {\n                                            id: \"notifications\",\n                                            checked: profile.settings.notifications,\n                                            onCheckedChange: (checked)=>handleUpdateProfile({\n                                                    settings: {\n                                                        ...profile.settings,\n                                                        notifications: checked\n                                                    }\n                                                })\n                                        }, void 0, false, {\n                                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                                            lineNumber: 169,\n                                            columnNumber: 15\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                                    lineNumber: 164,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"flex items-center justify-between\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            className: \"space-y-0.5\",\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ui_label__WEBPACK_IMPORTED_MODULE_7__.Label, {\n                                                    htmlFor: \"theme\",\n                                                    children: \"Theme\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                                                    lineNumber: 181,\n                                                    columnNumber: 17\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                                    className: \"text-sm text-gray-500\",\n                                                    children: \"Choose your preferred theme\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                                                    lineNumber: 182,\n                                                    columnNumber: 17\n                                                }, this)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                                            lineNumber: 180,\n                                            columnNumber: 15\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            className: \"space-x-2\",\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ui_button__WEBPACK_IMPORTED_MODULE_3__.Button, {\n                                                    variant: profile.settings.theme === \"light\" ? \"default\" : \"outline\",\n                                                    size: \"sm\",\n                                                    onClick: ()=>handleUpdateProfile({\n                                                            settings: {\n                                                                ...profile.settings,\n                                                                theme: \"light\"\n                                                            }\n                                                        }),\n                                                    children: \"Light\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                                                    lineNumber: 185,\n                                                    columnNumber: 17\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ui_button__WEBPACK_IMPORTED_MODULE_3__.Button, {\n                                                    variant: profile.settings.theme === \"dark\" ? \"default\" : \"outline\",\n                                                    size: \"sm\",\n                                                    onClick: ()=>handleUpdateProfile({\n                                                            settings: {\n                                                                ...profile.settings,\n                                                                theme: \"dark\"\n                                                            }\n                                                        }),\n                                                    children: \"Dark\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                                                    lineNumber: 196,\n                                                    columnNumber: 17\n                                                }, this)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                                            lineNumber: 184,\n                                            columnNumber: 15\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                                    lineNumber: 179,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"flex items-center justify-between\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            className: \"space-y-0.5\",\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ui_label__WEBPACK_IMPORTED_MODULE_7__.Label, {\n                                                    htmlFor: \"language\",\n                                                    children: \"Language\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                                                    lineNumber: 211,\n                                                    columnNumber: 17\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                                    className: \"text-sm text-gray-500\",\n                                                    children: \"Select your preferred language\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                                                    lineNumber: 212,\n                                                    columnNumber: 17\n                                                }, this)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                                            lineNumber: 210,\n                                            columnNumber: 15\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"select\", {\n                                            id: \"language\",\n                                            value: profile.settings.language,\n                                            onChange: (e)=>handleUpdateProfile({\n                                                    settings: {\n                                                        ...profile.settings,\n                                                        language: e.target.value\n                                                    }\n                                                }),\n                                            className: \"bg-background border border-input rounded-md px-3 py-1\",\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                                    value: \"en\",\n                                                    children: \"English\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                                                    lineNumber: 224,\n                                                    columnNumber: 17\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                                    value: \"es\",\n                                                    children: \"Spanish\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                                                    lineNumber: 225,\n                                                    columnNumber: 17\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                                    value: \"fr\",\n                                                    children: \"French\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                                                    lineNumber: 226,\n                                                    columnNumber: 17\n                                                }, this)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                                            lineNumber: 214,\n                                            columnNumber: 15\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                                    lineNumber: 209,\n                                    columnNumber: 13\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                            lineNumber: 163,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n                    lineNumber: 161,\n                    columnNumber: 9\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n            lineNumber: 119,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ProfileSettings.tsx\",\n        lineNumber: 118,\n        columnNumber: 5\n    }, this);\n}\n_s(ProfileSettings, \"s2Vophcrmb8oe0sbV9SFtRkeRcY=\", false, function() {\n    return [\n        _providers_WalletProvider__WEBPACK_IMPORTED_MODULE_2__.useWallet\n    ];\n});\n_c = ProfileSettings;\nvar _c;\n$RefreshReg$(_c, \"ProfileSettings\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/components/ProfileSettings.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/components/TradingStats.tsx":
/*!*****************************************!*\
  !*** ./app/components/TradingStats.tsx ***!
  \*****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TradingStats: function() { return /* binding */ TradingStats; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var framer_motion__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! framer-motion */ \"(app-pages-browser)/./node_modules/framer-motion/dist/cjs/index.js\");\n/* harmony import */ var _barrel_optimize_names_Award_BarChart2_Star_TrendingUp_Trophy_lucide_react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=Award,BarChart2,Star,TrendingUp,Trophy!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/trending-up.js\");\n/* harmony import */ var _barrel_optimize_names_Award_BarChart2_Star_TrendingUp_Trophy_lucide_react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! __barrel_optimize__?names=Award,BarChart2,Star,TrendingUp,Trophy!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/trophy.js\");\n/* harmony import */ var _barrel_optimize_names_Award_BarChart2_Star_TrendingUp_Trophy_lucide_react__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! __barrel_optimize__?names=Award,BarChart2,Star,TrendingUp,Trophy!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/chart-no-axes-column.js\");\n/* harmony import */ var _barrel_optimize_names_Award_BarChart2_Star_TrendingUp_Trophy_lucide_react__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! __barrel_optimize__?names=Award,BarChart2,Star,TrendingUp,Trophy!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/star.js\");\n/* harmony import */ var _barrel_optimize_names_Award_BarChart2_Star_TrendingUp_Trophy_lucide_react__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! __barrel_optimize__?names=Award,BarChart2,Star,TrendingUp,Trophy!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/award.js\");\n/* harmony import */ var _lib_services_user_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/services/user.service */ \"(app-pages-browser)/./app/lib/services/user.service.ts\");\n/* harmony import */ var _providers_WalletProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../providers/WalletProvider */ \"(app-pages-browser)/./app/providers/WalletProvider.tsx\");\n/* harmony import */ var _ClientOnly__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ClientOnly */ \"(app-pages-browser)/./app/components/ClientOnly.tsx\");\n/* __next_internal_client_entry_do_not_use__ TradingStats auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\nfunction TradingStats() {\n    _s();\n    const { publicKey } = (0,_providers_WalletProvider__WEBPACK_IMPORTED_MODULE_3__.useWallet)();\n    const [stats, setStats] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        async function loadStats() {\n            if (!publicKey) return;\n            try {\n                const profile = await _lib_services_user_service__WEBPACK_IMPORTED_MODULE_2__.userService.getProfile(publicKey.toString());\n                if (profile) {\n                    setStats(profile.tradingStats);\n                }\n            } catch (error) {\n                console.error(\"Error loading trading stats:\", error);\n            } finally{\n                setLoading(false);\n            }\n        }\n        loadStats();\n    }, [\n        publicKey\n    ]);\n    if (!publicKey) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"flex flex-col items-center justify-center p-8 text-center\",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Award_BarChart2_Star_TrendingUp_Trophy_lucide_react__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                    className: \"w-12 h-12 mb-4 text-gray-400\"\n                }, void 0, false, {\n                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n                    lineNumber: 36,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                    className: \"text-xl font-semibold mb-2\",\n                    children: \"Connect Your Wallet\"\n                }, void 0, false, {\n                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n                    lineNumber: 37,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                    className: \"text-gray-500\",\n                    children: \"Connect your wallet to track your trading progress\"\n                }, void 0, false, {\n                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n                    lineNumber: 38,\n                    columnNumber: 9\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n            lineNumber: 35,\n            columnNumber: 7\n        }, this);\n    }\n    if (loading) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"flex items-center justify-center p-8\",\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"\n            }, void 0, false, {\n                fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n                lineNumber: 46,\n                columnNumber: 9\n            }, this)\n        }, void 0, false, {\n            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n            lineNumber: 45,\n            columnNumber: 7\n        }, this);\n    }\n    if (!stats) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"flex flex-col items-center justify-center p-8 text-center\",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Award_BarChart2_Star_TrendingUp_Trophy_lucide_react__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                    className: \"w-12 h-12 mb-4 text-gray-400\"\n                }, void 0, false, {\n                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n                    lineNumber: 54,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                    className: \"text-xl font-semibold mb-2\",\n                    children: \"No Trading Stats Yet\"\n                }, void 0, false, {\n                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n                    lineNumber: 55,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                    className: \"text-gray-500\",\n                    children: \"Start trading to track your progress\"\n                }, void 0, false, {\n                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n                    lineNumber: 56,\n                    columnNumber: 9\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n            lineNumber: 53,\n            columnNumber: 7\n        }, this);\n    }\n    const xpProgressPercent = stats.xp / stats.xpToNextLevel * 100;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ClientOnly__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_6__.motion.div, {\n            initial: {\n                opacity: 0,\n                y: 20\n            },\n            animate: {\n                opacity: 1,\n                y: 0\n            },\n            transition: {\n                duration: 0.3\n            },\n            className: \"w-full\",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"bg-card rounded-lg p-6 shadow-lg\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"flex items-center justify-between mb-4\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"flex items-center space-x-3\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Award_BarChart2_Star_TrendingUp_Trophy_lucide_react__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                                            className: \"w-6 h-6 text-yellow-500\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n                                            lineNumber: 75,\n                                            columnNumber: 15\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                            className: \"text-xl font-semibold\",\n                                            children: [\n                                                \"Trading Level \",\n                                                stats.level\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n                                            lineNumber: 76,\n                                            columnNumber: 15\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n                                    lineNumber: 74,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                    className: \"text-sm text-gray-500\",\n                                    children: [\n                                        stats.xp,\n                                        \" / \",\n                                        stats.xpToNextLevel,\n                                        \" XP\"\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n                                    lineNumber: 78,\n                                    columnNumber: 13\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n                            lineNumber: 73,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"w-full h-2 bg-gray-200 rounded-full overflow-hidden\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_6__.motion.div, {\n                                initial: {\n                                    width: 0\n                                },\n                                animate: {\n                                    width: \"\".concat(xpProgressPercent, \"%\")\n                                },\n                                transition: {\n                                    duration: 1\n                                },\n                                className: \"h-full bg-primary\"\n                            }, void 0, false, {\n                                fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n                                lineNumber: 81,\n                                columnNumber: 13\n                            }, this)\n                        }, void 0, false, {\n                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n                            lineNumber: 80,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n                    lineNumber: 72,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"bg-card rounded-lg p-6 shadow-lg\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"flex items-center space-x-3 mb-6\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Award_BarChart2_Star_TrendingUp_Trophy_lucide_react__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n                                    className: \"w-6 h-6 text-blue-500\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n                                    lineNumber: 93,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                    className: \"text-xl font-semibold\",\n                                    children: \"Trading Statistics\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n                                    lineNumber: 94,\n                                    columnNumber: 13\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n                            lineNumber: 92,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"grid grid-cols-2 gap-6\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                            className: \"text-sm text-gray-500 mb-1\",\n                                            children: \"Total Trades\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n                                            lineNumber: 98,\n                                            columnNumber: 15\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                            className: \"text-2xl font-semibold\",\n                                            children: stats.totalTrades\n                                        }, void 0, false, {\n                                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n                                            lineNumber: 99,\n                                            columnNumber: 15\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n                                    lineNumber: 97,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                            className: \"text-sm text-gray-500 mb-1\",\n                                            children: \"Win Rate\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n                                            lineNumber: 102,\n                                            columnNumber: 15\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                            className: \"text-2xl font-semibold\",\n                                            children: [\n                                                stats.winRate.toFixed(1),\n                                                \"%\"\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n                                            lineNumber: 103,\n                                            columnNumber: 15\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n                                    lineNumber: 101,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                            className: \"text-sm text-gray-500 mb-1\",\n                                            children: \"Successful Trades\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n                                            lineNumber: 106,\n                                            columnNumber: 15\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                            className: \"text-2xl font-semibold\",\n                                            children: stats.successfulTrades\n                                        }, void 0, false, {\n                                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n                                            lineNumber: 107,\n                                            columnNumber: 15\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n                                    lineNumber: 105,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                            className: \"text-sm text-gray-500 mb-1\",\n                                            children: \"Profit Factor\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n                                            lineNumber: 110,\n                                            columnNumber: 15\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                            className: \"text-2xl font-semibold\",\n                                            children: stats.profitFactor.toFixed(2)\n                                        }, void 0, false, {\n                                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n                                            lineNumber: 111,\n                                            columnNumber: 15\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n                                    lineNumber: 109,\n                                    columnNumber: 13\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n                            lineNumber: 96,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n                    lineNumber: 91,\n                    columnNumber: 9\n                }, this),\n                stats.achievements.length > 0 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"bg-card rounded-lg p-6 shadow-lg\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"flex items-center space-x-3 mb-4\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Award_BarChart2_Star_TrendingUp_Trophy_lucide_react__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n                                    className: \"w-6 h-6 text-yellow-500\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n                                    lineNumber: 120,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                    className: \"text-xl font-semibold\",\n                                    children: \"Recent Achievements\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n                                    lineNumber: 121,\n                                    columnNumber: 15\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n                            lineNumber: 119,\n                            columnNumber: 13\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"space-y-4\",\n                            children: stats.achievements.slice(-3).map((achievement, index)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_6__.motion.div, {\n                                    initial: {\n                                        opacity: 0,\n                                        x: -20\n                                    },\n                                    animate: {\n                                        opacity: 1,\n                                        x: 0\n                                    },\n                                    transition: {\n                                        delay: index * 0.1\n                                    },\n                                    className: \"flex items-center space-x-3 text-sm\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Award_BarChart2_Star_TrendingUp_Trophy_lucide_react__WEBPACK_IMPORTED_MODULE_10__[\"default\"], {\n                                            className: \"w-4 h-4 text-yellow-500\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n                                            lineNumber: 132,\n                                            columnNumber: 19\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                            children: achievement\n                                        }, void 0, false, {\n                                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n                                            lineNumber: 133,\n                                            columnNumber: 19\n                                        }, this)\n                                    ]\n                                }, index, true, {\n                                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n                                    lineNumber: 125,\n                                    columnNumber: 17\n                                }, this))\n                        }, void 0, false, {\n                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n                            lineNumber: 123,\n                            columnNumber: 13\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n                    lineNumber: 118,\n                    columnNumber: 11\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n            lineNumber: 65,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/TradingStats.tsx\",\n        lineNumber: 64,\n        columnNumber: 5\n    }, this);\n}\n_s(TradingStats, \"+CemVp+viaudExBtpWpHh0+g/UA=\", false, function() {\n    return [\n        _providers_WalletProvider__WEBPACK_IMPORTED_MODULE_3__.useWallet\n    ];\n});\n_c = TradingStats;\nvar _c;\n$RefreshReg$(_c, \"TradingStats\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/components/TradingStats.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/components/WalletConnect.tsx":
/*!******************************************!*\
  !*** ./app/components/WalletConnect.tsx ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ WalletConnect; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var framer_motion__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! framer-motion */ \"(app-pages-browser)/./node_modules/framer-motion/dist/cjs/index.js\");\n/* harmony import */ var _barrel_optimize_names_Shield_Wallet_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=Shield,Wallet,Zap!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/wallet.js\");\n/* harmony import */ var _barrel_optimize_names_Shield_Wallet_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=Shield,Wallet,Zap!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/shield.js\");\n/* harmony import */ var _barrel_optimize_names_Shield_Wallet_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! __barrel_optimize__?names=Shield,Wallet,Zap!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/zap.js\");\n/* harmony import */ var _ui_button__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ui/button */ \"(app-pages-browser)/./app/components/ui/button.tsx\");\n/* harmony import */ var _providers_WalletProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../providers/WalletProvider */ \"(app-pages-browser)/./app/providers/WalletProvider.tsx\");\n/* harmony import */ var _ClientOnly__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ClientOnly */ \"(app-pages-browser)/./app/components/ClientOnly.tsx\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\nconst features = [\n    {\n        icon: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Shield_Wallet_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n            className: \"w-8 h-8 text-[#F0B90B]\"\n        }, void 0, false, {\n            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/WalletConnect.tsx\",\n            lineNumber: 11,\n            columnNumber: 11\n        }, undefined),\n        title: \"Secure Profile\",\n        description: \"Your profile is securely linked to your wallet\"\n    },\n    {\n        icon: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Shield_Wallet_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n            className: \"w-8 h-8 text-[#F0B90B]\"\n        }, void 0, false, {\n            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/WalletConnect.tsx\",\n            lineNumber: 16,\n            columnNumber: 11\n        }, undefined),\n        title: \"Privacy Control\",\n        description: \"Full control over your profile visibility\"\n    },\n    {\n        icon: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Shield_Wallet_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n            className: \"w-8 h-8 text-[#F0B90B]\"\n        }, void 0, false, {\n            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/WalletConnect.tsx\",\n            lineNumber: 21,\n            columnNumber: 11\n        }, undefined),\n        title: \"Track Progress\",\n        description: \"Monitor your learning and trading journey\"\n    }\n];\nconst containerVariants = {\n    hidden: {\n        opacity: 0\n    },\n    show: {\n        opacity: 1,\n        transition: {\n            staggerChildren: 0.2\n        }\n    }\n};\nconst itemVariants = {\n    hidden: {\n        opacity: 0,\n        y: 20\n    },\n    show: {\n        opacity: 1,\n        y: 0,\n        transition: {\n            duration: 0.5,\n            ease: \"easeOut\"\n        }\n    }\n};\nconst glowVariants = {\n    initial: {\n        opacity: 0.5,\n        scale: 1\n    },\n    animate: {\n        opacity: [\n            0.5,\n            0.7,\n            0.5\n        ],\n        scale: [\n            1,\n            1.05,\n            1\n        ],\n        transition: {\n            duration: 2,\n            repeat: Infinity,\n            ease: \"easeInOut\"\n        }\n    }\n};\nfunction WalletConnect() {\n    _s();\n    const { connect, isConnecting, isConnected, isPhantomInstalled } = (0,_providers_WalletProvider__WEBPACK_IMPORTED_MODULE_2__.useWallet)();\n    const handleConnect = async ()=>{\n        if (!isPhantomInstalled) {\n            window.open(\"https://phantom.app/\", \"_blank\");\n            return;\n        }\n        if (!isConnected && !isConnecting) {\n            await connect();\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ClientOnly__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_7__.motion.div, {\n            initial: {\n                opacity: 0,\n                y: 20\n            },\n            animate: {\n                opacity: 1,\n                y: 0\n            },\n            transition: {\n                duration: 0.3\n            },\n            className: \"w-full\",\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"min-h-[600px] flex flex-col items-center justify-center p-8 relative\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_7__.motion.div, {\n                        className: \"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-[#F0B90B] rounded-full blur-[120px] opacity-5\",\n                        variants: glowVariants,\n                        initial: \"initial\",\n                        animate: \"animate\"\n                    }, void 0, false, {\n                        fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/WalletConnect.tsx\",\n                        lineNumber: 86,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_7__.motion.div, {\n                        className: \"relative z-10 max-w-2xl w-full text-center space-y-8\",\n                        variants: containerVariants,\n                        initial: \"hidden\",\n                        animate: \"show\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_7__.motion.div, {\n                                className: \"flex justify-center\",\n                                variants: itemVariants,\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"p-4 rounded-full bg-[#1E222D] border border-[#2A2D35]\",\n                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Shield_Wallet_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                                        className: \"w-12 h-12 text-[#F0B90B]\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/WalletConnect.tsx\",\n                                        lineNumber: 105,\n                                        columnNumber: 17\n                                    }, this)\n                                }, void 0, false, {\n                                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/WalletConnect.tsx\",\n                                    lineNumber: 104,\n                                    columnNumber: 15\n                                }, this)\n                            }, void 0, false, {\n                                fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/WalletConnect.tsx\",\n                                lineNumber: 100,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_7__.motion.div, {\n                                className: \"space-y-4\",\n                                variants: itemVariants,\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n                                        className: \"text-3xl font-bold tracking-tight\",\n                                        children: !isPhantomInstalled ? \"Install Phantom Wallet\" : \"Connect your Phantom wallet\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/WalletConnect.tsx\",\n                                        lineNumber: 114,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                        className: \"text-lg text-muted-foreground\",\n                                        children: !isPhantomInstalled ? \"Install Phantom wallet to access your profile and start trading\" : \"Access your profile settings and start tracking your progress\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/WalletConnect.tsx\",\n                                        lineNumber: 120,\n                                        columnNumber: 15\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/WalletConnect.tsx\",\n                                lineNumber: 110,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_7__.motion.div, {\n                                className: \"grid grid-cols-1 md:grid-cols-3 gap-6 mt-12\",\n                                variants: itemVariants,\n                                children: features.map((feature, index)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_7__.motion.div, {\n                                        className: \"p-6 rounded-xl bg-[#1E222D] border border-[#2A2D35] hover:border-[#F0B90B]/50 transition-colors\",\n                                        variants: itemVariants,\n                                        whileHover: {\n                                            scale: 1.02\n                                        },\n                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            className: \"flex flex-col items-center text-center space-y-3\",\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"p-3 rounded-full bg-[#131722]\",\n                                                    children: feature.icon\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/WalletConnect.tsx\",\n                                                    lineNumber: 141,\n                                                    columnNumber: 21\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                                    className: \"font-semibold\",\n                                                    children: feature.title\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/WalletConnect.tsx\",\n                                                    lineNumber: 144,\n                                                    columnNumber: 21\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                                    className: \"text-sm text-muted-foreground\",\n                                                    children: feature.description\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/WalletConnect.tsx\",\n                                                    lineNumber: 145,\n                                                    columnNumber: 21\n                                                }, this)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/WalletConnect.tsx\",\n                                            lineNumber: 140,\n                                            columnNumber: 19\n                                        }, this)\n                                    }, feature.title, false, {\n                                        fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/WalletConnect.tsx\",\n                                        lineNumber: 134,\n                                        columnNumber: 17\n                                    }, this))\n                            }, void 0, false, {\n                                fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/WalletConnect.tsx\",\n                                lineNumber: 129,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_7__.motion.div, {\n                                variants: itemVariants,\n                                className: \"mt-12\",\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ui_button__WEBPACK_IMPORTED_MODULE_1__.Button, {\n                                    size: \"lg\",\n                                    onClick: handleConnect,\n                                    disabled: isConnecting,\n                                    className: \"bg-[#F0B90B] hover:bg-[#F0B90B]/90 text-black font-semibold px-8 py-6 h-auto text-lg rounded-xl\",\n                                    children: isConnecting ? \"Connecting...\" : !isPhantomInstalled ? \"Install Phantom\" : \"Connect Wallet\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/WalletConnect.tsx\",\n                                    lineNumber: 158,\n                                    columnNumber: 15\n                                }, this)\n                            }, void 0, false, {\n                                fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/WalletConnect.tsx\",\n                                lineNumber: 154,\n                                columnNumber: 13\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/WalletConnect.tsx\",\n                        lineNumber: 93,\n                        columnNumber: 11\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/WalletConnect.tsx\",\n                lineNumber: 84,\n                columnNumber: 9\n            }, this)\n        }, void 0, false, {\n            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/WalletConnect.tsx\",\n            lineNumber: 78,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/WalletConnect.tsx\",\n        lineNumber: 77,\n        columnNumber: 5\n    }, this);\n}\n_s(WalletConnect, \"u3Yfq0r3SELeJfRktY9ld1hi8tU=\", false, function() {\n    return [\n        _providers_WalletProvider__WEBPACK_IMPORTED_MODULE_2__.useWallet\n    ];\n});\n_c = WalletConnect;\nvar _c;\n$RefreshReg$(_c, \"WalletConnect\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9jb21wb25lbnRzL1dhbGxldENvbm5lY3QudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBRXNDO0FBQ1k7QUFDZDtBQUNtQjtBQUNsQjtBQUVyQyxNQUFNTyxXQUFXO0lBQ2Y7UUFDRUMsb0JBQU0sOERBQUNQLDZGQUFNQTtZQUFDUSxXQUFVOzs7Ozs7UUFDeEJDLE9BQU87UUFDUEMsYUFBYTtJQUNmO0lBQ0E7UUFDRUgsb0JBQU0sOERBQUNOLDZGQUFNQTtZQUFDTyxXQUFVOzs7Ozs7UUFDeEJDLE9BQU87UUFDUEMsYUFBYTtJQUNmO0lBQ0E7UUFDRUgsb0JBQU0sOERBQUNMLDZGQUFHQTtZQUFDTSxXQUFVOzs7Ozs7UUFDckJDLE9BQU87UUFDUEMsYUFBYTtJQUNmO0NBQ0Q7QUFFRCxNQUFNQyxvQkFBb0I7SUFDeEJDLFFBQVE7UUFBRUMsU0FBUztJQUFFO0lBQ3JCQyxNQUFNO1FBQ0pELFNBQVM7UUFDVEUsWUFBWTtZQUNWQyxpQkFBaUI7UUFDbkI7SUFDRjtBQUNGO0FBRUEsTUFBTUMsZUFBZTtJQUNuQkwsUUFBUTtRQUFFQyxTQUFTO1FBQUdLLEdBQUc7SUFBRztJQUM1QkosTUFBTTtRQUNKRCxTQUFTO1FBQ1RLLEdBQUc7UUFDSEgsWUFBWTtZQUNWSSxVQUFVO1lBQ1ZDLE1BQU07UUFDUjtJQUNGO0FBQ0Y7QUFFQSxNQUFNQyxlQUFlO0lBQ25CQyxTQUFTO1FBQUVULFNBQVM7UUFBS1UsT0FBTztJQUFFO0lBQ2xDQyxTQUFTO1FBQ1BYLFNBQVM7WUFBQztZQUFLO1lBQUs7U0FBSTtRQUN4QlUsT0FBTztZQUFDO1lBQUc7WUFBTTtTQUFFO1FBQ25CUixZQUFZO1lBQ1ZJLFVBQVU7WUFDVk0sUUFBUUM7WUFDUk4sTUFBTTtRQUNSO0lBQ0Y7QUFDRjtBQUVlLFNBQVNPOztJQUN0QixNQUFNLEVBQUVDLE9BQU8sRUFBRUMsWUFBWSxFQUFFQyxXQUFXLEVBQUVDLGtCQUFrQixFQUFFLEdBQUczQixvRUFBU0E7SUFFNUUsTUFBTTRCLGdCQUFnQjtRQUNwQixJQUFJLENBQUNELG9CQUFvQjtZQUN2QkUsT0FBT0MsSUFBSSxDQUFDLHdCQUF3QjtZQUNwQztRQUNGO1FBRUEsSUFBSSxDQUFDSixlQUFlLENBQUNELGNBQWM7WUFDakMsTUFBTUQ7UUFDUjtJQUNGO0lBRUEscUJBQ0UsOERBQUN2QixtREFBVUE7a0JBQ1QsNEVBQUNOLGlEQUFNQSxDQUFDb0MsR0FBRztZQUNUYixTQUFTO2dCQUFFVCxTQUFTO2dCQUFHSyxHQUFHO1lBQUc7WUFDN0JNLFNBQVM7Z0JBQUVYLFNBQVM7Z0JBQUdLLEdBQUc7WUFBRTtZQUM1QkgsWUFBWTtnQkFBRUksVUFBVTtZQUFJO1lBQzVCWCxXQUFVO3NCQUVWLDRFQUFDMkI7Z0JBQUkzQixXQUFVOztrQ0FFYiw4REFBQ1QsaURBQU1BLENBQUNvQyxHQUFHO3dCQUNUM0IsV0FBVTt3QkFDVjRCLFVBQVVmO3dCQUNWQyxTQUFRO3dCQUNSRSxTQUFROzs7Ozs7a0NBR1YsOERBQUN6QixpREFBTUEsQ0FBQ29DLEdBQUc7d0JBQ1QzQixXQUFVO3dCQUNWNEIsVUFBVXpCO3dCQUNWVyxTQUFRO3dCQUNSRSxTQUFROzswQ0FHUiw4REFBQ3pCLGlEQUFNQSxDQUFDb0MsR0FBRztnQ0FDVDNCLFdBQVU7Z0NBQ1Y0QixVQUFVbkI7MENBRVYsNEVBQUNrQjtvQ0FBSTNCLFdBQVU7OENBQ2IsNEVBQUNSLDZGQUFNQTt3Q0FBQ1EsV0FBVTs7Ozs7Ozs7Ozs7Ozs7OzswQ0FLdEIsOERBQUNULGlEQUFNQSxDQUFDb0MsR0FBRztnQ0FDVDNCLFdBQVU7Z0NBQ1Y0QixVQUFVbkI7O2tEQUVWLDhEQUFDb0I7d0NBQUc3QixXQUFVO2tEQUNYLENBQUN1QixxQkFDRSwyQkFDQTs7Ozs7O2tEQUdOLDhEQUFDTzt3Q0FBRTlCLFdBQVU7a0RBQ1YsQ0FBQ3VCLHFCQUNFLG9FQUNBOzs7Ozs7Ozs7Ozs7MENBTVIsOERBQUNoQyxpREFBTUEsQ0FBQ29DLEdBQUc7Z0NBQ1QzQixXQUFVO2dDQUNWNEIsVUFBVW5COzBDQUVUWCxTQUFTaUMsR0FBRyxDQUFDLENBQUNDLFNBQVNDLHNCQUN0Qiw4REFBQzFDLGlEQUFNQSxDQUFDb0MsR0FBRzt3Q0FFVDNCLFdBQVU7d0NBQ1Y0QixVQUFVbkI7d0NBQ1Z5QixZQUFZOzRDQUFFbkIsT0FBTzt3Q0FBSztrREFFMUIsNEVBQUNZOzRDQUFJM0IsV0FBVTs7OERBQ2IsOERBQUMyQjtvREFBSTNCLFdBQVU7OERBQ1pnQyxRQUFRakMsSUFBSTs7Ozs7OzhEQUVmLDhEQUFDb0M7b0RBQUduQyxXQUFVOzhEQUFpQmdDLFFBQVEvQixLQUFLOzs7Ozs7OERBQzVDLDhEQUFDNkI7b0RBQUU5QixXQUFVOzhEQUNWZ0MsUUFBUTlCLFdBQVc7Ozs7Ozs7Ozs7Ozt1Q0FYbkI4QixRQUFRL0IsS0FBSzs7Ozs7Ozs7OzswQ0FtQnhCLDhEQUFDVixpREFBTUEsQ0FBQ29DLEdBQUc7Z0NBQ1RDLFVBQVVuQjtnQ0FDVlQsV0FBVTswQ0FFViw0RUFBQ0wsOENBQU1BO29DQUNMeUMsTUFBSztvQ0FDTEMsU0FBU2I7b0NBQ1RjLFVBQVVqQjtvQ0FDVnJCLFdBQVU7OENBRVRxQixlQUFlLGtCQUNkLENBQUNFLHFCQUFxQixvQkFDdEI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVNsQjtHQWpId0JKOztRQUM2Q3ZCLGdFQUFTQTs7O0tBRHREdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vYXBwL2NvbXBvbmVudHMvV2FsbGV0Q29ubmVjdC50c3g/MTUzYiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCdcblxuaW1wb3J0IHsgbW90aW9uIH0gZnJvbSAnZnJhbWVyLW1vdGlvbidcbmltcG9ydCB7IFdhbGxldCwgU2hpZWxkLCBaYXAgfSBmcm9tICdsdWNpZGUtcmVhY3QnXG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tICcuL3VpL2J1dHRvbidcbmltcG9ydCB7IHVzZVdhbGxldCB9IGZyb20gJy4uL3Byb3ZpZGVycy9XYWxsZXRQcm92aWRlcidcbmltcG9ydCBDbGllbnRPbmx5IGZyb20gJy4vQ2xpZW50T25seSdcblxuY29uc3QgZmVhdHVyZXMgPSBbXG4gIHtcbiAgICBpY29uOiA8V2FsbGV0IGNsYXNzTmFtZT1cInctOCBoLTggdGV4dC1bI0YwQjkwQl1cIiAvPixcbiAgICB0aXRsZTogXCJTZWN1cmUgUHJvZmlsZVwiLFxuICAgIGRlc2NyaXB0aW9uOiBcIllvdXIgcHJvZmlsZSBpcyBzZWN1cmVseSBsaW5rZWQgdG8geW91ciB3YWxsZXRcIlxuICB9LFxuICB7XG4gICAgaWNvbjogPFNoaWVsZCBjbGFzc05hbWU9XCJ3LTggaC04IHRleHQtWyNGMEI5MEJdXCIgLz4sXG4gICAgdGl0bGU6IFwiUHJpdmFjeSBDb250cm9sXCIsXG4gICAgZGVzY3JpcHRpb246IFwiRnVsbCBjb250cm9sIG92ZXIgeW91ciBwcm9maWxlIHZpc2liaWxpdHlcIlxuICB9LFxuICB7XG4gICAgaWNvbjogPFphcCBjbGFzc05hbWU9XCJ3LTggaC04IHRleHQtWyNGMEI5MEJdXCIgLz4sXG4gICAgdGl0bGU6IFwiVHJhY2sgUHJvZ3Jlc3NcIixcbiAgICBkZXNjcmlwdGlvbjogXCJNb25pdG9yIHlvdXIgbGVhcm5pbmcgYW5kIHRyYWRpbmcgam91cm5leVwiXG4gIH1cbl1cblxuY29uc3QgY29udGFpbmVyVmFyaWFudHMgPSB7XG4gIGhpZGRlbjogeyBvcGFjaXR5OiAwIH0sXG4gIHNob3c6IHtcbiAgICBvcGFjaXR5OiAxLFxuICAgIHRyYW5zaXRpb246IHtcbiAgICAgIHN0YWdnZXJDaGlsZHJlbjogMC4yXG4gICAgfVxuICB9XG59XG5cbmNvbnN0IGl0ZW1WYXJpYW50cyA9IHtcbiAgaGlkZGVuOiB7IG9wYWNpdHk6IDAsIHk6IDIwIH0sXG4gIHNob3c6IHsgXG4gICAgb3BhY2l0eTogMSwgXG4gICAgeTogMCxcbiAgICB0cmFuc2l0aW9uOiB7XG4gICAgICBkdXJhdGlvbjogMC41LFxuICAgICAgZWFzZTogXCJlYXNlT3V0XCJcbiAgICB9XG4gIH1cbn1cblxuY29uc3QgZ2xvd1ZhcmlhbnRzID0ge1xuICBpbml0aWFsOiB7IG9wYWNpdHk6IDAuNSwgc2NhbGU6IDEgfSxcbiAgYW5pbWF0ZToge1xuICAgIG9wYWNpdHk6IFswLjUsIDAuNywgMC41XSxcbiAgICBzY2FsZTogWzEsIDEuMDUsIDFdLFxuICAgIHRyYW5zaXRpb246IHtcbiAgICAgIGR1cmF0aW9uOiAyLFxuICAgICAgcmVwZWF0OiBJbmZpbml0eSxcbiAgICAgIGVhc2U6IFwiZWFzZUluT3V0XCJcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gV2FsbGV0Q29ubmVjdCgpIHtcbiAgY29uc3QgeyBjb25uZWN0LCBpc0Nvbm5lY3RpbmcsIGlzQ29ubmVjdGVkLCBpc1BoYW50b21JbnN0YWxsZWQgfSA9IHVzZVdhbGxldCgpO1xuXG4gIGNvbnN0IGhhbmRsZUNvbm5lY3QgPSBhc3luYyAoKSA9PiB7XG4gICAgaWYgKCFpc1BoYW50b21JbnN0YWxsZWQpIHtcbiAgICAgIHdpbmRvdy5vcGVuKCdodHRwczovL3BoYW50b20uYXBwLycsICdfYmxhbmsnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgaWYgKCFpc0Nvbm5lY3RlZCAmJiAhaXNDb25uZWN0aW5nKSB7XG4gICAgICBhd2FpdCBjb25uZWN0KCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPENsaWVudE9ubHk+XG4gICAgICA8bW90aW9uLmRpdlxuICAgICAgICBpbml0aWFsPXt7IG9wYWNpdHk6IDAsIHk6IDIwIH19XG4gICAgICAgIGFuaW1hdGU9e3sgb3BhY2l0eTogMSwgeTogMCB9fVxuICAgICAgICB0cmFuc2l0aW9uPXt7IGR1cmF0aW9uOiAwLjMgfX1cbiAgICAgICAgY2xhc3NOYW1lPVwidy1mdWxsXCJcbiAgICAgID5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtaW4taC1bNjAwcHhdIGZsZXggZmxleC1jb2wgaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHAtOCByZWxhdGl2ZVwiPlxuICAgICAgICAgIHsvKiBCYWNrZ3JvdW5kIGdsb3cgZWZmZWN0ICovfVxuICAgICAgICAgIDxtb3Rpb24uZGl2XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJhYnNvbHV0ZSB0b3AtMS8yIGxlZnQtMS8yIC10cmFuc2xhdGUteC0xLzIgLXRyYW5zbGF0ZS15LTEvMiB3LTk2IGgtOTYgYmctWyNGMEI5MEJdIHJvdW5kZWQtZnVsbCBibHVyLVsxMjBweF0gb3BhY2l0eS01XCJcbiAgICAgICAgICAgIHZhcmlhbnRzPXtnbG93VmFyaWFudHN9XG4gICAgICAgICAgICBpbml0aWFsPVwiaW5pdGlhbFwiXG4gICAgICAgICAgICBhbmltYXRlPVwiYW5pbWF0ZVwiXG4gICAgICAgICAgLz5cblxuICAgICAgICAgIDxtb3Rpb24uZGl2XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJyZWxhdGl2ZSB6LTEwIG1heC13LTJ4bCB3LWZ1bGwgdGV4dC1jZW50ZXIgc3BhY2UteS04XCJcbiAgICAgICAgICAgIHZhcmlhbnRzPXtjb250YWluZXJWYXJpYW50c31cbiAgICAgICAgICAgIGluaXRpYWw9XCJoaWRkZW5cIlxuICAgICAgICAgICAgYW5pbWF0ZT1cInNob3dcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIHsvKiBJY29uICovfVxuICAgICAgICAgICAgPG1vdGlvbi5kaXYgXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZsZXgganVzdGlmeS1jZW50ZXJcIlxuICAgICAgICAgICAgICB2YXJpYW50cz17aXRlbVZhcmlhbnRzfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInAtNCByb3VuZGVkLWZ1bGwgYmctWyMxRTIyMkRdIGJvcmRlciBib3JkZXItWyMyQTJEMzVdXCI+XG4gICAgICAgICAgICAgICAgPFdhbGxldCBjbGFzc05hbWU9XCJ3LTEyIGgtMTIgdGV4dC1bI0YwQjkwQl1cIiAvPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvbW90aW9uLmRpdj5cblxuICAgICAgICAgICAgey8qIFRpdGxlIGFuZCBkZXNjcmlwdGlvbiAqL31cbiAgICAgICAgICAgIDxtb3Rpb24uZGl2IFxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzcGFjZS15LTRcIlxuICAgICAgICAgICAgICB2YXJpYW50cz17aXRlbVZhcmlhbnRzfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8aDEgY2xhc3NOYW1lPVwidGV4dC0zeGwgZm9udC1ib2xkIHRyYWNraW5nLXRpZ2h0XCI+XG4gICAgICAgICAgICAgICAgeyFpc1BoYW50b21JbnN0YWxsZWQgXG4gICAgICAgICAgICAgICAgICA/ICdJbnN0YWxsIFBoYW50b20gV2FsbGV0J1xuICAgICAgICAgICAgICAgICAgOiAnQ29ubmVjdCB5b3VyIFBoYW50b20gd2FsbGV0J1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgPC9oMT5cbiAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1sZyB0ZXh0LW11dGVkLWZvcmVncm91bmRcIj5cbiAgICAgICAgICAgICAgICB7IWlzUGhhbnRvbUluc3RhbGxlZFxuICAgICAgICAgICAgICAgICAgPyAnSW5zdGFsbCBQaGFudG9tIHdhbGxldCB0byBhY2Nlc3MgeW91ciBwcm9maWxlIGFuZCBzdGFydCB0cmFkaW5nJ1xuICAgICAgICAgICAgICAgICAgOiAnQWNjZXNzIHlvdXIgcHJvZmlsZSBzZXR0aW5ncyBhbmQgc3RhcnQgdHJhY2tpbmcgeW91ciBwcm9ncmVzcydcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgIDwvbW90aW9uLmRpdj5cblxuICAgICAgICAgICAgey8qIEZlYXR1cmVzIGdyaWQgKi99XG4gICAgICAgICAgICA8bW90aW9uLmRpdiBcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZ3JpZCBncmlkLWNvbHMtMSBtZDpncmlkLWNvbHMtMyBnYXAtNiBtdC0xMlwiXG4gICAgICAgICAgICAgIHZhcmlhbnRzPXtpdGVtVmFyaWFudHN9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtmZWF0dXJlcy5tYXAoKGZlYXR1cmUsIGluZGV4KSA9PiAoXG4gICAgICAgICAgICAgICAgPG1vdGlvbi5kaXZcbiAgICAgICAgICAgICAgICAgIGtleT17ZmVhdHVyZS50aXRsZX1cbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInAtNiByb3VuZGVkLXhsIGJnLVsjMUUyMjJEXSBib3JkZXIgYm9yZGVyLVsjMkEyRDM1XSBob3Zlcjpib3JkZXItWyNGMEI5MEJdLzUwIHRyYW5zaXRpb24tY29sb3JzXCJcbiAgICAgICAgICAgICAgICAgIHZhcmlhbnRzPXtpdGVtVmFyaWFudHN9XG4gICAgICAgICAgICAgICAgICB3aGlsZUhvdmVyPXt7IHNjYWxlOiAxLjAyIH19XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGZsZXgtY29sIGl0ZW1zLWNlbnRlciB0ZXh0LWNlbnRlciBzcGFjZS15LTNcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwLTMgcm91bmRlZC1mdWxsIGJnLVsjMTMxNzIyXVwiPlxuICAgICAgICAgICAgICAgICAgICAgIHtmZWF0dXJlLmljb259XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3NOYW1lPVwiZm9udC1zZW1pYm9sZFwiPntmZWF0dXJlLnRpdGxlfTwvaDM+XG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtc20gdGV4dC1tdXRlZC1mb3JlZ3JvdW5kXCI+XG4gICAgICAgICAgICAgICAgICAgICAge2ZlYXR1cmUuZGVzY3JpcHRpb259XG4gICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvbW90aW9uLmRpdj5cbiAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICA8L21vdGlvbi5kaXY+XG5cbiAgICAgICAgICAgIHsvKiBDb25uZWN0IGJ1dHRvbiAqL31cbiAgICAgICAgICAgIDxtb3Rpb24uZGl2XG4gICAgICAgICAgICAgIHZhcmlhbnRzPXtpdGVtVmFyaWFudHN9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm10LTEyXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgIHNpemU9XCJsZ1wiXG4gICAgICAgICAgICAgICAgb25DbGljaz17aGFuZGxlQ29ubmVjdH1cbiAgICAgICAgICAgICAgICBkaXNhYmxlZD17aXNDb25uZWN0aW5nfVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJnLVsjRjBCOTBCXSBob3ZlcjpiZy1bI0YwQjkwQl0vOTAgdGV4dC1ibGFjayBmb250LXNlbWlib2xkIHB4LTggcHktNiBoLWF1dG8gdGV4dC1sZyByb3VuZGVkLXhsXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtpc0Nvbm5lY3RpbmcgPyAnQ29ubmVjdGluZy4uLicgOiBcbiAgICAgICAgICAgICAgICAgICFpc1BoYW50b21JbnN0YWxsZWQgPyAnSW5zdGFsbCBQaGFudG9tJyA6IFxuICAgICAgICAgICAgICAgICAgJ0Nvbm5lY3QgV2FsbGV0J1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICA8L21vdGlvbi5kaXY+XG4gICAgICAgICAgPC9tb3Rpb24uZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvbW90aW9uLmRpdj5cbiAgICA8L0NsaWVudE9ubHk+XG4gIClcbn0gIl0sIm5hbWVzIjpbIm1vdGlvbiIsIldhbGxldCIsIlNoaWVsZCIsIlphcCIsIkJ1dHRvbiIsInVzZVdhbGxldCIsIkNsaWVudE9ubHkiLCJmZWF0dXJlcyIsImljb24iLCJjbGFzc05hbWUiLCJ0aXRsZSIsImRlc2NyaXB0aW9uIiwiY29udGFpbmVyVmFyaWFudHMiLCJoaWRkZW4iLCJvcGFjaXR5Iiwic2hvdyIsInRyYW5zaXRpb24iLCJzdGFnZ2VyQ2hpbGRyZW4iLCJpdGVtVmFyaWFudHMiLCJ5IiwiZHVyYXRpb24iLCJlYXNlIiwiZ2xvd1ZhcmlhbnRzIiwiaW5pdGlhbCIsInNjYWxlIiwiYW5pbWF0ZSIsInJlcGVhdCIsIkluZmluaXR5IiwiV2FsbGV0Q29ubmVjdCIsImNvbm5lY3QiLCJpc0Nvbm5lY3RpbmciLCJpc0Nvbm5lY3RlZCIsImlzUGhhbnRvbUluc3RhbGxlZCIsImhhbmRsZUNvbm5lY3QiLCJ3aW5kb3ciLCJvcGVuIiwiZGl2IiwidmFyaWFudHMiLCJoMSIsInAiLCJtYXAiLCJmZWF0dXJlIiwiaW5kZXgiLCJ3aGlsZUhvdmVyIiwiaDMiLCJzaXplIiwib25DbGljayIsImRpc2FibGVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/components/WalletConnect.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/components/ui/button.tsx":
/*!**************************************!*\
  !*** ./app/components/ui/button.tsx ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Button: function() { return /* binding */ Button; },\n/* harmony export */   buttonVariants: function() { return /* binding */ buttonVariants; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @radix-ui/react-slot */ \"(app-pages-browser)/./node_modules/@radix-ui/react-slot/dist/index.mjs\");\n/* harmony import */ var class_variance_authority__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! class-variance-authority */ \"(app-pages-browser)/./node_modules/class-variance-authority/dist/index.mjs\");\n/* harmony import */ var _lib_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/utils */ \"(app-pages-browser)/./app/lib/utils.ts\");\n\n\n\n\n\nconst buttonVariants = (0,class_variance_authority__WEBPACK_IMPORTED_MODULE_2__.cva)(\"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\", {\n    variants: {\n        variant: {\n            default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n            destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n            outline: \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n            secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n            ghost: \"hover:bg-accent hover:text-accent-foreground\",\n            link: \"text-primary underline-offset-4 hover:underline\"\n        },\n        size: {\n            default: \"h-10 px-4 py-2\",\n            sm: \"h-9 rounded-md px-3\",\n            lg: \"h-11 rounded-md px-8\",\n            icon: \"h-10 w-10\"\n        }\n    },\n    defaultVariants: {\n        variant: \"default\",\n        size: \"default\"\n    }\n});\nconst Button = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c = (param, ref)=>{\n    let { className, variant, size, asChild = false, ...props } = param;\n    const Comp = asChild ? _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_4__.Slot : \"button\";\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Comp, {\n        className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_3__.cn)(buttonVariants({\n            variant,\n            size,\n            className\n        })),\n        ref: ref,\n        ...props\n    }, void 0, false, {\n        fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ui/button.tsx\",\n        lineNumber: 45,\n        columnNumber: 7\n    }, undefined);\n});\n_c1 = Button;\nButton.displayName = \"Button\";\n\nvar _c, _c1;\n$RefreshReg$(_c, \"Button$React.forwardRef\");\n$RefreshReg$(_c1, \"Button\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9jb21wb25lbnRzL3VpL2J1dHRvbi50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQThCO0FBQ2E7QUFDc0I7QUFDN0I7QUFFcEMsTUFBTUksaUJBQWlCRiw2REFBR0EsQ0FDeEIsMFJBQ0E7SUFDRUcsVUFBVTtRQUNSQyxTQUFTO1lBQ1BDLFNBQVM7WUFDVEMsYUFDRTtZQUNGQyxTQUNFO1lBQ0ZDLFdBQ0U7WUFDRkMsT0FBTztZQUNQQyxNQUFNO1FBQ1I7UUFDQUMsTUFBTTtZQUNKTixTQUFTO1lBQ1RPLElBQUk7WUFDSkMsSUFBSTtZQUNKQyxNQUFNO1FBQ1I7SUFDRjtJQUNBQyxpQkFBaUI7UUFDZlgsU0FBUztRQUNUTyxNQUFNO0lBQ1I7QUFDRjtBQVNGLE1BQU1LLHVCQUFTbEIsNkNBQWdCLE1BQzdCLFFBQTBEb0I7UUFBekQsRUFBRUMsU0FBUyxFQUFFZixPQUFPLEVBQUVPLElBQUksRUFBRVMsVUFBVSxLQUFLLEVBQUUsR0FBR0MsT0FBTztJQUN0RCxNQUFNQyxPQUFPRixVQUFVckIsc0RBQUlBLEdBQUc7SUFDOUIscUJBQ0UsOERBQUN1QjtRQUNDSCxXQUFXbEIsOENBQUVBLENBQUNDLGVBQWU7WUFBRUU7WUFBU087WUFBTVE7UUFBVTtRQUN4REQsS0FBS0E7UUFDSixHQUFHRyxLQUFLOzs7Ozs7QUFHZjs7QUFFRkwsT0FBT08sV0FBVyxHQUFHO0FBRVkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vYXBwL2NvbXBvbmVudHMvdWkvYnV0dG9uLnRzeD84ZTU1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyBTbG90IH0gZnJvbSBcIkByYWRpeC11aS9yZWFjdC1zbG90XCJcbmltcG9ydCB7IGN2YSwgdHlwZSBWYXJpYW50UHJvcHMgfSBmcm9tIFwiY2xhc3MtdmFyaWFuY2UtYXV0aG9yaXR5XCJcbmltcG9ydCB7IGNuIH0gZnJvbSBcIi4uLy4uL2xpYi91dGlsc1wiXG5cbmNvbnN0IGJ1dHRvblZhcmlhbnRzID0gY3ZhKFxuICBcImlubGluZS1mbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciB3aGl0ZXNwYWNlLW5vd3JhcCByb3VuZGVkLW1kIHRleHQtc20gZm9udC1tZWRpdW0gcmluZy1vZmZzZXQtYmFja2dyb3VuZCB0cmFuc2l0aW9uLWNvbG9ycyBmb2N1cy12aXNpYmxlOm91dGxpbmUtbm9uZSBmb2N1cy12aXNpYmxlOnJpbmctMiBmb2N1cy12aXNpYmxlOnJpbmctcmluZyBmb2N1cy12aXNpYmxlOnJpbmctb2Zmc2V0LTIgZGlzYWJsZWQ6cG9pbnRlci1ldmVudHMtbm9uZSBkaXNhYmxlZDpvcGFjaXR5LTUwXCIsXG4gIHtcbiAgICB2YXJpYW50czoge1xuICAgICAgdmFyaWFudDoge1xuICAgICAgICBkZWZhdWx0OiBcImJnLXByaW1hcnkgdGV4dC1wcmltYXJ5LWZvcmVncm91bmQgaG92ZXI6YmctcHJpbWFyeS85MFwiLFxuICAgICAgICBkZXN0cnVjdGl2ZTpcbiAgICAgICAgICBcImJnLWRlc3RydWN0aXZlIHRleHQtZGVzdHJ1Y3RpdmUtZm9yZWdyb3VuZCBob3ZlcjpiZy1kZXN0cnVjdGl2ZS85MFwiLFxuICAgICAgICBvdXRsaW5lOlxuICAgICAgICAgIFwiYm9yZGVyIGJvcmRlci1pbnB1dCBiZy1iYWNrZ3JvdW5kIGhvdmVyOmJnLWFjY2VudCBob3Zlcjp0ZXh0LWFjY2VudC1mb3JlZ3JvdW5kXCIsXG4gICAgICAgIHNlY29uZGFyeTpcbiAgICAgICAgICBcImJnLXNlY29uZGFyeSB0ZXh0LXNlY29uZGFyeS1mb3JlZ3JvdW5kIGhvdmVyOmJnLXNlY29uZGFyeS84MFwiLFxuICAgICAgICBnaG9zdDogXCJob3ZlcjpiZy1hY2NlbnQgaG92ZXI6dGV4dC1hY2NlbnQtZm9yZWdyb3VuZFwiLFxuICAgICAgICBsaW5rOiBcInRleHQtcHJpbWFyeSB1bmRlcmxpbmUtb2Zmc2V0LTQgaG92ZXI6dW5kZXJsaW5lXCIsXG4gICAgICB9LFxuICAgICAgc2l6ZToge1xuICAgICAgICBkZWZhdWx0OiBcImgtMTAgcHgtNCBweS0yXCIsXG4gICAgICAgIHNtOiBcImgtOSByb3VuZGVkLW1kIHB4LTNcIixcbiAgICAgICAgbGc6IFwiaC0xMSByb3VuZGVkLW1kIHB4LThcIixcbiAgICAgICAgaWNvbjogXCJoLTEwIHctMTBcIixcbiAgICAgIH0sXG4gICAgfSxcbiAgICBkZWZhdWx0VmFyaWFudHM6IHtcbiAgICAgIHZhcmlhbnQ6IFwiZGVmYXVsdFwiLFxuICAgICAgc2l6ZTogXCJkZWZhdWx0XCIsXG4gICAgfSxcbiAgfVxuKVxuXG5leHBvcnQgaW50ZXJmYWNlIEJ1dHRvblByb3BzXG4gIGV4dGVuZHMgUmVhY3QuQnV0dG9uSFRNTEF0dHJpYnV0ZXM8SFRNTEJ1dHRvbkVsZW1lbnQ+LFxuICAgIFZhcmlhbnRQcm9wczx0eXBlb2YgYnV0dG9uVmFyaWFudHM+IHtcbiAgYXNDaGlsZD86IGJvb2xlYW5cbn1cblxuY29uc3QgQnV0dG9uID0gUmVhY3QuZm9yd2FyZFJlZjxIVE1MQnV0dG9uRWxlbWVudCwgQnV0dG9uUHJvcHM+KFxuICAoeyBjbGFzc05hbWUsIHZhcmlhbnQsIHNpemUsIGFzQ2hpbGQgPSBmYWxzZSwgLi4ucHJvcHMgfSwgcmVmKSA9PiB7XG4gICAgY29uc3QgQ29tcCA9IGFzQ2hpbGQgPyBTbG90IDogXCJidXR0b25cIlxuICAgIHJldHVybiAoXG4gICAgICA8Q29tcFxuICAgICAgICBjbGFzc05hbWU9e2NuKGJ1dHRvblZhcmlhbnRzKHsgdmFyaWFudCwgc2l6ZSwgY2xhc3NOYW1lIH0pKX1cbiAgICAgICAgcmVmPXtyZWZ9XG4gICAgICAgIHsuLi5wcm9wc31cbiAgICAgIC8+XG4gICAgKVxuICB9XG4pXG5CdXR0b24uZGlzcGxheU5hbWUgPSBcIkJ1dHRvblwiXG5cbmV4cG9ydCB7IEJ1dHRvbiwgYnV0dG9uVmFyaWFudHMgfSAiXSwibmFtZXMiOlsiUmVhY3QiLCJTbG90IiwiY3ZhIiwiY24iLCJidXR0b25WYXJpYW50cyIsInZhcmlhbnRzIiwidmFyaWFudCIsImRlZmF1bHQiLCJkZXN0cnVjdGl2ZSIsIm91dGxpbmUiLCJzZWNvbmRhcnkiLCJnaG9zdCIsImxpbmsiLCJzaXplIiwic20iLCJsZyIsImljb24iLCJkZWZhdWx0VmFyaWFudHMiLCJCdXR0b24iLCJmb3J3YXJkUmVmIiwicmVmIiwiY2xhc3NOYW1lIiwiYXNDaGlsZCIsInByb3BzIiwiQ29tcCIsImRpc3BsYXlOYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/components/ui/button.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/components/ui/input.tsx":
/*!*************************************!*\
  !*** ./app/components/ui/input.tsx ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Input: function() { return /* binding */ Input; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _app_lib_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/app/lib/utils */ \"(app-pages-browser)/./app/lib/utils.ts\");\n\n\n\nconst Input = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c = (param, ref)=>{\n    let { className, type, ...props } = param;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n        type: type,\n        className: (0,_app_lib_utils__WEBPACK_IMPORTED_MODULE_2__.cn)(\"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\", className),\n        ref: ref,\n        ...props\n    }, void 0, false, {\n        fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ui/input.tsx\",\n        lineNumber: 10,\n        columnNumber: 7\n    }, undefined);\n});\n_c1 = Input;\nInput.displayName = \"Input\";\n\nvar _c, _c1;\n$RefreshReg$(_c, \"Input$React.forwardRef\");\n$RefreshReg$(_c1, \"Input\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9jb21wb25lbnRzL3VpL2lucHV0LnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBOEI7QUFDTTtBQUtwQyxNQUFNRSxzQkFBUUYsNkNBQWdCLE1BQzVCLFFBQWdDSTtRQUEvQixFQUFFQyxTQUFTLEVBQUVDLElBQUksRUFBRSxHQUFHQyxPQUFPO0lBQzVCLHFCQUNFLDhEQUFDQztRQUNDRixNQUFNQTtRQUNORCxXQUFXSixrREFBRUEsQ0FDWCxnV0FDQUk7UUFFRkQsS0FBS0E7UUFDSixHQUFHRyxLQUFLOzs7Ozs7QUFHZjs7QUFFRkwsTUFBTU8sV0FBVyxHQUFHO0FBRUoiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vYXBwL2NvbXBvbmVudHMvdWkvaW5wdXQudHN4P2UzODgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCJcbmltcG9ydCB7IGNuIH0gZnJvbSBcIkAvYXBwL2xpYi91dGlsc1wiXG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5wdXRQcm9wc1xuICBleHRlbmRzIFJlYWN0LklucHV0SFRNTEF0dHJpYnV0ZXM8SFRNTElucHV0RWxlbWVudD4ge31cblxuY29uc3QgSW5wdXQgPSBSZWFjdC5mb3J3YXJkUmVmPEhUTUxJbnB1dEVsZW1lbnQsIElucHV0UHJvcHM+KFxuICAoeyBjbGFzc05hbWUsIHR5cGUsIC4uLnByb3BzIH0sIHJlZikgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICA8aW5wdXRcbiAgICAgICAgdHlwZT17dHlwZX1cbiAgICAgICAgY2xhc3NOYW1lPXtjbihcbiAgICAgICAgICBcImZsZXggaC0xMCB3LWZ1bGwgcm91bmRlZC1tZCBib3JkZXIgYm9yZGVyLWlucHV0IGJnLWJhY2tncm91bmQgcHgtMyBweS0yIHRleHQtc20gcmluZy1vZmZzZXQtYmFja2dyb3VuZCBmaWxlOmJvcmRlci0wIGZpbGU6YmctdHJhbnNwYXJlbnQgZmlsZTp0ZXh0LXNtIGZpbGU6Zm9udC1tZWRpdW0gcGxhY2Vob2xkZXI6dGV4dC1tdXRlZC1mb3JlZ3JvdW5kIGZvY3VzLXZpc2libGU6b3V0bGluZS1ub25lIGZvY3VzLXZpc2libGU6cmluZy0yIGZvY3VzLXZpc2libGU6cmluZy1yaW5nIGZvY3VzLXZpc2libGU6cmluZy1vZmZzZXQtMiBkaXNhYmxlZDpjdXJzb3Itbm90LWFsbG93ZWQgZGlzYWJsZWQ6b3BhY2l0eS01MFwiLFxuICAgICAgICAgIGNsYXNzTmFtZVxuICAgICAgICApfVxuICAgICAgICByZWY9e3JlZn1cbiAgICAgICAgey4uLnByb3BzfVxuICAgICAgLz5cbiAgICApXG4gIH1cbilcbklucHV0LmRpc3BsYXlOYW1lID0gXCJJbnB1dFwiXG5cbmV4cG9ydCB7IElucHV0IH0gIl0sIm5hbWVzIjpbIlJlYWN0IiwiY24iLCJJbnB1dCIsImZvcndhcmRSZWYiLCJyZWYiLCJjbGFzc05hbWUiLCJ0eXBlIiwicHJvcHMiLCJpbnB1dCIsImRpc3BsYXlOYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/components/ui/input.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/components/ui/label.tsx":
/*!*************************************!*\
  !*** ./app/components/ui/label.tsx ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Label: function() { return /* binding */ Label; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _radix_ui_react_label__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @radix-ui/react-label */ \"(app-pages-browser)/./node_modules/@radix-ui/react-label/dist/index.mjs\");\n/* harmony import */ var _lib_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/utils */ \"(app-pages-browser)/./app/lib/utils.ts\");\n\n\n\n\nconst Label = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c = (param, ref)=>{\n    let { className, ...props } = param;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_radix_ui_react_label__WEBPACK_IMPORTED_MODULE_3__.Root, {\n        ref: ref,\n        className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_2__.cn)(\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\", className),\n        ...props\n    }, void 0, false, {\n        fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ui/label.tsx\",\n        lineNumber: 9,\n        columnNumber: 3\n    }, undefined);\n});\n_c1 = Label;\nLabel.displayName = _radix_ui_react_label__WEBPACK_IMPORTED_MODULE_3__.Root.displayName;\n\nvar _c, _c1;\n$RefreshReg$(_c, \"Label$React.forwardRef\");\n$RefreshReg$(_c1, \"Label\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9jb21wb25lbnRzL3VpL2xhYmVsLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQThCO0FBQ3lCO0FBQ25CO0FBRXBDLE1BQU1HLHNCQUFRSCw2Q0FBZ0IsTUFHNUIsUUFBMEJLO1FBQXpCLEVBQUVDLFNBQVMsRUFBRSxHQUFHQyxPQUFPO3lCQUN4Qiw4REFBQ04sdURBQW1CO1FBQ2xCSSxLQUFLQTtRQUNMQyxXQUFXSiw4Q0FBRUEsQ0FDWCw4RkFDQUk7UUFFRCxHQUFHQyxLQUFLOzs7Ozs7OztBQUdiSixNQUFNTSxXQUFXLEdBQUdSLHVEQUFtQixDQUFDUSxXQUFXO0FBRW5DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2FwcC9jb21wb25lbnRzL3VpL2xhYmVsLnRzeD9kNDIzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgKiBhcyBMYWJlbFByaW1pdGl2ZSBmcm9tIFwiQHJhZGl4LXVpL3JlYWN0LWxhYmVsXCJcbmltcG9ydCB7IGNuIH0gZnJvbSBcIi4uLy4uL2xpYi91dGlsc1wiXG5cbmNvbnN0IExhYmVsID0gUmVhY3QuZm9yd2FyZFJlZjxcbiAgUmVhY3QuRWxlbWVudFJlZjx0eXBlb2YgTGFiZWxQcmltaXRpdmUuUm9vdD4sXG4gIFJlYWN0LkNvbXBvbmVudFByb3BzV2l0aG91dFJlZjx0eXBlb2YgTGFiZWxQcmltaXRpdmUuUm9vdD5cbj4oKHsgY2xhc3NOYW1lLCAuLi5wcm9wcyB9LCByZWYpID0+IChcbiAgPExhYmVsUHJpbWl0aXZlLlJvb3RcbiAgICByZWY9e3JlZn1cbiAgICBjbGFzc05hbWU9e2NuKFxuICAgICAgXCJ0ZXh0LXNtIGZvbnQtbWVkaXVtIGxlYWRpbmctbm9uZSBwZWVyLWRpc2FibGVkOmN1cnNvci1ub3QtYWxsb3dlZCBwZWVyLWRpc2FibGVkOm9wYWNpdHktNzBcIixcbiAgICAgIGNsYXNzTmFtZVxuICAgICl9XG4gICAgey4uLnByb3BzfVxuICAvPlxuKSlcbkxhYmVsLmRpc3BsYXlOYW1lID0gTGFiZWxQcmltaXRpdmUuUm9vdC5kaXNwbGF5TmFtZVxuXG5leHBvcnQgeyBMYWJlbCB9ICJdLCJuYW1lcyI6WyJSZWFjdCIsIkxhYmVsUHJpbWl0aXZlIiwiY24iLCJMYWJlbCIsImZvcndhcmRSZWYiLCJyZWYiLCJjbGFzc05hbWUiLCJwcm9wcyIsIlJvb3QiLCJkaXNwbGF5TmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/components/ui/label.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/components/ui/switch.tsx":
/*!**************************************!*\
  !*** ./app/components/ui/switch.tsx ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Switch: function() { return /* binding */ Switch; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _radix_ui_react_switch__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @radix-ui/react-switch */ \"(app-pages-browser)/./node_modules/@radix-ui/react-switch/dist/index.mjs\");\n/* harmony import */ var _app_lib_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/app/lib/utils */ \"(app-pages-browser)/./app/lib/utils.ts\");\n/* __next_internal_client_entry_do_not_use__ Switch auto */ \n\n\n\nconst Switch = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c = (param, ref)=>{\n    let { className, ...props } = param;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_radix_ui_react_switch__WEBPACK_IMPORTED_MODULE_3__.Root, {\n        className: (0,_app_lib_utils__WEBPACK_IMPORTED_MODULE_2__.cn)(\"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-[#F0B90B] data-[state=unchecked]:bg-[#2A2D35]\", className),\n        ...props,\n        ref: ref,\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_radix_ui_react_switch__WEBPACK_IMPORTED_MODULE_3__.Thumb, {\n            className: (0,_app_lib_utils__WEBPACK_IMPORTED_MODULE_2__.cn)(\"pointer-events-none block h-5 w-5 rounded-full bg-white shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\")\n        }, void 0, false, {\n            fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ui/switch.tsx\",\n            lineNumber: 20,\n            columnNumber: 5\n        }, undefined)\n    }, void 0, false, {\n        fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ui/switch.tsx\",\n        lineNumber: 12,\n        columnNumber: 3\n    }, undefined);\n});\n_c1 = Switch;\nSwitch.displayName = _radix_ui_react_switch__WEBPACK_IMPORTED_MODULE_3__.Root.displayName;\n\nvar _c, _c1;\n$RefreshReg$(_c, \"Switch$React.forwardRef\");\n$RefreshReg$(_c1, \"Switch\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9jb21wb25lbnRzL3VpL3N3aXRjaC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUU4QjtBQUM0QjtBQUV0QjtBQUVwQyxNQUFNRyx1QkFBU0gsNkNBQWdCLE1BRzdCLFFBQTBCSztRQUF6QixFQUFFQyxTQUFTLEVBQUUsR0FBR0MsT0FBTzt5QkFDeEIsOERBQUNOLHdEQUFxQjtRQUNwQkssV0FBV0osa0RBQUVBLENBQ1gsNFhBQ0FJO1FBRUQsR0FBR0MsS0FBSztRQUNURixLQUFLQTtrQkFFTCw0RUFBQ0oseURBQXNCO1lBQ3JCSyxXQUFXSixrREFBRUEsQ0FDWDs7Ozs7Ozs7Ozs7OztBQUtSQyxPQUFPTyxXQUFXLEdBQUdULHdEQUFxQixDQUFDUyxXQUFXO0FBRXJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2FwcC9jb21wb25lbnRzL3VpL3N3aXRjaC50c3g/NGFmNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIlxuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIlxuaW1wb3J0ICogYXMgU3dpdGNoUHJpbWl0aXZlcyBmcm9tIFwiQHJhZGl4LXVpL3JlYWN0LXN3aXRjaFwiXG5cbmltcG9ydCB7IGNuIH0gZnJvbSBcIkAvYXBwL2xpYi91dGlsc1wiXG5cbmNvbnN0IFN3aXRjaCA9IFJlYWN0LmZvcndhcmRSZWY8XG4gIFJlYWN0LkVsZW1lbnRSZWY8dHlwZW9mIFN3aXRjaFByaW1pdGl2ZXMuUm9vdD4sXG4gIFJlYWN0LkNvbXBvbmVudFByb3BzV2l0aG91dFJlZjx0eXBlb2YgU3dpdGNoUHJpbWl0aXZlcy5Sb290PlxuPigoeyBjbGFzc05hbWUsIC4uLnByb3BzIH0sIHJlZikgPT4gKFxuICA8U3dpdGNoUHJpbWl0aXZlcy5Sb290XG4gICAgY2xhc3NOYW1lPXtjbihcbiAgICAgIFwicGVlciBpbmxpbmUtZmxleCBoLTYgdy0xMSBzaHJpbmstMCBjdXJzb3ItcG9pbnRlciBpdGVtcy1jZW50ZXIgcm91bmRlZC1mdWxsIGJvcmRlci0yIGJvcmRlci10cmFuc3BhcmVudCB0cmFuc2l0aW9uLWNvbG9ycyBmb2N1cy12aXNpYmxlOm91dGxpbmUtbm9uZSBmb2N1cy12aXNpYmxlOnJpbmctMiBmb2N1cy12aXNpYmxlOnJpbmctcmluZyBmb2N1cy12aXNpYmxlOnJpbmctb2Zmc2V0LTIgZm9jdXMtdmlzaWJsZTpyaW5nLW9mZnNldC1iYWNrZ3JvdW5kIGRpc2FibGVkOmN1cnNvci1ub3QtYWxsb3dlZCBkaXNhYmxlZDpvcGFjaXR5LTUwIGRhdGEtW3N0YXRlPWNoZWNrZWRdOmJnLVsjRjBCOTBCXSBkYXRhLVtzdGF0ZT11bmNoZWNrZWRdOmJnLVsjMkEyRDM1XVwiLFxuICAgICAgY2xhc3NOYW1lXG4gICAgKX1cbiAgICB7Li4ucHJvcHN9XG4gICAgcmVmPXtyZWZ9XG4gID5cbiAgICA8U3dpdGNoUHJpbWl0aXZlcy5UaHVtYlxuICAgICAgY2xhc3NOYW1lPXtjbihcbiAgICAgICAgXCJwb2ludGVyLWV2ZW50cy1ub25lIGJsb2NrIGgtNSB3LTUgcm91bmRlZC1mdWxsIGJnLXdoaXRlIHNoYWRvdy1sZyByaW5nLTAgdHJhbnNpdGlvbi10cmFuc2Zvcm0gZGF0YS1bc3RhdGU9Y2hlY2tlZF06dHJhbnNsYXRlLXgtNSBkYXRhLVtzdGF0ZT11bmNoZWNrZWRdOnRyYW5zbGF0ZS14LTBcIlxuICAgICAgKX1cbiAgICAvPlxuICA8L1N3aXRjaFByaW1pdGl2ZXMuUm9vdD5cbikpXG5Td2l0Y2guZGlzcGxheU5hbWUgPSBTd2l0Y2hQcmltaXRpdmVzLlJvb3QuZGlzcGxheU5hbWVcblxuZXhwb3J0IHsgU3dpdGNoIH0gIl0sIm5hbWVzIjpbIlJlYWN0IiwiU3dpdGNoUHJpbWl0aXZlcyIsImNuIiwiU3dpdGNoIiwiZm9yd2FyZFJlZiIsInJlZiIsImNsYXNzTmFtZSIsInByb3BzIiwiUm9vdCIsIlRodW1iIiwiZGlzcGxheU5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/components/ui/switch.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/components/ui/textarea.tsx":
/*!****************************************!*\
  !*** ./app/components/ui/textarea.tsx ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Textarea: function() { return /* binding */ Textarea; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/utils */ \"(app-pages-browser)/./app/lib/utils.ts\");\n/* __next_internal_client_entry_do_not_use__ Textarea auto */ \n\n\nconst Textarea = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c = (param, ref)=>{\n    let { className, ...props } = param;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"textarea\", {\n        className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_2__.cn)(\"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\", className),\n        ref: ref,\n        ...props\n    }, void 0, false, {\n        fileName: \"/Users/jamison/Desktop/neural-octopus/app/components/ui/textarea.tsx\",\n        lineNumber: 12,\n        columnNumber: 7\n    }, undefined);\n});\n_c1 = Textarea;\nTextarea.displayName = \"Textarea\";\n\nvar _c, _c1;\n$RefreshReg$(_c, \"Textarea$React.forwardRef\");\n$RefreshReg$(_c1, \"Textarea\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9jb21wb25lbnRzL3VpL3RleHRhcmVhLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFFOEI7QUFDTTtBQUtwQyxNQUFNRSx5QkFBV0YsNkNBQWdCLE1BQy9CLFFBQTBCSTtRQUF6QixFQUFFQyxTQUFTLEVBQUUsR0FBR0MsT0FBTztJQUN0QixxQkFDRSw4REFBQ0M7UUFDQ0YsV0FBV0osOENBQUVBLENBQ1gsd1NBQ0FJO1FBRUZELEtBQUtBO1FBQ0osR0FBR0UsS0FBSzs7Ozs7O0FBR2Y7O0FBRUZKLFNBQVNNLFdBQVcsR0FBRztBQUVKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2FwcC9jb21wb25lbnRzL3VpL3RleHRhcmVhLnRzeD9kZDZjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiXG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyBjbiB9IGZyb20gXCIuLi8uLi9saWIvdXRpbHNcIlxuXG5leHBvcnQgaW50ZXJmYWNlIFRleHRhcmVhUHJvcHNcbiAgZXh0ZW5kcyBSZWFjdC5UZXh0YXJlYUhUTUxBdHRyaWJ1dGVzPEhUTUxUZXh0QXJlYUVsZW1lbnQ+IHt9XG5cbmNvbnN0IFRleHRhcmVhID0gUmVhY3QuZm9yd2FyZFJlZjxIVE1MVGV4dEFyZWFFbGVtZW50LCBUZXh0YXJlYVByb3BzPihcbiAgKHsgY2xhc3NOYW1lLCAuLi5wcm9wcyB9LCByZWYpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgPHRleHRhcmVhXG4gICAgICAgIGNsYXNzTmFtZT17Y24oXG4gICAgICAgICAgXCJmbGV4IG1pbi1oLVs4MHB4XSB3LWZ1bGwgcm91bmRlZC1tZCBib3JkZXIgYm9yZGVyLWlucHV0IGJnLWJhY2tncm91bmQgcHgtMyBweS0yIHRleHQtc20gcmluZy1vZmZzZXQtYmFja2dyb3VuZCBwbGFjZWhvbGRlcjp0ZXh0LW11dGVkLWZvcmVncm91bmQgZm9jdXMtdmlzaWJsZTpvdXRsaW5lLW5vbmUgZm9jdXMtdmlzaWJsZTpyaW5nLTIgZm9jdXMtdmlzaWJsZTpyaW5nLXJpbmcgZm9jdXMtdmlzaWJsZTpyaW5nLW9mZnNldC0yIGRpc2FibGVkOmN1cnNvci1ub3QtYWxsb3dlZCBkaXNhYmxlZDpvcGFjaXR5LTUwXCIsXG4gICAgICAgICAgY2xhc3NOYW1lXG4gICAgICAgICl9XG4gICAgICAgIHJlZj17cmVmfVxuICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAvPlxuICAgIClcbiAgfVxuKVxuVGV4dGFyZWEuZGlzcGxheU5hbWUgPSBcIlRleHRhcmVhXCJcblxuZXhwb3J0IHsgVGV4dGFyZWEgfSAiXSwibmFtZXMiOlsiUmVhY3QiLCJjbiIsIlRleHRhcmVhIiwiZm9yd2FyZFJlZiIsInJlZiIsImNsYXNzTmFtZSIsInByb3BzIiwidGV4dGFyZWEiLCJkaXNwbGF5TmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/components/ui/textarea.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/lib/services/user.service.ts":
/*!******************************************!*\
  !*** ./app/lib/services/user.service.ts ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   userService: function() { return /* binding */ userService; }\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"(app-pages-browser)/./node_modules/@prisma/client/index-browser.js\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n\nclass UserService {\n    async getOrCreateProfile(walletAddress) {\n        try {\n            const existingProfile = await this.getProfile(walletAddress);\n            if (existingProfile) {\n                return existingProfile;\n            }\n            // Create new profile if none exists\n            const newProfile = {\n                walletAddress,\n                settings: {\n                    notifications: true,\n                    theme: \"dark\",\n                    language: \"en\"\n                },\n                learningStats: this.defaultLearningStats,\n                tradingStats: this.defaultTradingStats\n            };\n            return await this.createProfile(newProfile);\n        } catch (error) {\n            console.error(\"Error in getOrCreateProfile:\", error);\n            throw error;\n        }\n    }\n    async getProfile(walletAddress) {\n        try {\n            const user = await this.prisma.user.findUnique({\n                where: {\n                    walletAddress\n                }\n            });\n            if (!user) return null;\n            return {\n                id: user.id,\n                walletAddress: user.walletAddress,\n                username: user.username || undefined,\n                avatar: user.avatar || undefined,\n                bio: user.bio || undefined,\n                settings: user.settings,\n                learningStats: user.learningStats,\n                tradingStats: user.tradingStats,\n                createdAt: user.createdAt,\n                updatedAt: user.updatedAt\n            };\n        } catch (error) {\n            console.error(\"Error getting profile:\", error);\n            return null;\n        }\n    }\n    async createProfile(profile) {\n        try {\n            const user = await this.prisma.user.create({\n                data: {\n                    walletAddress: profile.walletAddress,\n                    username: profile.username,\n                    avatar: profile.avatar,\n                    bio: profile.bio,\n                    settings: profile.settings || {\n                        notifications: true,\n                        theme: \"dark\",\n                        language: \"en\"\n                    },\n                    learningStats: profile.learningStats || this.defaultLearningStats,\n                    tradingStats: profile.tradingStats || this.defaultTradingStats\n                }\n            });\n            return {\n                id: user.id,\n                walletAddress: user.walletAddress,\n                username: user.username || undefined,\n                avatar: user.avatar || undefined,\n                bio: user.bio || undefined,\n                settings: user.settings,\n                learningStats: user.learningStats,\n                tradingStats: user.tradingStats,\n                createdAt: user.createdAt,\n                updatedAt: user.updatedAt\n            };\n        } catch (error) {\n            console.error(\"Error creating profile:\", error);\n            throw error;\n        }\n    }\n    async updateProfile(walletAddress, updates) {\n        try {\n            const user = await this.prisma.user.update({\n                where: {\n                    walletAddress\n                },\n                data: {\n                    username: updates.username,\n                    avatar: updates.avatar,\n                    bio: updates.bio,\n                    settings: updates.settings,\n                    learningStats: updates.learningStats,\n                    tradingStats: updates.tradingStats\n                }\n            });\n            return {\n                id: user.id,\n                walletAddress: user.walletAddress,\n                username: user.username || undefined,\n                avatar: user.avatar || undefined,\n                bio: user.bio || undefined,\n                settings: user.settings,\n                learningStats: user.learningStats,\n                tradingStats: user.tradingStats,\n                createdAt: user.createdAt,\n                updatedAt: user.updatedAt\n            };\n        } catch (error) {\n            console.error(\"Error updating profile:\", error);\n            throw error;\n        }\n    }\n    async updateLearningProgress(walletAddress, lessonId) {\n        try {\n            const profile = await this.getProfile(walletAddress);\n            if (!profile) {\n                throw new Error(\"Profile not found\");\n            }\n            const stats = profile.learningStats;\n            stats.completedLessons += 1;\n            stats.xp += 100; // Base XP for completing a lesson\n            // Level up if enough XP\n            if (stats.xp >= stats.xpToNextLevel) {\n                stats.currentLevel += 1;\n                stats.xp = stats.xp - stats.xpToNextLevel;\n                stats.xpToNextLevel = Math.floor(stats.xpToNextLevel * 1.5);\n                stats.achievements.push(\"Reached Level \".concat(stats.currentLevel, \"!\"));\n            }\n            await this.updateProfile(walletAddress, {\n                learningStats: stats\n            });\n            return stats;\n        } catch (error) {\n            console.error(\"Error updating learning progress:\", error);\n            throw error;\n        }\n    }\n    async updateTradingProgress(walletAddress, tradeResult) {\n        try {\n            const profile = await this.getProfile(walletAddress);\n            if (!profile) {\n                throw new Error(\"Profile not found\");\n            }\n            const stats = profile.tradingStats;\n            stats.totalTrades += 1;\n            if (tradeResult.successful) {\n                stats.successfulTrades += 1;\n                stats.xp += Math.floor(100 * (1 + tradeResult.profitPercent)); // More XP for more profitable trades\n            }\n            // Update win rate\n            stats.winRate = stats.successfulTrades / stats.totalTrades * 100;\n            // Update profit factor (simplified)\n            stats.profitFactor = stats.winRate / (100 - stats.winRate);\n            // Level up if enough XP\n            if (stats.xp >= stats.xpToNextLevel) {\n                stats.level += 1;\n                stats.xp = stats.xp - stats.xpToNextLevel;\n                stats.xpToNextLevel = Math.floor(stats.xpToNextLevel * 1.5);\n                stats.achievements.push(\"Reached Trading Level \".concat(stats.level, \"!\"));\n                // Add milestone achievements\n                if (stats.totalTrades === 10) {\n                    stats.achievements.push(\"First 10 Trades Completed!\");\n                } else if (stats.totalTrades === 100) {\n                    stats.achievements.push(\"Trading Century: 100 Trades!\");\n                }\n                if (stats.winRate >= 60) {\n                    stats.achievements.push(\"High Performer: 60%+ Win Rate!\");\n                }\n            }\n            await this.updateProfile(walletAddress, {\n                tradingStats: stats\n            });\n            return stats;\n        } catch (error) {\n            console.error(\"Error updating trading progress:\", error);\n            throw error;\n        }\n    }\n    constructor(){\n        this.defaultLearningStats = {\n            completedLessons: 0,\n            totalLessons: 50,\n            currentLevel: 1,\n            xp: 0,\n            xpToNextLevel: 1000,\n            achievements: []\n        };\n        this.defaultTradingStats = {\n            level: 1,\n            xp: 0,\n            xpToNextLevel: 1000,\n            totalTrades: 0,\n            successfulTrades: 0,\n            profitFactor: 0,\n            winRate: 0,\n            achievements: []\n        };\n        this.prisma = new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient();\n    }\n}\nconst userService = new UserService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/lib/services/user.service.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/lib/utils.ts":
/*!**************************!*\
  !*** ./app/lib/utils.ts ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cn: function() { return /* binding */ cn; }\n/* harmony export */ });\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! clsx */ \"(app-pages-browser)/./node_modules/clsx/dist/clsx.mjs\");\n/* harmony import */ var tailwind_merge__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tailwind-merge */ \"(app-pages-browser)/./node_modules/tailwind-merge/dist/bundle-mjs.mjs\");\n\n\nfunction cn() {\n    for(var _len = arguments.length, inputs = new Array(_len), _key = 0; _key < _len; _key++){\n        inputs[_key] = arguments[_key];\n    }\n    return (0,tailwind_merge__WEBPACK_IMPORTED_MODULE_1__.twMerge)((0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(inputs));\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9saWIvdXRpbHMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTRDO0FBQ0o7QUFFakMsU0FBU0U7SUFBRztRQUFHQyxPQUFILHVCQUF1Qjs7SUFDeEMsT0FBT0YsdURBQU9BLENBQUNELDBDQUFJQSxDQUFDRztBQUN0QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9hcHAvbGliL3V0aWxzLnRzP2NkN2MiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdHlwZSBDbGFzc1ZhbHVlLCBjbHN4IH0gZnJvbSBcImNsc3hcIlxuaW1wb3J0IHsgdHdNZXJnZSB9IGZyb20gXCJ0YWlsd2luZC1tZXJnZVwiXG5cbmV4cG9ydCBmdW5jdGlvbiBjbiguLi5pbnB1dHM6IENsYXNzVmFsdWVbXSkge1xuICByZXR1cm4gdHdNZXJnZShjbHN4KGlucHV0cykpXG59ICJdLCJuYW1lcyI6WyJjbHN4IiwidHdNZXJnZSIsImNuIiwiaW5wdXRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/lib/utils.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/providers/WalletProvider.tsx":
/*!******************************************!*\
  !*** ./app/providers/WalletProvider.tsx ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WalletProvider: function() { return /* binding */ WalletProvider; },\n/* harmony export */   useWallet: function() { return /* binding */ useWallet; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var sonner__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! sonner */ \"(app-pages-browser)/./node_modules/sonner/dist/index.mjs\");\n/* __next_internal_client_entry_do_not_use__ useWallet,WalletProvider auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\nconst WalletContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({\n    connect: async ()=>{},\n    disconnect: async ()=>{},\n    isConnected: false,\n    isConnecting: false,\n    isPhantomInstalled: false,\n    walletAddress: null\n});\nconst useWallet = ()=>{\n    _s();\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(WalletContext);\n};\n_s(useWallet, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nfunction WalletProvider(param) {\n    let { children } = param;\n    _s1();\n    const [isConnected, setIsConnected] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isConnecting, setIsConnecting] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isPhantomInstalled, setIsPhantomInstalled] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [walletAddress, setWalletAddress] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // Create or get user profile\n    const handleUserProfile = async (address)=>{\n        try {\n            const response = await fetch(\"/api/users\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    walletAddress: address\n                })\n            });\n            if (!response.ok) {\n                const errorText = await response.text();\n                throw new Error(errorText || \"Failed to create/get user profile\");\n            }\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.error(\"Error handling user profile:\", error);\n            sonner__WEBPACK_IMPORTED_MODULE_2__.toast.error(\"Failed to create user profile. Please try again.\");\n            throw error;\n        }\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const checkPhantom = async ()=>{\n            var _window_phantom_solana, _window_phantom, _window;\n            // @ts-ignore\n            const isPhantom = (_window = window) === null || _window === void 0 ? void 0 : (_window_phantom = _window.phantom) === null || _window_phantom === void 0 ? void 0 : (_window_phantom_solana = _window_phantom.solana) === null || _window_phantom_solana === void 0 ? void 0 : _window_phantom_solana.isPhantom;\n            setIsPhantomInstalled(!!isPhantom);\n            // Try to auto-connect if previously connected\n            if (isPhantom) {\n                try {\n                    // @ts-ignore\n                    const { solana } = window.phantom;\n                    if (solana.isConnected) {\n                        const response = await solana.connect({\n                            onlyIfTrusted: true\n                        });\n                        const address = response.publicKey.toString();\n                        await handleUserProfile(address);\n                        setWalletAddress(address);\n                        setIsConnected(true);\n                        sonner__WEBPACK_IMPORTED_MODULE_2__.toast.success(\"Wallet reconnected successfully\");\n                    }\n                } catch (error) {\n                    console.error(\"Auto-connect error:\", error);\n                }\n            }\n        };\n        checkPhantom();\n        // Set up wallet change listeners\n        const handleWalletChange = ()=>{\n            checkPhantom();\n        };\n        window.addEventListener(\"load\", handleWalletChange);\n        return ()=>{\n            window.removeEventListener(\"load\", handleWalletChange);\n        };\n    }, []);\n    // Set up connection event listeners\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!isPhantomInstalled) return;\n        // @ts-ignore\n        const { solana } = window.phantom;\n        const handleConnect = async (publicKey)=>{\n            try {\n                const address = publicKey.toString();\n                await handleUserProfile(address);\n                setWalletAddress(address);\n                setIsConnected(true);\n                setIsConnecting(false);\n                sonner__WEBPACK_IMPORTED_MODULE_2__.toast.success(\"Wallet connected successfully\");\n            } catch (error) {\n                console.error(\"Connection error:\", error);\n                setIsConnected(false);\n                setWalletAddress(null);\n                setIsConnecting(false);\n                sonner__WEBPACK_IMPORTED_MODULE_2__.toast.error(\"Failed to connect wallet. Please try again.\");\n            }\n        };\n        const handleDisconnect = ()=>{\n            setWalletAddress(null);\n            setIsConnected(false);\n            sonner__WEBPACK_IMPORTED_MODULE_2__.toast.info(\"Wallet disconnected\");\n        };\n        solana.on(\"connect\", handleConnect);\n        solana.on(\"disconnect\", handleDisconnect);\n        return ()=>{\n            solana.off(\"connect\", handleConnect);\n            solana.off(\"disconnect\", handleDisconnect);\n        };\n    }, [\n        isPhantomInstalled\n    ]);\n    const connect = async ()=>{\n        try {\n            setIsConnecting(true);\n            // @ts-ignore\n            const { solana } = window.phantom;\n            const response = await solana.connect();\n            const address = response.publicKey.toString();\n            await handleUserProfile(address);\n            setWalletAddress(address);\n            setIsConnected(true);\n            sonner__WEBPACK_IMPORTED_MODULE_2__.toast.success(\"Wallet connected successfully\");\n        } catch (error) {\n            console.error(\"Error connecting to Phantom wallet:\", error);\n            setIsConnected(false);\n            setWalletAddress(null);\n            sonner__WEBPACK_IMPORTED_MODULE_2__.toast.error(\"Failed to connect wallet. Please try again.\");\n        } finally{\n            setIsConnecting(false);\n        }\n    };\n    const disconnect = async ()=>{\n        try {\n            // @ts-ignore\n            const { solana } = window.phantom;\n            await solana.disconnect();\n            setWalletAddress(null);\n            setIsConnected(false);\n            sonner__WEBPACK_IMPORTED_MODULE_2__.toast.info(\"Wallet disconnected\");\n        } catch (error) {\n            console.error(\"Error disconnecting from Phantom wallet:\", error);\n            sonner__WEBPACK_IMPORTED_MODULE_2__.toast.error(\"Failed to disconnect wallet. Please try again.\");\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(WalletContext.Provider, {\n        value: {\n            connect,\n            disconnect,\n            isConnected,\n            isConnecting,\n            isPhantomInstalled,\n            walletAddress\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/jamison/Desktop/neural-octopus/app/providers/WalletProvider.tsx\",\n        lineNumber: 171,\n        columnNumber: 5\n    }, this);\n}\n_s1(WalletProvider, \"cHP1z8BllXy98v+ajLEnMeDDyzs=\");\n_c = WalletProvider;\nvar _c;\n$RefreshReg$(_c, \"WalletProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/providers/WalletProvider.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/settings/page.tsx":
/*!*******************************!*\
  !*** ./app/settings/page.tsx ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ SettingsPage; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var framer_motion__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! framer-motion */ \"(app-pages-browser)/./node_modules/framer-motion/dist/cjs/index.js\");\n/* harmony import */ var _barrel_optimize_names_Book_ChartBar_Settings_TrendingUp_Trophy_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! __barrel_optimize__?names=Book,ChartBar,Settings,TrendingUp,Trophy,Wallet!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/settings.js\");\n/* harmony import */ var _barrel_optimize_names_Book_ChartBar_Settings_TrendingUp_Trophy_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! __barrel_optimize__?names=Book,ChartBar,Settings,TrendingUp,Trophy,Wallet!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/book.js\");\n/* harmony import */ var _barrel_optimize_names_Book_ChartBar_Settings_TrendingUp_Trophy_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! __barrel_optimize__?names=Book,ChartBar,Settings,TrendingUp,Trophy,Wallet!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/trending-up.js\");\n/* harmony import */ var _barrel_optimize_names_Book_ChartBar_Settings_TrendingUp_Trophy_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! __barrel_optimize__?names=Book,ChartBar,Settings,TrendingUp,Trophy,Wallet!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/wallet.js\");\n/* harmony import */ var _barrel_optimize_names_Book_ChartBar_Settings_TrendingUp_Trophy_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! __barrel_optimize__?names=Book,ChartBar,Settings,TrendingUp,Trophy,Wallet!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/chart-bar.js\");\n/* harmony import */ var _barrel_optimize_names_Book_ChartBar_Settings_TrendingUp_Trophy_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! __barrel_optimize__?names=Book,ChartBar,Settings,TrendingUp,Trophy,Wallet!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/trophy.js\");\n/* harmony import */ var _components_ProfileSettings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components/ProfileSettings */ \"(app-pages-browser)/./app/components/ProfileSettings.tsx\");\n/* harmony import */ var _components_LearningProgress__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../components/LearningProgress */ \"(app-pages-browser)/./app/components/LearningProgress.tsx\");\n/* harmony import */ var _components_TradingStats__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/TradingStats */ \"(app-pages-browser)/./app/components/TradingStats.tsx\");\n/* harmony import */ var _providers_WalletProvider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../providers/WalletProvider */ \"(app-pages-browser)/./app/providers/WalletProvider.tsx\");\n/* harmony import */ var _components_WalletConnect__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../components/WalletConnect */ \"(app-pages-browser)/./app/components/WalletConnect.tsx\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n\nconst tabs = [\n    {\n        id: \"profile\",\n        label: \"Profile\",\n        icon: _barrel_optimize_names_Book_ChartBar_Settings_TrendingUp_Trophy_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_7__[\"default\"]\n    },\n    {\n        id: \"learning\",\n        label: \"Learning Progress\",\n        icon: _barrel_optimize_names_Book_ChartBar_Settings_TrendingUp_Trophy_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_8__[\"default\"]\n    },\n    {\n        id: \"trading\",\n        label: \"Trading Stats\",\n        icon: _barrel_optimize_names_Book_ChartBar_Settings_TrendingUp_Trophy_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_9__[\"default\"]\n    }\n];\nfunction SettingsPage() {\n    _s();\n    const [activeTab, setActiveTab] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"profile\");\n    const { isConnected } = (0,_providers_WalletProvider__WEBPACK_IMPORTED_MODULE_5__.useWallet)();\n    if (!isConnected) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"min-h-screen bg-gradient-to-b from-gray-900 to-black\",\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"max-w-6xl mx-auto px-4 py-20\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_10__.motion.div, {\n                        initial: {\n                            opacity: 0,\n                            y: 20\n                        },\n                        animate: {\n                            opacity: 1,\n                            y: 0\n                        },\n                        className: \"text-center mb-16\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n                                className: \"text-5xl font-bold mb-6 bg-gradient-to-r from-blue-400 to-purple-600 text-transparent bg-clip-text\",\n                                children: \"Customize Your Experience\"\n                            }, void 0, false, {\n                                fileName: \"/Users/jamison/Desktop/neural-octopus/app/settings/page.tsx\",\n                                lineNumber: 31,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                className: \"text-xl text-gray-400 mb-8\",\n                                children: \"Connect your wallet to access your profile settings and preferences\"\n                            }, void 0, false, {\n                                fileName: \"/Users/jamison/Desktop/neural-octopus/app/settings/page.tsx\",\n                                lineNumber: 34,\n                                columnNumber: 13\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/jamison/Desktop/neural-octopus/app/settings/page.tsx\",\n                        lineNumber: 26,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"grid md:grid-cols-3 gap-8 mb-12\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_10__.motion.div, {\n                                initial: {\n                                    opacity: 0,\n                                    y: 20\n                                },\n                                animate: {\n                                    opacity: 1,\n                                    y: 0\n                                },\n                                transition: {\n                                    delay: 0.1\n                                },\n                                className: \"bg-gray-800/50 p-8 rounded-xl backdrop-blur-sm border border-gray-700\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Book_ChartBar_Settings_TrendingUp_Trophy_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n                                        className: \"w-12 h-12 text-blue-400 mb-4\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/jamison/Desktop/neural-octopus/app/settings/page.tsx\",\n                                        lineNumber: 46,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                        className: \"text-xl font-semibold mb-2\",\n                                        children: \"Secure Profile\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/jamison/Desktop/neural-octopus/app/settings/page.tsx\",\n                                        lineNumber: 47,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                        className: \"text-gray-400\",\n                                        children: \"Your profile is securely linked to your wallet\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/jamison/Desktop/neural-octopus/app/settings/page.tsx\",\n                                        lineNumber: 48,\n                                        columnNumber: 15\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/jamison/Desktop/neural-octopus/app/settings/page.tsx\",\n                                lineNumber: 40,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_10__.motion.div, {\n                                initial: {\n                                    opacity: 0,\n                                    y: 20\n                                },\n                                animate: {\n                                    opacity: 1,\n                                    y: 0\n                                },\n                                transition: {\n                                    delay: 0.2\n                                },\n                                className: \"bg-gray-800/50 p-8 rounded-xl backdrop-blur-sm border border-gray-700\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Book_ChartBar_Settings_TrendingUp_Trophy_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {\n                                        className: \"w-12 h-12 text-purple-400 mb-4\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/jamison/Desktop/neural-octopus/app/settings/page.tsx\",\n                                        lineNumber: 57,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                        className: \"text-xl font-semibold mb-2\",\n                                        children: \"Track Progress\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/jamison/Desktop/neural-octopus/app/settings/page.tsx\",\n                                        lineNumber: 58,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                        className: \"text-gray-400\",\n                                        children: \"Monitor your learning and trading journey\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/jamison/Desktop/neural-octopus/app/settings/page.tsx\",\n                                        lineNumber: 59,\n                                        columnNumber: 15\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/jamison/Desktop/neural-octopus/app/settings/page.tsx\",\n                                lineNumber: 51,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_10__.motion.div, {\n                                initial: {\n                                    opacity: 0,\n                                    y: 20\n                                },\n                                animate: {\n                                    opacity: 1,\n                                    y: 0\n                                },\n                                transition: {\n                                    delay: 0.3\n                                },\n                                className: \"bg-gray-800/50 p-8 rounded-xl backdrop-blur-sm border border-gray-700\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Book_ChartBar_Settings_TrendingUp_Trophy_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_13__[\"default\"], {\n                                        className: \"w-12 h-12 text-yellow-400 mb-4\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/jamison/Desktop/neural-octopus/app/settings/page.tsx\",\n                                        lineNumber: 68,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                        className: \"text-xl font-semibold mb-2\",\n                                        children: \"Achievements\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/jamison/Desktop/neural-octopus/app/settings/page.tsx\",\n                                        lineNumber: 69,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                        className: \"text-gray-400\",\n                                        children: \"View and unlock trading achievements\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/jamison/Desktop/neural-octopus/app/settings/page.tsx\",\n                                        lineNumber: 70,\n                                        columnNumber: 15\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/jamison/Desktop/neural-octopus/app/settings/page.tsx\",\n                                lineNumber: 62,\n                                columnNumber: 13\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/jamison/Desktop/neural-octopus/app/settings/page.tsx\",\n                        lineNumber: 39,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_10__.motion.div, {\n                        initial: {\n                            opacity: 0,\n                            scale: 0.95\n                        },\n                        animate: {\n                            opacity: 1,\n                            scale: 1\n                        },\n                        transition: {\n                            delay: 0.4\n                        },\n                        className: \"flex justify-center\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_WalletConnect__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {}, void 0, false, {\n                            fileName: \"/Users/jamison/Desktop/neural-octopus/app/settings/page.tsx\",\n                            lineNumber: 80,\n                            columnNumber: 13\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"/Users/jamison/Desktop/neural-octopus/app/settings/page.tsx\",\n                        lineNumber: 74,\n                        columnNumber: 11\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/jamison/Desktop/neural-octopus/app/settings/page.tsx\",\n                lineNumber: 25,\n                columnNumber: 9\n            }, this)\n        }, void 0, false, {\n            fileName: \"/Users/jamison/Desktop/neural-octopus/app/settings/page.tsx\",\n            lineNumber: 24,\n            columnNumber: 7\n        }, this);\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"min-h-screen pl-[240px]\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"container mx-auto py-8\",\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex flex-col space-y-8\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex space-x-4 border-b border-gray-700\",\n                        children: tabs.map((tab)=>{\n                            const Icon = tab.icon;\n                            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                onClick: ()=>setActiveTab(tab.id),\n                                className: \"flex items-center space-x-2 px-4 py-2 text-sm font-medium transition-colors hover:text-primary \".concat(activeTab === tab.id ? \"border-b-2 border-primary text-primary\" : \"text-gray-500\"),\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Icon, {\n                                        className: \"w-4 h-4\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/jamison/Desktop/neural-octopus/app/settings/page.tsx\",\n                                        lineNumber: 105,\n                                        columnNumber: 19\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        children: tab.label\n                                    }, void 0, false, {\n                                        fileName: \"/Users/jamison/Desktop/neural-octopus/app/settings/page.tsx\",\n                                        lineNumber: 106,\n                                        columnNumber: 19\n                                    }, this)\n                                ]\n                            }, tab.id, true, {\n                                fileName: \"/Users/jamison/Desktop/neural-octopus/app/settings/page.tsx\",\n                                lineNumber: 96,\n                                columnNumber: 17\n                            }, this);\n                        })\n                    }, void 0, false, {\n                        fileName: \"/Users/jamison/Desktop/neural-octopus/app/settings/page.tsx\",\n                        lineNumber: 92,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_10__.motion.div, {\n                        initial: {\n                            opacity: 0,\n                            y: 20\n                        },\n                        animate: {\n                            opacity: 1,\n                            y: 0\n                        },\n                        exit: {\n                            opacity: 0,\n                            y: -20\n                        },\n                        transition: {\n                            duration: 0.2\n                        },\n                        children: [\n                            activeTab === \"profile\" && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ProfileSettings__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {}, void 0, false, {\n                                fileName: \"/Users/jamison/Desktop/neural-octopus/app/settings/page.tsx\",\n                                lineNumber: 120,\n                                columnNumber: 41\n                            }, this),\n                            activeTab === \"learning\" && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_LearningProgress__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {}, void 0, false, {\n                                fileName: \"/Users/jamison/Desktop/neural-octopus/app/settings/page.tsx\",\n                                lineNumber: 121,\n                                columnNumber: 42\n                            }, this),\n                            activeTab === \"trading\" && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_TradingStats__WEBPACK_IMPORTED_MODULE_4__.TradingStats, {}, void 0, false, {\n                                fileName: \"/Users/jamison/Desktop/neural-octopus/app/settings/page.tsx\",\n                                lineNumber: 122,\n                                columnNumber: 41\n                            }, this)\n                        ]\n                    }, activeTab, true, {\n                        fileName: \"/Users/jamison/Desktop/neural-octopus/app/settings/page.tsx\",\n                        lineNumber: 113,\n                        columnNumber: 11\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/jamison/Desktop/neural-octopus/app/settings/page.tsx\",\n                lineNumber: 90,\n                columnNumber: 9\n            }, this)\n        }, void 0, false, {\n            fileName: \"/Users/jamison/Desktop/neural-octopus/app/settings/page.tsx\",\n            lineNumber: 89,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"/Users/jamison/Desktop/neural-octopus/app/settings/page.tsx\",\n        lineNumber: 88,\n        columnNumber: 5\n    }, this);\n}\n_s(SettingsPage, \"sNrIsFo5WQsU1W0r+tI1rN2GOek=\", false, function() {\n    return [\n        _providers_WalletProvider__WEBPACK_IMPORTED_MODULE_5__.useWallet\n    ];\n});\n_c = SettingsPage;\nvar _c;\n$RefreshReg$(_c, \"SettingsPage\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/settings/page.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@radix-ui/primitive/dist/index.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/@radix-ui/primitive/dist/index.mjs ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   composeEventHandlers: function() { return /* binding */ composeEventHandlers; }\n/* harmony export */ });\n// packages/core/primitive/src/primitive.tsx\nfunction composeEventHandlers(originalEventHandler, ourEventHandler) {\n    let { checkForDefaultPrevented = true } = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    return function handleEvent(event) {\n        originalEventHandler === null || originalEventHandler === void 0 ? void 0 : originalEventHandler(event);\n        if (checkForDefaultPrevented === false || !event.defaultPrevented) {\n            return ourEventHandler === null || ourEventHandler === void 0 ? void 0 : ourEventHandler(event);\n        }\n    };\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcmFkaXgtdWkvcHJpbWl0aXZlL2Rpc3QvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSw0Q0FBNEM7QUFDNUMsU0FBU0EscUJBQXFCQyxvQkFBb0IsRUFBRUMsZUFBZTtRQUFFLEVBQUVDLDJCQUEyQixJQUFJLEVBQUUsR0FBbkMsaUVBQXNDLENBQUM7SUFDMUcsT0FBTyxTQUFTQyxZQUFZQyxLQUFLO1FBQy9CSixpQ0FBQUEsMkNBQUFBLHFCQUF1Qkk7UUFDdkIsSUFBSUYsNkJBQTZCLFNBQVMsQ0FBQ0UsTUFBTUMsZ0JBQWdCLEVBQUU7WUFDakUsT0FBT0osNEJBQUFBLHNDQUFBQSxnQkFBa0JHO1FBQzNCO0lBQ0Y7QUFDRjtBQUdFLENBQ0Ysa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AcmFkaXgtdWkvcHJpbWl0aXZlL2Rpc3QvaW5kZXgubWpzPzE4NjgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gcGFja2FnZXMvY29yZS9wcmltaXRpdmUvc3JjL3ByaW1pdGl2ZS50c3hcbmZ1bmN0aW9uIGNvbXBvc2VFdmVudEhhbmRsZXJzKG9yaWdpbmFsRXZlbnRIYW5kbGVyLCBvdXJFdmVudEhhbmRsZXIsIHsgY2hlY2tGb3JEZWZhdWx0UHJldmVudGVkID0gdHJ1ZSB9ID0ge30pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGhhbmRsZUV2ZW50KGV2ZW50KSB7XG4gICAgb3JpZ2luYWxFdmVudEhhbmRsZXI/LihldmVudCk7XG4gICAgaWYgKGNoZWNrRm9yRGVmYXVsdFByZXZlbnRlZCA9PT0gZmFsc2UgfHwgIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHJldHVybiBvdXJFdmVudEhhbmRsZXI/LihldmVudCk7XG4gICAgfVxuICB9O1xufVxuZXhwb3J0IHtcbiAgY29tcG9zZUV2ZW50SGFuZGxlcnNcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwXG4iXSwibmFtZXMiOlsiY29tcG9zZUV2ZW50SGFuZGxlcnMiLCJvcmlnaW5hbEV2ZW50SGFuZGxlciIsIm91ckV2ZW50SGFuZGxlciIsImNoZWNrRm9yRGVmYXVsdFByZXZlbnRlZCIsImhhbmRsZUV2ZW50IiwiZXZlbnQiLCJkZWZhdWx0UHJldmVudGVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@radix-ui/primitive/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@radix-ui/react-compose-refs/dist/index.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@radix-ui/react-compose-refs/dist/index.mjs ***!
  \******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   composeRefs: function() { return /* binding */ composeRefs; },\n/* harmony export */   useComposedRefs: function() { return /* binding */ useComposedRefs; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n// packages/react/compose-refs/src/composeRefs.tsx\nvar _s = $RefreshSig$();\n\nfunction setRef(ref, value) {\n    if (typeof ref === \"function\") {\n        return ref(value);\n    } else if (ref !== null && ref !== void 0) {\n        ref.current = value;\n    }\n}\nfunction composeRefs() {\n    for(var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++){\n        refs[_key] = arguments[_key];\n    }\n    return (node)=>{\n        let hasCleanup = false;\n        const cleanups = refs.map((ref)=>{\n            const cleanup = setRef(ref, node);\n            if (!hasCleanup && typeof cleanup == \"function\") {\n                hasCleanup = true;\n            }\n            return cleanup;\n        });\n        if (hasCleanup) {\n            return ()=>{\n                for(let i = 0; i < cleanups.length; i++){\n                    const cleanup = cleanups[i];\n                    if (typeof cleanup == \"function\") {\n                        cleanup();\n                    } else {\n                        setRef(refs[i], null);\n                    }\n                }\n            };\n        }\n    };\n}\nfunction useComposedRefs() {\n    for(var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++){\n        refs[_key] = arguments[_key];\n    }\n    _s();\n    return react__WEBPACK_IMPORTED_MODULE_0__.useCallback(composeRefs(...refs), refs);\n}\n_s(useComposedRefs, \"epj4qY15NHsef74wNqHIp5fdZmg=\");\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcmFkaXgtdWkvcmVhY3QtY29tcG9zZS1yZWZzL2Rpc3QvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGtEQUFrRDs7QUFDbkI7QUFDL0IsU0FBU0MsT0FBT0MsR0FBRyxFQUFFQyxLQUFLO0lBQ3hCLElBQUksT0FBT0QsUUFBUSxZQUFZO1FBQzdCLE9BQU9BLElBQUlDO0lBQ2IsT0FBTyxJQUFJRCxRQUFRLFFBQVFBLFFBQVEsS0FBSyxHQUFHO1FBQ3pDQSxJQUFJRSxPQUFPLEdBQUdEO0lBQ2hCO0FBQ0Y7QUFDQSxTQUFTRTtJQUFZO1FBQUdDLEtBQUgsdUJBQU87O0lBQzFCLE9BQU8sQ0FBQ0M7UUFDTixJQUFJQyxhQUFhO1FBQ2pCLE1BQU1DLFdBQVdILEtBQUtJLEdBQUcsQ0FBQyxDQUFDUjtZQUN6QixNQUFNUyxVQUFVVixPQUFPQyxLQUFLSztZQUM1QixJQUFJLENBQUNDLGNBQWMsT0FBT0csV0FBVyxZQUFZO2dCQUMvQ0gsYUFBYTtZQUNmO1lBQ0EsT0FBT0c7UUFDVDtRQUNBLElBQUlILFlBQVk7WUFDZCxPQUFPO2dCQUNMLElBQUssSUFBSUksSUFBSSxHQUFHQSxJQUFJSCxTQUFTSSxNQUFNLEVBQUVELElBQUs7b0JBQ3hDLE1BQU1ELFVBQVVGLFFBQVEsQ0FBQ0csRUFBRTtvQkFDM0IsSUFBSSxPQUFPRCxXQUFXLFlBQVk7d0JBQ2hDQTtvQkFDRixPQUFPO3dCQUNMVixPQUFPSyxJQUFJLENBQUNNLEVBQUUsRUFBRTtvQkFDbEI7Z0JBQ0Y7WUFDRjtRQUNGO0lBQ0Y7QUFDRjtBQUNBLFNBQVNFO0lBQWdCO1FBQUdSLEtBQUgsdUJBQU87OztJQUM5QixPQUFPTiw4Q0FBaUIsQ0FBQ0ssZUFBZUMsT0FBT0E7QUFDakQ7R0FGU1E7QUFNUCxDQUNGLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHJhZGl4LXVpL3JlYWN0LWNvbXBvc2UtcmVmcy9kaXN0L2luZGV4Lm1qcz8zMWM0Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHBhY2thZ2VzL3JlYWN0L2NvbXBvc2UtcmVmcy9zcmMvY29tcG9zZVJlZnMudHN4XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmZ1bmN0aW9uIHNldFJlZihyZWYsIHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgcmVmID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gcmVmKHZhbHVlKTtcbiAgfSBlbHNlIGlmIChyZWYgIT09IG51bGwgJiYgcmVmICE9PSB2b2lkIDApIHtcbiAgICByZWYuY3VycmVudCA9IHZhbHVlO1xuICB9XG59XG5mdW5jdGlvbiBjb21wb3NlUmVmcyguLi5yZWZzKSB7XG4gIHJldHVybiAobm9kZSkgPT4ge1xuICAgIGxldCBoYXNDbGVhbnVwID0gZmFsc2U7XG4gICAgY29uc3QgY2xlYW51cHMgPSByZWZzLm1hcCgocmVmKSA9PiB7XG4gICAgICBjb25zdCBjbGVhbnVwID0gc2V0UmVmKHJlZiwgbm9kZSk7XG4gICAgICBpZiAoIWhhc0NsZWFudXAgJiYgdHlwZW9mIGNsZWFudXAgPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGhhc0NsZWFudXAgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNsZWFudXA7XG4gICAgfSk7XG4gICAgaWYgKGhhc0NsZWFudXApIHtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2xlYW51cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBjbGVhbnVwID0gY2xlYW51cHNbaV07XG4gICAgICAgICAgaWYgKHR5cGVvZiBjbGVhbnVwID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXRSZWYocmVmc1tpXSwgbnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIHVzZUNvbXBvc2VkUmVmcyguLi5yZWZzKSB7XG4gIHJldHVybiBSZWFjdC51c2VDYWxsYmFjayhjb21wb3NlUmVmcyguLi5yZWZzKSwgcmVmcyk7XG59XG5leHBvcnQge1xuICBjb21wb3NlUmVmcyxcbiAgdXNlQ29tcG9zZWRSZWZzXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcFxuIl0sIm5hbWVzIjpbIlJlYWN0Iiwic2V0UmVmIiwicmVmIiwidmFsdWUiLCJjdXJyZW50IiwiY29tcG9zZVJlZnMiLCJyZWZzIiwibm9kZSIsImhhc0NsZWFudXAiLCJjbGVhbnVwcyIsIm1hcCIsImNsZWFudXAiLCJpIiwibGVuZ3RoIiwidXNlQ29tcG9zZWRSZWZzIiwidXNlQ2FsbGJhY2siXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@radix-ui/react-compose-refs/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@radix-ui/react-context/dist/index.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@radix-ui/react-context/dist/index.mjs ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createContext: function() { return /* binding */ createContext2; },\n/* harmony export */   createContextScope: function() { return /* binding */ createContextScope; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-runtime.js\");\n// packages/react/context/src/createContext.tsx\n\n\nfunction createContext2(rootComponentName, defaultContext) {\n    var _s = $RefreshSig$(), _s1 = $RefreshSig$();\n    const Context = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(defaultContext);\n    const Provider = (props)=>{\n        _s();\n        const { children, ...context } = props;\n        const value = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>context, Object.values(context));\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Context.Provider, {\n            value,\n            children\n        });\n    };\n    _s(Provider, \"tPauEVZ6EeuERV9ttvKTwQ7++Gw=\");\n    Provider.displayName = rootComponentName + \"Provider\";\n    function useContext2(consumerName) {\n        _s1();\n        const context = react__WEBPACK_IMPORTED_MODULE_0__.useContext(Context);\n        if (context) return context;\n        if (defaultContext !== void 0) return defaultContext;\n        throw new Error(\"`\".concat(consumerName, \"` must be used within `\").concat(rootComponentName, \"`\"));\n    }\n    _s1(useContext2, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n    return [\n        Provider,\n        useContext2\n    ];\n}\nfunction createContextScope(scopeName) {\n    let createContextScopeDeps = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];\n    let defaultContexts = [];\n    function createContext3(rootComponentName, defaultContext) {\n        var _s = $RefreshSig$(), _s1 = $RefreshSig$();\n        const BaseContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(defaultContext);\n        const index = defaultContexts.length;\n        defaultContexts = [\n            ...defaultContexts,\n            defaultContext\n        ];\n        const Provider = (props)=>{\n            var _scope_scopeName;\n            _s();\n            const { scope, children, ...context } = props;\n            const Context = (scope === null || scope === void 0 ? void 0 : (_scope_scopeName = scope[scopeName]) === null || _scope_scopeName === void 0 ? void 0 : _scope_scopeName[index]) || BaseContext;\n            const value = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>context, Object.values(context));\n            return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Context.Provider, {\n                value,\n                children\n            });\n        };\n        _s(Provider, \"tPauEVZ6EeuERV9ttvKTwQ7++Gw=\");\n        Provider.displayName = rootComponentName + \"Provider\";\n        function useContext2(consumerName, scope) {\n            var _scope_scopeName;\n            _s1();\n            const Context = (scope === null || scope === void 0 ? void 0 : (_scope_scopeName = scope[scopeName]) === null || _scope_scopeName === void 0 ? void 0 : _scope_scopeName[index]) || BaseContext;\n            const context = react__WEBPACK_IMPORTED_MODULE_0__.useContext(Context);\n            if (context) return context;\n            if (defaultContext !== void 0) return defaultContext;\n            throw new Error(\"`\".concat(consumerName, \"` must be used within `\").concat(rootComponentName, \"`\"));\n        }\n        _s1(useContext2, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n        return [\n            Provider,\n            useContext2\n        ];\n    }\n    const createScope = ()=>{\n        var _s = $RefreshSig$();\n        const scopeContexts = defaultContexts.map((defaultContext)=>{\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(defaultContext);\n        });\n        return _s(function useScope(scope) {\n            _s();\n            const contexts = (scope === null || scope === void 0 ? void 0 : scope[scopeName]) || scopeContexts;\n            return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>({\n                    [\"__scope\".concat(scopeName)]: {\n                        ...scope,\n                        [scopeName]: contexts\n                    }\n                }), [\n                scope,\n                contexts\n            ]);\n        }, \"nwk+m61qLgjDVUp4IGV/072DDN4=\");\n    };\n    createScope.scopeName = scopeName;\n    return [\n        createContext3,\n        composeContextScopes(createScope, ...createContextScopeDeps)\n    ];\n}\nfunction composeContextScopes() {\n    for(var _len = arguments.length, scopes = new Array(_len), _key = 0; _key < _len; _key++){\n        scopes[_key] = arguments[_key];\n    }\n    const baseScope = scopes[0];\n    if (scopes.length === 1) return baseScope;\n    const createScope = ()=>{\n        var _s = $RefreshSig$();\n        const scopeHooks = scopes.map((createScope2)=>({\n                useScope: createScope2(),\n                scopeName: createScope2.scopeName\n            }));\n        return _s(function useComposedScopes(overrideScopes) {\n            _s();\n            var _s1 = $RefreshSig$();\n            const nextScopes = scopeHooks.reduce(_s1((nextScopes2, param)=>{\n                let { useScope, scopeName } = param;\n                _s1();\n                const scopeProps = useScope(overrideScopes);\n                const currentScope = scopeProps[\"__scope\".concat(scopeName)];\n                return {\n                    ...nextScopes2,\n                    ...currentScope\n                };\n            }, \"u4SEl84URpjHX6Z2NY+fK/APDPQ=\", true), {});\n            return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>({\n                    [\"__scope\".concat(baseScope.scopeName)]: nextScopes\n                }), [\n                nextScopes\n            ]);\n        }, \"nwk+m61qLgjDVUp4IGV/072DDN4=\");\n    };\n    createScope.scopeName = baseScope.scopeName;\n    return createScope;\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@radix-ui/react-context/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@radix-ui/react-label/dist/index.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/@radix-ui/react-label/dist/index.mjs ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Label: function() { return /* binding */ Label; },\n/* harmony export */   Root: function() { return /* binding */ Root; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @radix-ui/react-primitive */ \"(app-pages-browser)/./node_modules/@radix-ui/react-primitive/dist/index.mjs\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-runtime.js\");\n/* __next_internal_client_entry_do_not_use__ Label,Root auto */ // packages/react/label/src/Label.tsx\n\n\n\nvar NAME = \"Label\";\nvar Label = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(_c = (props, forwardedRef)=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_2__.Primitive.label, {\n        ...props,\n        ref: forwardedRef,\n        onMouseDown: (event)=>{\n            var _props_onMouseDown;\n            const target = event.target;\n            if (target.closest(\"button, input, select, textarea\")) return;\n            (_props_onMouseDown = props.onMouseDown) === null || _props_onMouseDown === void 0 ? void 0 : _props_onMouseDown.call(props, event);\n            if (!event.defaultPrevented && event.detail > 1) event.preventDefault();\n        }\n    });\n});\n_c1 = Label;\nLabel.displayName = NAME;\nvar Root = Label;\n //# sourceMappingURL=index.mjs.map\nvar _c, _c1;\n$RefreshReg$(_c, \"Label$React.forwardRef\");\n$RefreshReg$(_c1, \"Label\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcmFkaXgtdWkvcmVhY3QtbGFiZWwvZGlzdC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Z0VBRUEscUNBQXFDO0FBQ047QUFDdUI7QUFDZDtBQUN4QyxJQUFJRyxPQUFPO0FBQ1gsSUFBSUMsc0JBQVFKLDZDQUFnQixNQUFDLENBQUNNLE9BQU9DO0lBQ25DLE9BQU8sYUFBYSxHQUFHTCxzREFBR0EsQ0FDeEJELGdFQUFTQSxDQUFDTyxLQUFLLEVBQ2Y7UUFDRSxHQUFHRixLQUFLO1FBQ1JHLEtBQUtGO1FBQ0xHLGFBQWEsQ0FBQ0M7Z0JBR1pMO1lBRkEsTUFBTU0sU0FBU0QsTUFBTUMsTUFBTTtZQUMzQixJQUFJQSxPQUFPQyxPQUFPLENBQUMsb0NBQW9DO2FBQ3ZEUCxxQkFBQUEsTUFBTUksV0FBVyxjQUFqQkoseUNBQUFBLHdCQUFBQSxPQUFvQks7WUFDcEIsSUFBSSxDQUFDQSxNQUFNRyxnQkFBZ0IsSUFBSUgsTUFBTUksTUFBTSxHQUFHLEdBQUdKLE1BQU1LLGNBQWM7UUFDdkU7SUFDRjtBQUVKOztBQUNBWixNQUFNYSxXQUFXLEdBQUdkO0FBQ3BCLElBQUllLE9BQU9kO0FBSVQsQ0FDRixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0ByYWRpeC11aS9yZWFjdC1sYWJlbC9kaXN0L2luZGV4Lm1qcz9kMTBkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiO1xuXG4vLyBwYWNrYWdlcy9yZWFjdC9sYWJlbC9zcmMvTGFiZWwudHN4XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFByaW1pdGl2ZSB9IGZyb20gXCJAcmFkaXgtdWkvcmVhY3QtcHJpbWl0aXZlXCI7XG5pbXBvcnQgeyBqc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbnZhciBOQU1FID0gXCJMYWJlbFwiO1xudmFyIExhYmVsID0gUmVhY3QuZm9yd2FyZFJlZigocHJvcHMsIGZvcndhcmRlZFJlZikgPT4ge1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIGpzeChcbiAgICBQcmltaXRpdmUubGFiZWwsXG4gICAge1xuICAgICAgLi4ucHJvcHMsXG4gICAgICByZWY6IGZvcndhcmRlZFJlZixcbiAgICAgIG9uTW91c2VEb3duOiAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuICAgICAgICBpZiAodGFyZ2V0LmNsb3Nlc3QoXCJidXR0b24sIGlucHV0LCBzZWxlY3QsIHRleHRhcmVhXCIpKSByZXR1cm47XG4gICAgICAgIHByb3BzLm9uTW91c2VEb3duPy4oZXZlbnQpO1xuICAgICAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgJiYgZXZlbnQuZGV0YWlsID4gMSkgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICB9XG4gICk7XG59KTtcbkxhYmVsLmRpc3BsYXlOYW1lID0gTkFNRTtcbnZhciBSb290ID0gTGFiZWw7XG5leHBvcnQge1xuICBMYWJlbCxcbiAgUm9vdFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJSZWFjdCIsIlByaW1pdGl2ZSIsImpzeCIsIk5BTUUiLCJMYWJlbCIsImZvcndhcmRSZWYiLCJwcm9wcyIsImZvcndhcmRlZFJlZiIsImxhYmVsIiwicmVmIiwib25Nb3VzZURvd24iLCJldmVudCIsInRhcmdldCIsImNsb3Nlc3QiLCJkZWZhdWx0UHJldmVudGVkIiwiZGV0YWlsIiwicHJldmVudERlZmF1bHQiLCJkaXNwbGF5TmFtZSIsIlJvb3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@radix-ui/react-label/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@radix-ui/react-primitive/dist/index.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@radix-ui/react-primitive/dist/index.mjs ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Primitive: function() { return /* binding */ Primitive; },\n/* harmony export */   Root: function() { return /* binding */ Root; },\n/* harmony export */   dispatchDiscreteCustomEvent: function() { return /* binding */ dispatchDiscreteCustomEvent; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react-dom/index.js\");\n/* harmony import */ var _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @radix-ui/react-slot */ \"(app-pages-browser)/./node_modules/@radix-ui/react-slot/dist/index.mjs\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-runtime.js\");\n// packages/react/primitive/src/Primitive.tsx\n\n\n\n\nvar NODES = [\n    \"a\",\n    \"button\",\n    \"div\",\n    \"form\",\n    \"h2\",\n    \"h3\",\n    \"img\",\n    \"input\",\n    \"label\",\n    \"li\",\n    \"nav\",\n    \"ol\",\n    \"p\",\n    \"span\",\n    \"svg\",\n    \"ul\"\n];\nvar Primitive = NODES.reduce(_c = (primitive, node)=>{\n    const Node = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardedRef)=>{\n        const { asChild, ...primitiveProps } = props;\n        const Comp = asChild ? _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_3__.Slot : node;\n        if (true) {\n            window[Symbol.for(\"radix-ui\")] = true;\n        }\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Comp, {\n            ...primitiveProps,\n            ref: forwardedRef\n        });\n    });\n    Node.displayName = \"Primitive.\".concat(node);\n    return {\n        ...primitive,\n        [node]: Node\n    };\n}, {});\n_c1 = Primitive;\nfunction dispatchDiscreteCustomEvent(target, event) {\n    if (target) react_dom__WEBPACK_IMPORTED_MODULE_1__.flushSync(()=>target.dispatchEvent(event));\n}\nvar Root = Primitive;\n //# sourceMappingURL=index.mjs.map\nvar _c, _c1;\n$RefreshReg$(_c, \"Primitive$NODES.reduce\");\n$RefreshReg$(_c1, \"Primitive\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcmFkaXgtdWkvcmVhY3QtcHJpbWl0aXZlL2Rpc3QvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSw2Q0FBNkM7QUFDZDtBQUNPO0FBQ007QUFDSjtBQUN4QyxJQUFJSSxRQUFRO0lBQ1Y7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDRDtBQUNELElBQUlDLFlBQVlELE1BQU1FLE1BQU0sTUFBQyxDQUFDQyxXQUFXQztJQUN2QyxNQUFNQyxxQkFBT1QsNkNBQWdCLENBQUMsQ0FBQ1csT0FBT0M7UUFDcEMsTUFBTSxFQUFFQyxPQUFPLEVBQUUsR0FBR0MsZ0JBQWdCLEdBQUdIO1FBQ3ZDLE1BQU1JLE9BQU9GLFVBQVVYLHNEQUFJQSxHQUFHTTtRQUM5QixJQUFJLElBQTZCLEVBQUU7WUFDakNRLE1BQU0sQ0FBQ0MsT0FBT0MsR0FBRyxDQUFDLFlBQVksR0FBRztRQUNuQztRQUNBLE9BQU8sYUFBYSxHQUFHZixzREFBR0EsQ0FBQ1ksTUFBTTtZQUFFLEdBQUdELGNBQWM7WUFBRUssS0FBS1A7UUFBYTtJQUMxRTtJQUNBSCxLQUFLVyxXQUFXLEdBQUcsYUFBa0IsT0FBTFo7SUFDaEMsT0FBTztRQUFFLEdBQUdELFNBQVM7UUFBRSxDQUFDQyxLQUFLLEVBQUVDO0lBQUs7QUFDdEMsR0FBRyxDQUFDOztBQUNKLFNBQVNZLDRCQUE0QkMsTUFBTSxFQUFFQyxLQUFLO0lBQ2hELElBQUlELFFBQVFyQixnREFBa0IsQ0FBQyxJQUFNcUIsT0FBT0csYUFBYSxDQUFDRjtBQUM1RDtBQUNBLElBQUlHLE9BQU9yQjtBQUtULENBQ0Ysa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AcmFkaXgtdWkvcmVhY3QtcHJpbWl0aXZlL2Rpc3QvaW5kZXgubWpzPzcxZmQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gcGFja2FnZXMvcmVhY3QvcHJpbWl0aXZlL3NyYy9QcmltaXRpdmUudHN4XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCAqIGFzIFJlYWN0RE9NIGZyb20gXCJyZWFjdC1kb21cIjtcbmltcG9ydCB7IFNsb3QgfSBmcm9tIFwiQHJhZGl4LXVpL3JlYWN0LXNsb3RcIjtcbmltcG9ydCB7IGpzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xudmFyIE5PREVTID0gW1xuICBcImFcIixcbiAgXCJidXR0b25cIixcbiAgXCJkaXZcIixcbiAgXCJmb3JtXCIsXG4gIFwiaDJcIixcbiAgXCJoM1wiLFxuICBcImltZ1wiLFxuICBcImlucHV0XCIsXG4gIFwibGFiZWxcIixcbiAgXCJsaVwiLFxuICBcIm5hdlwiLFxuICBcIm9sXCIsXG4gIFwicFwiLFxuICBcInNwYW5cIixcbiAgXCJzdmdcIixcbiAgXCJ1bFwiXG5dO1xudmFyIFByaW1pdGl2ZSA9IE5PREVTLnJlZHVjZSgocHJpbWl0aXZlLCBub2RlKSA9PiB7XG4gIGNvbnN0IE5vZGUgPSBSZWFjdC5mb3J3YXJkUmVmKChwcm9wcywgZm9yd2FyZGVkUmVmKSA9PiB7XG4gICAgY29uc3QgeyBhc0NoaWxkLCAuLi5wcmltaXRpdmVQcm9wcyB9ID0gcHJvcHM7XG4gICAgY29uc3QgQ29tcCA9IGFzQ2hpbGQgPyBTbG90IDogbm9kZTtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgd2luZG93W1N5bWJvbC5mb3IoXCJyYWRpeC11aVwiKV0gPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIGpzeChDb21wLCB7IC4uLnByaW1pdGl2ZVByb3BzLCByZWY6IGZvcndhcmRlZFJlZiB9KTtcbiAgfSk7XG4gIE5vZGUuZGlzcGxheU5hbWUgPSBgUHJpbWl0aXZlLiR7bm9kZX1gO1xuICByZXR1cm4geyAuLi5wcmltaXRpdmUsIFtub2RlXTogTm9kZSB9O1xufSwge30pO1xuZnVuY3Rpb24gZGlzcGF0Y2hEaXNjcmV0ZUN1c3RvbUV2ZW50KHRhcmdldCwgZXZlbnQpIHtcbiAgaWYgKHRhcmdldCkgUmVhY3RET00uZmx1c2hTeW5jKCgpID0+IHRhcmdldC5kaXNwYXRjaEV2ZW50KGV2ZW50KSk7XG59XG52YXIgUm9vdCA9IFByaW1pdGl2ZTtcbmV4cG9ydCB7XG4gIFByaW1pdGl2ZSxcbiAgUm9vdCxcbiAgZGlzcGF0Y2hEaXNjcmV0ZUN1c3RvbUV2ZW50XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcFxuIl0sIm5hbWVzIjpbIlJlYWN0IiwiUmVhY3RET00iLCJTbG90IiwianN4IiwiTk9ERVMiLCJQcmltaXRpdmUiLCJyZWR1Y2UiLCJwcmltaXRpdmUiLCJub2RlIiwiTm9kZSIsImZvcndhcmRSZWYiLCJwcm9wcyIsImZvcndhcmRlZFJlZiIsImFzQ2hpbGQiLCJwcmltaXRpdmVQcm9wcyIsIkNvbXAiLCJ3aW5kb3ciLCJTeW1ib2wiLCJmb3IiLCJyZWYiLCJkaXNwbGF5TmFtZSIsImRpc3BhdGNoRGlzY3JldGVDdXN0b21FdmVudCIsInRhcmdldCIsImV2ZW50IiwiZmx1c2hTeW5jIiwiZGlzcGF0Y2hFdmVudCIsIlJvb3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@radix-ui/react-primitive/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@radix-ui/react-slot/dist/index.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/@radix-ui/react-slot/dist/index.mjs ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Root: function() { return /* binding */ Root; },\n/* harmony export */   Slot: function() { return /* binding */ Slot; },\n/* harmony export */   Slottable: function() { return /* binding */ Slottable; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @radix-ui/react-compose-refs */ \"(app-pages-browser)/./node_modules/@radix-ui/react-compose-refs/dist/index.mjs\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-runtime.js\");\n// packages/react/slot/src/Slot.tsx\n\n\n\nvar Slot = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(_c = (props, forwardedRef)=>{\n    const { children, ...slotProps } = props;\n    const childrenArray = react__WEBPACK_IMPORTED_MODULE_0__.Children.toArray(children);\n    const slottable = childrenArray.find(isSlottable);\n    if (slottable) {\n        const newElement = slottable.props.children;\n        const newChildren = childrenArray.map((child)=>{\n            if (child === slottable) {\n                if (react__WEBPACK_IMPORTED_MODULE_0__.Children.count(newElement) > 1) return react__WEBPACK_IMPORTED_MODULE_0__.Children.only(null);\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(newElement) ? newElement.props.children : null;\n            } else {\n                return child;\n            }\n        });\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(SlotClone, {\n            ...slotProps,\n            ref: forwardedRef,\n            children: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(newElement) ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(newElement, void 0, newChildren) : null\n        });\n    }\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(SlotClone, {\n        ...slotProps,\n        ref: forwardedRef,\n        children\n    });\n});\n_c1 = Slot;\nSlot.displayName = \"Slot\";\nvar SlotClone = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardedRef)=>{\n    const { children, ...slotProps } = props;\n    if (/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(children)) {\n        const childrenRef = getElementRef(children);\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(children, {\n            ...mergeProps(slotProps, children.props),\n            // @ts-ignore\n            ref: forwardedRef ? (0,_radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(forwardedRef, childrenRef) : childrenRef\n        });\n    }\n    return react__WEBPACK_IMPORTED_MODULE_0__.Children.count(children) > 1 ? react__WEBPACK_IMPORTED_MODULE_0__.Children.only(null) : null;\n});\n_c2 = SlotClone;\nSlotClone.displayName = \"SlotClone\";\nvar Slottable = (param)=>{\n    let { children } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n        children\n    });\n};\n_c3 = Slottable;\nfunction isSlottable(child) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(child) && child.type === Slottable;\n}\nfunction mergeProps(slotProps, childProps) {\n    const overrideProps = {\n        ...childProps\n    };\n    for(const propName in childProps){\n        const slotPropValue = slotProps[propName];\n        const childPropValue = childProps[propName];\n        const isHandler = /^on[A-Z]/.test(propName);\n        if (isHandler) {\n            if (slotPropValue && childPropValue) {\n                overrideProps[propName] = function() {\n                    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                        args[_key] = arguments[_key];\n                    }\n                    childPropValue(...args);\n                    slotPropValue(...args);\n                };\n            } else if (slotPropValue) {\n                overrideProps[propName] = slotPropValue;\n            }\n        } else if (propName === \"style\") {\n            overrideProps[propName] = {\n                ...slotPropValue,\n                ...childPropValue\n            };\n        } else if (propName === \"className\") {\n            overrideProps[propName] = [\n                slotPropValue,\n                childPropValue\n            ].filter(Boolean).join(\" \");\n        }\n    }\n    return {\n        ...slotProps,\n        ...overrideProps\n    };\n}\nfunction getElementRef(element) {\n    var _Object_getOwnPropertyDescriptor, _Object_getOwnPropertyDescriptor1;\n    let getter = (_Object_getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor(element.props, \"ref\")) === null || _Object_getOwnPropertyDescriptor === void 0 ? void 0 : _Object_getOwnPropertyDescriptor.get;\n    let mayWarn = getter && \"isReactWarning\" in getter && getter.isReactWarning;\n    if (mayWarn) {\n        return element.ref;\n    }\n    getter = (_Object_getOwnPropertyDescriptor1 = Object.getOwnPropertyDescriptor(element, \"ref\")) === null || _Object_getOwnPropertyDescriptor1 === void 0 ? void 0 : _Object_getOwnPropertyDescriptor1.get;\n    mayWarn = getter && \"isReactWarning\" in getter && getter.isReactWarning;\n    if (mayWarn) {\n        return element.props.ref;\n    }\n    return element.props.ref || element.ref;\n}\nvar Root = Slot;\n //# sourceMappingURL=index.mjs.map\nvar _c, _c1, _c2, _c3;\n$RefreshReg$(_c, \"Slot$React.forwardRef\");\n$RefreshReg$(_c1, \"Slot\");\n$RefreshReg$(_c2, \"SlotClone\");\n$RefreshReg$(_c3, \"Slottable\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@radix-ui/react-slot/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@radix-ui/react-switch/dist/index.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@radix-ui/react-switch/dist/index.mjs ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Root: function() { return /* binding */ Root; },\n/* harmony export */   Switch: function() { return /* binding */ Switch; },\n/* harmony export */   SwitchThumb: function() { return /* binding */ SwitchThumb; },\n/* harmony export */   Thumb: function() { return /* binding */ Thumb; },\n/* harmony export */   createSwitchScope: function() { return /* binding */ createSwitchScope; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _radix_ui_primitive__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @radix-ui/primitive */ \"(app-pages-browser)/./node_modules/@radix-ui/primitive/dist/index.mjs\");\n/* harmony import */ var _radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @radix-ui/react-compose-refs */ \"(app-pages-browser)/./node_modules/@radix-ui/react-compose-refs/dist/index.mjs\");\n/* harmony import */ var _radix_ui_react_context__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @radix-ui/react-context */ \"(app-pages-browser)/./node_modules/@radix-ui/react-context/dist/index.mjs\");\n/* harmony import */ var _radix_ui_react_use_controllable_state__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @radix-ui/react-use-controllable-state */ \"(app-pages-browser)/./node_modules/@radix-ui/react-use-controllable-state/dist/index.mjs\");\n/* harmony import */ var _radix_ui_react_use_previous__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @radix-ui/react-use-previous */ \"(app-pages-browser)/./node_modules/@radix-ui/react-use-previous/dist/index.mjs\");\n/* harmony import */ var _radix_ui_react_use_size__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @radix-ui/react-use-size */ \"(app-pages-browser)/./node_modules/@radix-ui/react-use-size/dist/index.mjs\");\n/* harmony import */ var _radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @radix-ui/react-primitive */ \"(app-pages-browser)/./node_modules/@radix-ui/react-primitive/dist/index.mjs\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-runtime.js\");\n/* __next_internal_client_entry_do_not_use__ Root,Switch,SwitchThumb,Thumb,createSwitchScope auto */ var _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$();\n// packages/react/switch/src/Switch.tsx\n\n\n\n\n\n\n\n\n\nvar SWITCH_NAME = \"Switch\";\nvar [createSwitchContext, createSwitchScope] = (0,_radix_ui_react_context__WEBPACK_IMPORTED_MODULE_2__.createContextScope)(SWITCH_NAME);\nvar [SwitchProvider, useSwitchContext] = createSwitchContext(SWITCH_NAME);\nvar Switch = /*#__PURE__*/ _s(react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(_c = _s((props, forwardedRef)=>{\n    _s();\n    const { __scopeSwitch, name, checked: checkedProp, defaultChecked, required, disabled, value = \"on\", onCheckedChange, form, ...switchProps } = props;\n    const [button, setButton] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);\n    const composedRefs = (0,_radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_3__.useComposedRefs)(forwardedRef, (node)=>setButton(node));\n    const hasConsumerStoppedPropagationRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n    const isFormControl = button ? form || !!button.closest(\"form\") : true;\n    const [checked = false, setChecked] = (0,_radix_ui_react_use_controllable_state__WEBPACK_IMPORTED_MODULE_4__.useControllableState)({\n        prop: checkedProp,\n        defaultProp: defaultChecked,\n        onChange: onCheckedChange\n    });\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(SwitchProvider, {\n        scope: __scopeSwitch,\n        checked,\n        disabled,\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_5__.Primitive.button, {\n                type: \"button\",\n                role: \"switch\",\n                \"aria-checked\": checked,\n                \"aria-required\": required,\n                \"data-state\": getState(checked),\n                \"data-disabled\": disabled ? \"\" : void 0,\n                disabled,\n                value,\n                ...switchProps,\n                ref: composedRefs,\n                onClick: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_6__.composeEventHandlers)(props.onClick, (event)=>{\n                    setChecked((prevChecked)=>!prevChecked);\n                    if (isFormControl) {\n                        hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();\n                        if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();\n                    }\n                })\n            }),\n            isFormControl && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(BubbleInput, {\n                control: button,\n                bubbles: !hasConsumerStoppedPropagationRef.current,\n                name,\n                value,\n                checked,\n                required,\n                disabled,\n                form,\n                style: {\n                    transform: \"translateX(-100%)\"\n                }\n            })\n        ]\n    });\n}, \"jWxT3EwL1KZLw2gHjJq0C5Kp79s=\", false, function() {\n    return [\n        _radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_3__.useComposedRefs,\n        _radix_ui_react_use_controllable_state__WEBPACK_IMPORTED_MODULE_4__.useControllableState\n    ];\n})), \"jWxT3EwL1KZLw2gHjJq0C5Kp79s=\", false, function() {\n    return [\n        _radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_3__.useComposedRefs,\n        _radix_ui_react_use_controllable_state__WEBPACK_IMPORTED_MODULE_4__.useControllableState\n    ];\n});\n_c1 = Switch;\nSwitch.displayName = SWITCH_NAME;\nvar THUMB_NAME = \"SwitchThumb\";\nvar SwitchThumb = /*#__PURE__*/ _s1(react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(_c2 = _s1((props, forwardedRef)=>{\n    _s1();\n    const { __scopeSwitch, ...thumbProps } = props;\n    const context = useSwitchContext(THUMB_NAME, __scopeSwitch);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_5__.Primitive.span, {\n        \"data-state\": getState(context.checked),\n        \"data-disabled\": context.disabled ? \"\" : void 0,\n        ...thumbProps,\n        ref: forwardedRef\n    });\n}, \"/Nri42KZ9XOPvQ2m28nXyo6MLS4=\", false, function() {\n    return [\n        useSwitchContext\n    ];\n})), \"/Nri42KZ9XOPvQ2m28nXyo6MLS4=\", false, function() {\n    return [\n        useSwitchContext\n    ];\n});\n_c3 = SwitchThumb;\nSwitchThumb.displayName = THUMB_NAME;\nvar BubbleInput = (props)=>{\n    _s2();\n    const { control, checked, bubbles = true, ...inputProps } = props;\n    const ref = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const prevChecked = (0,_radix_ui_react_use_previous__WEBPACK_IMPORTED_MODULE_7__.usePrevious)(checked);\n    const controlSize = (0,_radix_ui_react_use_size__WEBPACK_IMPORTED_MODULE_8__.useSize)(control);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const input = ref.current;\n        const inputProto = window.HTMLInputElement.prototype;\n        const descriptor = Object.getOwnPropertyDescriptor(inputProto, \"checked\");\n        const setChecked = descriptor.set;\n        if (prevChecked !== checked && setChecked) {\n            const event = new Event(\"click\", {\n                bubbles\n            });\n            setChecked.call(input, checked);\n            input.dispatchEvent(event);\n        }\n    }, [\n        prevChecked,\n        checked,\n        bubbles\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"input\", {\n        type: \"checkbox\",\n        \"aria-hidden\": true,\n        defaultChecked: checked,\n        ...inputProps,\n        tabIndex: -1,\n        ref,\n        style: {\n            ...props.style,\n            ...controlSize,\n            position: \"absolute\",\n            pointerEvents: \"none\",\n            opacity: 0,\n            margin: 0\n        }\n    });\n};\n_s2(BubbleInput, \"r158pQrOsqVpZVSSINkoAZAMqH8=\", false, function() {\n    return [\n        _radix_ui_react_use_previous__WEBPACK_IMPORTED_MODULE_7__.usePrevious,\n        _radix_ui_react_use_size__WEBPACK_IMPORTED_MODULE_8__.useSize\n    ];\n});\n_c4 = BubbleInput;\nfunction getState(checked) {\n    return checked ? \"checked\" : \"unchecked\";\n}\nvar Root = Switch;\nvar Thumb = SwitchThumb;\n //# sourceMappingURL=index.mjs.map\nvar _c, _c1, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Switch$React.forwardRef\");\n$RefreshReg$(_c1, \"Switch\");\n$RefreshReg$(_c2, \"SwitchThumb$React.forwardRef\");\n$RefreshReg$(_c3, \"SwitchThumb\");\n$RefreshReg$(_c4, \"BubbleInput\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@radix-ui/react-switch/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@radix-ui/react-use-callback-ref/dist/index.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@radix-ui/react-use-callback-ref/dist/index.mjs ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useCallbackRef: function() { return /* binding */ useCallbackRef; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n// packages/react/use-callback-ref/src/useCallbackRef.tsx\nvar _s = $RefreshSig$();\n\nfunction useCallbackRef(callback) {\n    _s();\n    const callbackRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(callback);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        callbackRef.current = callback;\n    });\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>function() {\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            var _callbackRef_current;\n            return (_callbackRef_current = callbackRef.current) === null || _callbackRef_current === void 0 ? void 0 : _callbackRef_current.call(callbackRef, ...args);\n        }, []);\n}\n_s(useCallbackRef, \"SmGaH/nKwK47PDNwL1mpt0Q/3Os=\");\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcmFkaXgtdWkvcmVhY3QtdXNlLWNhbGxiYWNrLXJlZi9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLHlEQUF5RDs7QUFDMUI7QUFDL0IsU0FBU0MsZUFBZUMsUUFBUTs7SUFDOUIsTUFBTUMsY0FBY0gseUNBQVksQ0FBQ0U7SUFDakNGLDRDQUFlLENBQUM7UUFDZEcsWUFBWUcsT0FBTyxHQUFHSjtJQUN4QjtJQUNBLE9BQU9GLDBDQUFhLENBQUMsSUFBTTs2Q0FBSVE7Z0JBQUFBOztnQkFBU0w7b0JBQUFBLHVCQUFBQSxZQUFZRyxPQUFPLGNBQW5CSCwyQ0FBQUEsMEJBQUFBLGdCQUF5Qks7V0FBTyxFQUFFO0FBQzVFO0dBTlNQO0FBU1AsQ0FDRixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0ByYWRpeC11aS9yZWFjdC11c2UtY2FsbGJhY2stcmVmL2Rpc3QvaW5kZXgubWpzPzExZjAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gcGFja2FnZXMvcmVhY3QvdXNlLWNhbGxiYWNrLXJlZi9zcmMvdXNlQ2FsbGJhY2tSZWYudHN4XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmZ1bmN0aW9uIHVzZUNhbGxiYWNrUmVmKGNhbGxiYWNrKSB7XG4gIGNvbnN0IGNhbGxiYWNrUmVmID0gUmVhY3QudXNlUmVmKGNhbGxiYWNrKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBjYWxsYmFja1JlZi5jdXJyZW50ID0gY2FsbGJhY2s7XG4gIH0pO1xuICByZXR1cm4gUmVhY3QudXNlTWVtbygoKSA9PiAoLi4uYXJncykgPT4gY2FsbGJhY2tSZWYuY3VycmVudD8uKC4uLmFyZ3MpLCBbXSk7XG59XG5leHBvcnQge1xuICB1c2VDYWxsYmFja1JlZlxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZUNhbGxiYWNrUmVmIiwiY2FsbGJhY2siLCJjYWxsYmFja1JlZiIsInVzZVJlZiIsInVzZUVmZmVjdCIsImN1cnJlbnQiLCJ1c2VNZW1vIiwiYXJncyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@radix-ui/react-use-callback-ref/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@radix-ui/react-use-controllable-state/dist/index.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/@radix-ui/react-use-controllable-state/dist/index.mjs ***!
  \****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useControllableState: function() { return /* binding */ useControllableState; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _radix_ui_react_use_callback_ref__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @radix-ui/react-use-callback-ref */ \"(app-pages-browser)/./node_modules/@radix-ui/react-use-callback-ref/dist/index.mjs\");\n// packages/react/use-controllable-state/src/useControllableState.tsx\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\nfunction useControllableState(param) {\n    let { prop, defaultProp, onChange = ()=>{} } = param;\n    _s();\n    const [uncontrolledProp, setUncontrolledProp] = useUncontrolledState({\n        defaultProp,\n        onChange\n    });\n    const isControlled = prop !== void 0;\n    const value = isControlled ? prop : uncontrolledProp;\n    const handleChange = (0,_radix_ui_react_use_callback_ref__WEBPACK_IMPORTED_MODULE_1__.useCallbackRef)(onChange);\n    const setValue = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((nextValue)=>{\n        if (isControlled) {\n            const setter = nextValue;\n            const value2 = typeof nextValue === \"function\" ? setter(prop) : nextValue;\n            if (value2 !== prop) handleChange(value2);\n        } else {\n            setUncontrolledProp(nextValue);\n        }\n    }, [\n        isControlled,\n        prop,\n        setUncontrolledProp,\n        handleChange\n    ]);\n    return [\n        value,\n        setValue\n    ];\n}\n_s(useControllableState, \"pnf37/jPbWy5FyBo0SyW8qgIfGA=\", false, function() {\n    return [\n        useUncontrolledState,\n        _radix_ui_react_use_callback_ref__WEBPACK_IMPORTED_MODULE_1__.useCallbackRef\n    ];\n});\nfunction useUncontrolledState(param) {\n    let { defaultProp, onChange } = param;\n    _s1();\n    const uncontrolledState = react__WEBPACK_IMPORTED_MODULE_0__.useState(defaultProp);\n    const [value] = uncontrolledState;\n    const prevValueRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(value);\n    const handleChange = (0,_radix_ui_react_use_callback_ref__WEBPACK_IMPORTED_MODULE_1__.useCallbackRef)(onChange);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (prevValueRef.current !== value) {\n            handleChange(value);\n            prevValueRef.current = value;\n        }\n    }, [\n        value,\n        prevValueRef,\n        handleChange\n    ]);\n    return uncontrolledState;\n}\n_s1(useUncontrolledState, \"WYmWcqnKHe65L/fGBBy1wqlZl58=\", false, function() {\n    return [\n        _radix_ui_react_use_callback_ref__WEBPACK_IMPORTED_MODULE_1__.useCallbackRef\n    ];\n});\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcmFkaXgtdWkvcmVhY3QtdXNlLWNvbnRyb2xsYWJsZS1zdGF0ZS9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxxRUFBcUU7O0FBQ3RDO0FBQ21DO0FBQ2xFLFNBQVNFLHFCQUFxQixLQUs3QjtRQUw2QixFQUM1QkMsSUFBSSxFQUNKQyxXQUFXLEVBQ1hDLFdBQVcsS0FDWCxDQUFDLEVBQ0YsR0FMNkI7O0lBTTVCLE1BQU0sQ0FBQ0Msa0JBQWtCQyxvQkFBb0IsR0FBR0MscUJBQXFCO1FBQUVKO1FBQWFDO0lBQVM7SUFDN0YsTUFBTUksZUFBZU4sU0FBUyxLQUFLO0lBQ25DLE1BQU1PLFFBQVFELGVBQWVOLE9BQU9HO0lBQ3BDLE1BQU1LLGVBQWVWLGdGQUFjQSxDQUFDSTtJQUNwQyxNQUFNTyxXQUFXWiw4Q0FBaUIsQ0FDaEMsQ0FBQ2M7UUFDQyxJQUFJTCxjQUFjO1lBQ2hCLE1BQU1NLFNBQVNEO1lBQ2YsTUFBTUUsU0FBUyxPQUFPRixjQUFjLGFBQWFDLE9BQU9aLFFBQVFXO1lBQ2hFLElBQUlFLFdBQVdiLE1BQU1RLGFBQWFLO1FBQ3BDLE9BQU87WUFDTFQsb0JBQW9CTztRQUN0QjtJQUNGLEdBQ0E7UUFBQ0w7UUFBY047UUFBTUk7UUFBcUJJO0tBQWE7SUFFekQsT0FBTztRQUFDRDtRQUFPRTtLQUFTO0FBQzFCO0dBdkJTVjs7UUFNeUNNO1FBRzNCUCw0RUFBY0E7OztBQWVyQyxTQUFTTyxxQkFBcUIsS0FHN0I7UUFINkIsRUFDNUJKLFdBQVcsRUFDWEMsUUFBUSxFQUNULEdBSDZCOztJQUk1QixNQUFNWSxvQkFBb0JqQiwyQ0FBYyxDQUFDSTtJQUN6QyxNQUFNLENBQUNNLE1BQU0sR0FBR087SUFDaEIsTUFBTUUsZUFBZW5CLHlDQUFZLENBQUNVO0lBQ2xDLE1BQU1DLGVBQWVWLGdGQUFjQSxDQUFDSTtJQUNwQ0wsNENBQWUsQ0FBQztRQUNkLElBQUltQixhQUFhRyxPQUFPLEtBQUtaLE9BQU87WUFDbENDLGFBQWFEO1lBQ2JTLGFBQWFHLE9BQU8sR0FBR1o7UUFDekI7SUFDRixHQUFHO1FBQUNBO1FBQU9TO1FBQWNSO0tBQWE7SUFDdEMsT0FBT007QUFDVDtJQWZTVDs7UUFPY1AsNEVBQWNBOzs7QUFXbkMsQ0FDRixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0ByYWRpeC11aS9yZWFjdC11c2UtY29udHJvbGxhYmxlLXN0YXRlL2Rpc3QvaW5kZXgubWpzPzBhZjYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gcGFja2FnZXMvcmVhY3QvdXNlLWNvbnRyb2xsYWJsZS1zdGF0ZS9zcmMvdXNlQ29udHJvbGxhYmxlU3RhdGUudHN4XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZUNhbGxiYWNrUmVmIH0gZnJvbSBcIkByYWRpeC11aS9yZWFjdC11c2UtY2FsbGJhY2stcmVmXCI7XG5mdW5jdGlvbiB1c2VDb250cm9sbGFibGVTdGF0ZSh7XG4gIHByb3AsXG4gIGRlZmF1bHRQcm9wLFxuICBvbkNoYW5nZSA9ICgpID0+IHtcbiAgfVxufSkge1xuICBjb25zdCBbdW5jb250cm9sbGVkUHJvcCwgc2V0VW5jb250cm9sbGVkUHJvcF0gPSB1c2VVbmNvbnRyb2xsZWRTdGF0ZSh7IGRlZmF1bHRQcm9wLCBvbkNoYW5nZSB9KTtcbiAgY29uc3QgaXNDb250cm9sbGVkID0gcHJvcCAhPT0gdm9pZCAwO1xuICBjb25zdCB2YWx1ZSA9IGlzQ29udHJvbGxlZCA/IHByb3AgOiB1bmNvbnRyb2xsZWRQcm9wO1xuICBjb25zdCBoYW5kbGVDaGFuZ2UgPSB1c2VDYWxsYmFja1JlZihvbkNoYW5nZSk7XG4gIGNvbnN0IHNldFZhbHVlID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKG5leHRWYWx1ZSkgPT4ge1xuICAgICAgaWYgKGlzQ29udHJvbGxlZCkge1xuICAgICAgICBjb25zdCBzZXR0ZXIgPSBuZXh0VmFsdWU7XG4gICAgICAgIGNvbnN0IHZhbHVlMiA9IHR5cGVvZiBuZXh0VmFsdWUgPT09IFwiZnVuY3Rpb25cIiA/IHNldHRlcihwcm9wKSA6IG5leHRWYWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlMiAhPT0gcHJvcCkgaGFuZGxlQ2hhbmdlKHZhbHVlMik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRVbmNvbnRyb2xsZWRQcm9wKG5leHRWYWx1ZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBbaXNDb250cm9sbGVkLCBwcm9wLCBzZXRVbmNvbnRyb2xsZWRQcm9wLCBoYW5kbGVDaGFuZ2VdXG4gICk7XG4gIHJldHVybiBbdmFsdWUsIHNldFZhbHVlXTtcbn1cbmZ1bmN0aW9uIHVzZVVuY29udHJvbGxlZFN0YXRlKHtcbiAgZGVmYXVsdFByb3AsXG4gIG9uQ2hhbmdlXG59KSB7XG4gIGNvbnN0IHVuY29udHJvbGxlZFN0YXRlID0gUmVhY3QudXNlU3RhdGUoZGVmYXVsdFByb3ApO1xuICBjb25zdCBbdmFsdWVdID0gdW5jb250cm9sbGVkU3RhdGU7XG4gIGNvbnN0IHByZXZWYWx1ZVJlZiA9IFJlYWN0LnVzZVJlZih2YWx1ZSk7XG4gIGNvbnN0IGhhbmRsZUNoYW5nZSA9IHVzZUNhbGxiYWNrUmVmKG9uQ2hhbmdlKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAocHJldlZhbHVlUmVmLmN1cnJlbnQgIT09IHZhbHVlKSB7XG4gICAgICBoYW5kbGVDaGFuZ2UodmFsdWUpO1xuICAgICAgcHJldlZhbHVlUmVmLmN1cnJlbnQgPSB2YWx1ZTtcbiAgICB9XG4gIH0sIFt2YWx1ZSwgcHJldlZhbHVlUmVmLCBoYW5kbGVDaGFuZ2VdKTtcbiAgcmV0dXJuIHVuY29udHJvbGxlZFN0YXRlO1xufVxuZXhwb3J0IHtcbiAgdXNlQ29udHJvbGxhYmxlU3RhdGVcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwXG4iXSwibmFtZXMiOlsiUmVhY3QiLCJ1c2VDYWxsYmFja1JlZiIsInVzZUNvbnRyb2xsYWJsZVN0YXRlIiwicHJvcCIsImRlZmF1bHRQcm9wIiwib25DaGFuZ2UiLCJ1bmNvbnRyb2xsZWRQcm9wIiwic2V0VW5jb250cm9sbGVkUHJvcCIsInVzZVVuY29udHJvbGxlZFN0YXRlIiwiaXNDb250cm9sbGVkIiwidmFsdWUiLCJoYW5kbGVDaGFuZ2UiLCJzZXRWYWx1ZSIsInVzZUNhbGxiYWNrIiwibmV4dFZhbHVlIiwic2V0dGVyIiwidmFsdWUyIiwidW5jb250cm9sbGVkU3RhdGUiLCJ1c2VTdGF0ZSIsInByZXZWYWx1ZVJlZiIsInVzZVJlZiIsInVzZUVmZmVjdCIsImN1cnJlbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@radix-ui/react-use-controllable-state/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@radix-ui/react-use-layout-effect/dist/index.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@radix-ui/react-use-layout-effect/dist/index.mjs ***!
  \***********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useLayoutEffect: function() { return /* binding */ useLayoutEffect2; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n// packages/react/use-layout-effect/src/useLayoutEffect.tsx\nvar _globalThis;\n\nvar useLayoutEffect2 = Boolean((_globalThis = globalThis) === null || _globalThis === void 0 ? void 0 : _globalThis.document) ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : ()=>{};\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcmFkaXgtdWkvcmVhY3QtdXNlLWxheW91dC1lZmZlY3QvZGlzdC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwyREFBMkQ7SUFFNUJBO0FBREE7QUFDL0IsSUFBSUUsbUJBQW1CQyxTQUFRSCxjQUFBQSx3QkFBQUEsa0NBQUFBLFlBQVlJLFFBQVEsSUFBSUgsa0RBQXFCLEdBQUcsS0FDL0U7QUFHRSxDQUNGLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHJhZGl4LXVpL3JlYWN0LXVzZS1sYXlvdXQtZWZmZWN0L2Rpc3QvaW5kZXgubWpzPzJkNmYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gcGFja2FnZXMvcmVhY3QvdXNlLWxheW91dC1lZmZlY3Qvc3JjL3VzZUxheW91dEVmZmVjdC50c3hcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xudmFyIHVzZUxheW91dEVmZmVjdDIgPSBCb29sZWFuKGdsb2JhbFRoaXM/LmRvY3VtZW50KSA/IFJlYWN0LnVzZUxheW91dEVmZmVjdCA6ICgpID0+IHtcbn07XG5leHBvcnQge1xuICB1c2VMYXlvdXRFZmZlY3QyIGFzIHVzZUxheW91dEVmZmVjdFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJnbG9iYWxUaGlzIiwiUmVhY3QiLCJ1c2VMYXlvdXRFZmZlY3QyIiwiQm9vbGVhbiIsImRvY3VtZW50IiwidXNlTGF5b3V0RWZmZWN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@radix-ui/react-use-layout-effect/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@radix-ui/react-use-previous/dist/index.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@radix-ui/react-use-previous/dist/index.mjs ***!
  \******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   usePrevious: function() { return /* binding */ usePrevious; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n// packages/react/use-previous/src/usePrevious.tsx\nvar _s = $RefreshSig$();\n\nfunction usePrevious(value) {\n    _s();\n    const ref = react__WEBPACK_IMPORTED_MODULE_0__.useRef({\n        value,\n        previous: value\n    });\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        if (ref.current.value !== value) {\n            ref.current.previous = ref.current.value;\n            ref.current.value = value;\n        }\n        return ref.current.previous;\n    }, [\n        value\n    ]);\n}\n_s(usePrevious, \"ByE6CK57tkoA8UB2NSxtIltRrK4=\");\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcmFkaXgtdWkvcmVhY3QtdXNlLXByZXZpb3VzL2Rpc3QvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsa0RBQWtEOztBQUNuQjtBQUMvQixTQUFTQyxZQUFZQyxLQUFLOztJQUN4QixNQUFNQyxNQUFNSCx5Q0FBWSxDQUFDO1FBQUVFO1FBQU9HLFVBQVVIO0lBQU07SUFDbEQsT0FBT0YsMENBQWEsQ0FBQztRQUNuQixJQUFJRyxJQUFJSSxPQUFPLENBQUNMLEtBQUssS0FBS0EsT0FBTztZQUMvQkMsSUFBSUksT0FBTyxDQUFDRixRQUFRLEdBQUdGLElBQUlJLE9BQU8sQ0FBQ0wsS0FBSztZQUN4Q0MsSUFBSUksT0FBTyxDQUFDTCxLQUFLLEdBQUdBO1FBQ3RCO1FBQ0EsT0FBT0MsSUFBSUksT0FBTyxDQUFDRixRQUFRO0lBQzdCLEdBQUc7UUFBQ0g7S0FBTTtBQUNaO0dBVFNEO0FBWVAsQ0FDRixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0ByYWRpeC11aS9yZWFjdC11c2UtcHJldmlvdXMvZGlzdC9pbmRleC5tanM/YTBhZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBwYWNrYWdlcy9yZWFjdC91c2UtcHJldmlvdXMvc3JjL3VzZVByZXZpb3VzLnRzeFxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5mdW5jdGlvbiB1c2VQcmV2aW91cyh2YWx1ZSkge1xuICBjb25zdCByZWYgPSBSZWFjdC51c2VSZWYoeyB2YWx1ZSwgcHJldmlvdXM6IHZhbHVlIH0pO1xuICByZXR1cm4gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgaWYgKHJlZi5jdXJyZW50LnZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgcmVmLmN1cnJlbnQucHJldmlvdXMgPSByZWYuY3VycmVudC52YWx1ZTtcbiAgICAgIHJlZi5jdXJyZW50LnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiByZWYuY3VycmVudC5wcmV2aW91cztcbiAgfSwgW3ZhbHVlXSk7XG59XG5leHBvcnQge1xuICB1c2VQcmV2aW91c1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZVByZXZpb3VzIiwidmFsdWUiLCJyZWYiLCJ1c2VSZWYiLCJwcmV2aW91cyIsInVzZU1lbW8iLCJjdXJyZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@radix-ui/react-use-previous/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@radix-ui/react-use-size/dist/index.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/@radix-ui/react-use-size/dist/index.mjs ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSize: function() { return /* binding */ useSize; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _radix_ui_react_use_layout_effect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @radix-ui/react-use-layout-effect */ \"(app-pages-browser)/./node_modules/@radix-ui/react-use-layout-effect/dist/index.mjs\");\n// packages/react/use-size/src/useSize.tsx\nvar _s = $RefreshSig$();\n\n\nfunction useSize(element) {\n    _s();\n    const [size, setSize] = react__WEBPACK_IMPORTED_MODULE_0__.useState(void 0);\n    (0,_radix_ui_react_use_layout_effect__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect)(()=>{\n        if (element) {\n            setSize({\n                width: element.offsetWidth,\n                height: element.offsetHeight\n            });\n            const resizeObserver = new ResizeObserver((entries)=>{\n                if (!Array.isArray(entries)) {\n                    return;\n                }\n                if (!entries.length) {\n                    return;\n                }\n                const entry = entries[0];\n                let width;\n                let height;\n                if (\"borderBoxSize\" in entry) {\n                    const borderSizeEntry = entry[\"borderBoxSize\"];\n                    const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;\n                    width = borderSize[\"inlineSize\"];\n                    height = borderSize[\"blockSize\"];\n                } else {\n                    width = element.offsetWidth;\n                    height = element.offsetHeight;\n                }\n                setSize({\n                    width,\n                    height\n                });\n            });\n            resizeObserver.observe(element, {\n                box: \"border-box\"\n            });\n            return ()=>resizeObserver.unobserve(element);\n        } else {\n            setSize(void 0);\n        }\n    }, [\n        element\n    ]);\n    return size;\n}\n_s(useSize, \"dTfGPqGTa13JL7BnrteTFfY0AYg=\");\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcmFkaXgtdWkvcmVhY3QtdXNlLXNpemUvZGlzdC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsMENBQTBDOztBQUNYO0FBQ3FDO0FBQ3BFLFNBQVNFLFFBQVFDLE9BQU87O0lBQ3RCLE1BQU0sQ0FBQ0MsTUFBTUMsUUFBUSxHQUFHTCwyQ0FBYyxDQUFDLEtBQUs7SUFDNUNDLGtGQUFlQSxDQUFDO1FBQ2QsSUFBSUUsU0FBUztZQUNYRSxRQUFRO2dCQUFFRSxPQUFPSixRQUFRSyxXQUFXO2dCQUFFQyxRQUFRTixRQUFRTyxZQUFZO1lBQUM7WUFDbkUsTUFBTUMsaUJBQWlCLElBQUlDLGVBQWUsQ0FBQ0M7Z0JBQ3pDLElBQUksQ0FBQ0MsTUFBTUMsT0FBTyxDQUFDRixVQUFVO29CQUMzQjtnQkFDRjtnQkFDQSxJQUFJLENBQUNBLFFBQVFHLE1BQU0sRUFBRTtvQkFDbkI7Z0JBQ0Y7Z0JBQ0EsTUFBTUMsUUFBUUosT0FBTyxDQUFDLEVBQUU7Z0JBQ3hCLElBQUlOO2dCQUNKLElBQUlFO2dCQUNKLElBQUksbUJBQW1CUSxPQUFPO29CQUM1QixNQUFNQyxrQkFBa0JELEtBQUssQ0FBQyxnQkFBZ0I7b0JBQzlDLE1BQU1FLGFBQWFMLE1BQU1DLE9BQU8sQ0FBQ0csbUJBQW1CQSxlQUFlLENBQUMsRUFBRSxHQUFHQTtvQkFDekVYLFFBQVFZLFVBQVUsQ0FBQyxhQUFhO29CQUNoQ1YsU0FBU1UsVUFBVSxDQUFDLFlBQVk7Z0JBQ2xDLE9BQU87b0JBQ0xaLFFBQVFKLFFBQVFLLFdBQVc7b0JBQzNCQyxTQUFTTixRQUFRTyxZQUFZO2dCQUMvQjtnQkFDQUwsUUFBUTtvQkFBRUU7b0JBQU9FO2dCQUFPO1lBQzFCO1lBQ0FFLGVBQWVTLE9BQU8sQ0FBQ2pCLFNBQVM7Z0JBQUVrQixLQUFLO1lBQWE7WUFDcEQsT0FBTyxJQUFNVixlQUFlVyxTQUFTLENBQUNuQjtRQUN4QyxPQUFPO1lBQ0xFLFFBQVEsS0FBSztRQUNmO0lBQ0YsR0FBRztRQUFDRjtLQUFRO0lBQ1osT0FBT0M7QUFDVDtHQWpDU0Y7QUFvQ1AsQ0FDRixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0ByYWRpeC11aS9yZWFjdC11c2Utc2l6ZS9kaXN0L2luZGV4Lm1qcz9mZTc5Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHBhY2thZ2VzL3JlYWN0L3VzZS1zaXplL3NyYy91c2VTaXplLnRzeFxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VMYXlvdXRFZmZlY3QgfSBmcm9tIFwiQHJhZGl4LXVpL3JlYWN0LXVzZS1sYXlvdXQtZWZmZWN0XCI7XG5mdW5jdGlvbiB1c2VTaXplKGVsZW1lbnQpIHtcbiAgY29uc3QgW3NpemUsIHNldFNpemVdID0gUmVhY3QudXNlU3RhdGUodm9pZCAwKTtcbiAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICBpZiAoZWxlbWVudCkge1xuICAgICAgc2V0U2l6ZSh7IHdpZHRoOiBlbGVtZW50Lm9mZnNldFdpZHRoLCBoZWlnaHQ6IGVsZW1lbnQub2Zmc2V0SGVpZ2h0IH0pO1xuICAgICAgY29uc3QgcmVzaXplT2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoKGVudHJpZXMpID0+IHtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGVudHJpZXMpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZW50cmllcy5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZW50cnkgPSBlbnRyaWVzWzBdO1xuICAgICAgICBsZXQgd2lkdGg7XG4gICAgICAgIGxldCBoZWlnaHQ7XG4gICAgICAgIGlmIChcImJvcmRlckJveFNpemVcIiBpbiBlbnRyeSkge1xuICAgICAgICAgIGNvbnN0IGJvcmRlclNpemVFbnRyeSA9IGVudHJ5W1wiYm9yZGVyQm94U2l6ZVwiXTtcbiAgICAgICAgICBjb25zdCBib3JkZXJTaXplID0gQXJyYXkuaXNBcnJheShib3JkZXJTaXplRW50cnkpID8gYm9yZGVyU2l6ZUVudHJ5WzBdIDogYm9yZGVyU2l6ZUVudHJ5O1xuICAgICAgICAgIHdpZHRoID0gYm9yZGVyU2l6ZVtcImlubGluZVNpemVcIl07XG4gICAgICAgICAgaGVpZ2h0ID0gYm9yZGVyU2l6ZVtcImJsb2NrU2l6ZVwiXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3aWR0aCA9IGVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gICAgICAgICAgaGVpZ2h0ID0gZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgc2V0U2l6ZSh7IHdpZHRoLCBoZWlnaHQgfSk7XG4gICAgICB9KTtcbiAgICAgIHJlc2l6ZU9ic2VydmVyLm9ic2VydmUoZWxlbWVudCwgeyBib3g6IFwiYm9yZGVyLWJveFwiIH0pO1xuICAgICAgcmV0dXJuICgpID0+IHJlc2l6ZU9ic2VydmVyLnVub2JzZXJ2ZShlbGVtZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0U2l6ZSh2b2lkIDApO1xuICAgIH1cbiAgfSwgW2VsZW1lbnRdKTtcbiAgcmV0dXJuIHNpemU7XG59XG5leHBvcnQge1xuICB1c2VTaXplXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcFxuIl0sIm5hbWVzIjpbIlJlYWN0IiwidXNlTGF5b3V0RWZmZWN0IiwidXNlU2l6ZSIsImVsZW1lbnQiLCJzaXplIiwic2V0U2l6ZSIsInVzZVN0YXRlIiwid2lkdGgiLCJvZmZzZXRXaWR0aCIsImhlaWdodCIsIm9mZnNldEhlaWdodCIsInJlc2l6ZU9ic2VydmVyIiwiUmVzaXplT2JzZXJ2ZXIiLCJlbnRyaWVzIiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwiZW50cnkiLCJib3JkZXJTaXplRW50cnkiLCJib3JkZXJTaXplIiwib2JzZXJ2ZSIsImJveCIsInVub2JzZXJ2ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@radix-ui/react-use-size/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/class-variance-authority/dist/index.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/class-variance-authority/dist/index.mjs ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cva: function() { return /* binding */ cva; },\n/* harmony export */   cx: function() { return /* binding */ cx; }\n/* harmony export */ });\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! clsx */ \"(app-pages-browser)/./node_modules/clsx/dist/clsx.mjs\");\n/**\n * Copyright 2022 Joe Bell. All rights reserved.\n *\n * This file is licensed to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with the\n * License. You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR REPRESENTATIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */ \nconst falsyToString = (value)=>typeof value === \"boolean\" ? \"\".concat(value) : value === 0 ? \"0\" : value;\nconst cx = clsx__WEBPACK_IMPORTED_MODULE_0__.clsx;\nconst cva = (base, config)=>(props)=>{\n        var _config_compoundVariants;\n        if ((config === null || config === void 0 ? void 0 : config.variants) == null) return cx(base, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);\n        const { variants, defaultVariants } = config;\n        const getVariantClassNames = Object.keys(variants).map((variant)=>{\n            const variantProp = props === null || props === void 0 ? void 0 : props[variant];\n            const defaultVariantProp = defaultVariants === null || defaultVariants === void 0 ? void 0 : defaultVariants[variant];\n            if (variantProp === null) return null;\n            const variantKey = falsyToString(variantProp) || falsyToString(defaultVariantProp);\n            return variants[variant][variantKey];\n        });\n        const propsWithoutUndefined = props && Object.entries(props).reduce((acc, param)=>{\n            let [key, value] = param;\n            if (value === undefined) {\n                return acc;\n            }\n            acc[key] = value;\n            return acc;\n        }, {});\n        const getCompoundVariantClassNames = config === null || config === void 0 ? void 0 : (_config_compoundVariants = config.compoundVariants) === null || _config_compoundVariants === void 0 ? void 0 : _config_compoundVariants.reduce((acc, param)=>{\n            let { class: cvClass, className: cvClassName, ...compoundVariantOptions } = param;\n            return Object.entries(compoundVariantOptions).every((param)=>{\n                let [key, value] = param;\n                return Array.isArray(value) ? value.includes({\n                    ...defaultVariants,\n                    ...propsWithoutUndefined\n                }[key]) : ({\n                    ...defaultVariants,\n                    ...propsWithoutUndefined\n                })[key] === value;\n            }) ? [\n                ...acc,\n                cvClass,\n                cvClassName\n            ] : acc;\n        }, []);\n        return cx(base, getVariantClassNames, getCompoundVariantClassNames, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);\n    };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jbGFzcy12YXJpYW5jZS1hdXRob3JpdHkvZGlzdC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7O0NBY0MsR0FBK0I7QUFDaEMsTUFBTUMsZ0JBQWdCLENBQUNDLFFBQVEsT0FBT0EsVUFBVSxZQUFZLEdBQVMsT0FBTkEsU0FBVUEsVUFBVSxJQUFJLE1BQU1BO0FBQ3RGLE1BQU1DLEtBQUtILHNDQUFJQSxDQUFDO0FBQ2hCLE1BQU1JLE1BQU0sQ0FBQ0MsTUFBTUMsU0FBUyxDQUFDQztRQUM1QixJQUFJQztRQUNKLElBQUksQ0FBQ0YsV0FBVyxRQUFRQSxXQUFXLEtBQUssSUFBSSxLQUFLLElBQUlBLE9BQU9HLFFBQVEsS0FBSyxNQUFNLE9BQU9OLEdBQUdFLE1BQU1FLFVBQVUsUUFBUUEsVUFBVSxLQUFLLElBQUksS0FBSyxJQUFJQSxNQUFNRyxLQUFLLEVBQUVILFVBQVUsUUFBUUEsVUFBVSxLQUFLLElBQUksS0FBSyxJQUFJQSxNQUFNSSxTQUFTO1FBQ3ZOLE1BQU0sRUFBRUYsUUFBUSxFQUFFRyxlQUFlLEVBQUUsR0FBR047UUFDdEMsTUFBTU8sdUJBQXVCQyxPQUFPQyxJQUFJLENBQUNOLFVBQVVPLEdBQUcsQ0FBQyxDQUFDQztZQUNwRCxNQUFNQyxjQUFjWCxVQUFVLFFBQVFBLFVBQVUsS0FBSyxJQUFJLEtBQUssSUFBSUEsS0FBSyxDQUFDVSxRQUFRO1lBQ2hGLE1BQU1FLHFCQUFxQlAsb0JBQW9CLFFBQVFBLG9CQUFvQixLQUFLLElBQUksS0FBSyxJQUFJQSxlQUFlLENBQUNLLFFBQVE7WUFDckgsSUFBSUMsZ0JBQWdCLE1BQU0sT0FBTztZQUNqQyxNQUFNRSxhQUFhbkIsY0FBY2lCLGdCQUFnQmpCLGNBQWNrQjtZQUMvRCxPQUFPVixRQUFRLENBQUNRLFFBQVEsQ0FBQ0csV0FBVztRQUN4QztRQUNBLE1BQU1DLHdCQUF3QmQsU0FBU08sT0FBT1EsT0FBTyxDQUFDZixPQUFPZ0IsTUFBTSxDQUFDLENBQUNDLEtBQUtDO1lBQ3RFLElBQUksQ0FBQ0MsS0FBS3hCLE1BQU0sR0FBR3VCO1lBQ25CLElBQUl2QixVQUFVeUIsV0FBVztnQkFDckIsT0FBT0g7WUFDWDtZQUNBQSxHQUFHLENBQUNFLElBQUksR0FBR3hCO1lBQ1gsT0FBT3NCO1FBQ1gsR0FBRyxDQUFDO1FBQ0osTUFBTUksK0JBQStCdEIsV0FBVyxRQUFRQSxXQUFXLEtBQUssSUFBSSxLQUFLLElBQUksQ0FBQ0UsMkJBQTJCRixPQUFPdUIsZ0JBQWdCLE1BQU0sUUFBUXJCLDZCQUE2QixLQUFLLElBQUksS0FBSyxJQUFJQSx5QkFBeUJlLE1BQU0sQ0FBQyxDQUFDQyxLQUFLQztZQUN2TyxJQUFJLEVBQUVmLE9BQU9vQixPQUFPLEVBQUVuQixXQUFXb0IsV0FBVyxFQUFFLEdBQUdDLHdCQUF3QixHQUFHUDtZQUM1RSxPQUFPWCxPQUFPUSxPQUFPLENBQUNVLHdCQUF3QkMsS0FBSyxDQUFDLENBQUNSO2dCQUNqRCxJQUFJLENBQUNDLEtBQUt4QixNQUFNLEdBQUd1QjtnQkFDbkIsT0FBT1MsTUFBTUMsT0FBTyxDQUFDakMsU0FBU0EsTUFBTWtDLFFBQVEsQ0FBQztvQkFDekMsR0FBR3hCLGVBQWU7b0JBQ2xCLEdBQUdTLHFCQUFxQjtnQkFDNUIsQ0FBQyxDQUFDSyxJQUFJLElBQUksQ0FBQztvQkFDUCxHQUFHZCxlQUFlO29CQUNsQixHQUFHUyxxQkFBcUI7Z0JBQzVCLEVBQUUsQ0FBQ0ssSUFBSSxLQUFLeEI7WUFDaEIsS0FBSzttQkFDRXNCO2dCQUNITTtnQkFDQUM7YUFDSCxHQUFHUDtRQUNSLEdBQUcsRUFBRTtRQUNMLE9BQU9yQixHQUFHRSxNQUFNUSxzQkFBc0JlLDhCQUE4QnJCLFVBQVUsUUFBUUEsVUFBVSxLQUFLLElBQUksS0FBSyxJQUFJQSxNQUFNRyxLQUFLLEVBQUVILFVBQVUsUUFBUUEsVUFBVSxLQUFLLElBQUksS0FBSyxJQUFJQSxNQUFNSSxTQUFTO0lBQ2hNLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2NsYXNzLXZhcmlhbmNlLWF1dGhvcml0eS9kaXN0L2luZGV4Lm1qcz8zMjExIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMjIgSm9lIEJlbGwuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBmaWxlIGlzIGxpY2Vuc2VkIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wXG4gKiAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZVxuICogTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVRcbiAqIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlXG4gKiBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlclxuICogdGhlIExpY2Vuc2UuXG4gKi8gaW1wb3J0IHsgY2xzeCB9IGZyb20gXCJjbHN4XCI7XG5jb25zdCBmYWxzeVRvU3RyaW5nID0gKHZhbHVlKT0+dHlwZW9mIHZhbHVlID09PSBcImJvb2xlYW5cIiA/IGAke3ZhbHVlfWAgOiB2YWx1ZSA9PT0gMCA/IFwiMFwiIDogdmFsdWU7XG5leHBvcnQgY29uc3QgY3ggPSBjbHN4O1xuZXhwb3J0IGNvbnN0IGN2YSA9IChiYXNlLCBjb25maWcpPT4ocHJvcHMpPT57XG4gICAgICAgIHZhciBfY29uZmlnX2NvbXBvdW5kVmFyaWFudHM7XG4gICAgICAgIGlmICgoY29uZmlnID09PSBudWxsIHx8IGNvbmZpZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29uZmlnLnZhcmlhbnRzKSA9PSBudWxsKSByZXR1cm4gY3goYmFzZSwgcHJvcHMgPT09IG51bGwgfHwgcHJvcHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHByb3BzLmNsYXNzLCBwcm9wcyA9PT0gbnVsbCB8fCBwcm9wcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcHJvcHMuY2xhc3NOYW1lKTtcbiAgICAgICAgY29uc3QgeyB2YXJpYW50cywgZGVmYXVsdFZhcmlhbnRzIH0gPSBjb25maWc7XG4gICAgICAgIGNvbnN0IGdldFZhcmlhbnRDbGFzc05hbWVzID0gT2JqZWN0LmtleXModmFyaWFudHMpLm1hcCgodmFyaWFudCk9PntcbiAgICAgICAgICAgIGNvbnN0IHZhcmlhbnRQcm9wID0gcHJvcHMgPT09IG51bGwgfHwgcHJvcHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHByb3BzW3ZhcmlhbnRdO1xuICAgICAgICAgICAgY29uc3QgZGVmYXVsdFZhcmlhbnRQcm9wID0gZGVmYXVsdFZhcmlhbnRzID09PSBudWxsIHx8IGRlZmF1bHRWYXJpYW50cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVmYXVsdFZhcmlhbnRzW3ZhcmlhbnRdO1xuICAgICAgICAgICAgaWYgKHZhcmlhbnRQcm9wID09PSBudWxsKSByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIGNvbnN0IHZhcmlhbnRLZXkgPSBmYWxzeVRvU3RyaW5nKHZhcmlhbnRQcm9wKSB8fCBmYWxzeVRvU3RyaW5nKGRlZmF1bHRWYXJpYW50UHJvcCk7XG4gICAgICAgICAgICByZXR1cm4gdmFyaWFudHNbdmFyaWFudF1bdmFyaWFudEtleV07XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBwcm9wc1dpdGhvdXRVbmRlZmluZWQgPSBwcm9wcyAmJiBPYmplY3QuZW50cmllcyhwcm9wcykucmVkdWNlKChhY2MsIHBhcmFtKT0+e1xuICAgICAgICAgICAgbGV0IFtrZXksIHZhbHVlXSA9IHBhcmFtO1xuICAgICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWNjW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIH0sIHt9KTtcbiAgICAgICAgY29uc3QgZ2V0Q29tcG91bmRWYXJpYW50Q2xhc3NOYW1lcyA9IGNvbmZpZyA9PT0gbnVsbCB8fCBjb25maWcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfY29uZmlnX2NvbXBvdW5kVmFyaWFudHMgPSBjb25maWcuY29tcG91bmRWYXJpYW50cykgPT09IG51bGwgfHwgX2NvbmZpZ19jb21wb3VuZFZhcmlhbnRzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfY29uZmlnX2NvbXBvdW5kVmFyaWFudHMucmVkdWNlKChhY2MsIHBhcmFtKT0+e1xuICAgICAgICAgICAgbGV0IHsgY2xhc3M6IGN2Q2xhc3MsIGNsYXNzTmFtZTogY3ZDbGFzc05hbWUsIC4uLmNvbXBvdW5kVmFyaWFudE9wdGlvbnMgfSA9IHBhcmFtO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKGNvbXBvdW5kVmFyaWFudE9wdGlvbnMpLmV2ZXJ5KChwYXJhbSk9PntcbiAgICAgICAgICAgICAgICBsZXQgW2tleSwgdmFsdWVdID0gcGFyYW07XG4gICAgICAgICAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUuaW5jbHVkZXMoe1xuICAgICAgICAgICAgICAgICAgICAuLi5kZWZhdWx0VmFyaWFudHMsXG4gICAgICAgICAgICAgICAgICAgIC4uLnByb3BzV2l0aG91dFVuZGVmaW5lZFxuICAgICAgICAgICAgICAgIH1ba2V5XSkgOiAoe1xuICAgICAgICAgICAgICAgICAgICAuLi5kZWZhdWx0VmFyaWFudHMsXG4gICAgICAgICAgICAgICAgICAgIC4uLnByb3BzV2l0aG91dFVuZGVmaW5lZFxuICAgICAgICAgICAgICAgIH0pW2tleV0gPT09IHZhbHVlO1xuICAgICAgICAgICAgfSkgPyBbXG4gICAgICAgICAgICAgICAgLi4uYWNjLFxuICAgICAgICAgICAgICAgIGN2Q2xhc3MsXG4gICAgICAgICAgICAgICAgY3ZDbGFzc05hbWVcbiAgICAgICAgICAgIF0gOiBhY2M7XG4gICAgICAgIH0sIFtdKTtcbiAgICAgICAgcmV0dXJuIGN4KGJhc2UsIGdldFZhcmlhbnRDbGFzc05hbWVzLCBnZXRDb21wb3VuZFZhcmlhbnRDbGFzc05hbWVzLCBwcm9wcyA9PT0gbnVsbCB8fCBwcm9wcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcHJvcHMuY2xhc3MsIHByb3BzID09PSBudWxsIHx8IHByb3BzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwcm9wcy5jbGFzc05hbWUpO1xuICAgIH07XG5cbiJdLCJuYW1lcyI6WyJjbHN4IiwiZmFsc3lUb1N0cmluZyIsInZhbHVlIiwiY3giLCJjdmEiLCJiYXNlIiwiY29uZmlnIiwicHJvcHMiLCJfY29uZmlnX2NvbXBvdW5kVmFyaWFudHMiLCJ2YXJpYW50cyIsImNsYXNzIiwiY2xhc3NOYW1lIiwiZGVmYXVsdFZhcmlhbnRzIiwiZ2V0VmFyaWFudENsYXNzTmFtZXMiLCJPYmplY3QiLCJrZXlzIiwibWFwIiwidmFyaWFudCIsInZhcmlhbnRQcm9wIiwiZGVmYXVsdFZhcmlhbnRQcm9wIiwidmFyaWFudEtleSIsInByb3BzV2l0aG91dFVuZGVmaW5lZCIsImVudHJpZXMiLCJyZWR1Y2UiLCJhY2MiLCJwYXJhbSIsImtleSIsInVuZGVmaW5lZCIsImdldENvbXBvdW5kVmFyaWFudENsYXNzTmFtZXMiLCJjb21wb3VuZFZhcmlhbnRzIiwiY3ZDbGFzcyIsImN2Q2xhc3NOYW1lIiwiY29tcG91bmRWYXJpYW50T3B0aW9ucyIsImV2ZXJ5IiwiQXJyYXkiLCJpc0FycmF5IiwiaW5jbHVkZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/class-variance-authority/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/clsx/dist/clsx.mjs":
/*!*****************************************!*\
  !*** ./node_modules/clsx/dist/clsx.mjs ***!
  \*****************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clsx: function() { return /* binding */ clsx; }\n/* harmony export */ });\nfunction r(e) {\n    var t, f, n = \"\";\n    if (\"string\" == typeof e || \"number\" == typeof e) n += e;\n    else if (\"object\" == typeof e) if (Array.isArray(e)) {\n        var o = e.length;\n        for(t = 0; t < o; t++)e[t] && (f = r(e[t])) && (n && (n += \" \"), n += f);\n    } else for(f in e)e[f] && (n && (n += \" \"), n += f);\n    return n;\n}\nfunction clsx() {\n    for(var e, t, f = 0, n = \"\", o = arguments.length; f < o; f++)(e = arguments[f]) && (t = r(e)) && (n && (n += \" \"), n += t);\n    return n;\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (clsx);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jbHN4L2Rpc3QvY2xzeC5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLFNBQVNBLEVBQUVDLENBQUM7SUFBRSxJQUFJQyxHQUFFQyxHQUFFQyxJQUFFO0lBQUcsSUFBRyxZQUFVLE9BQU9ILEtBQUcsWUFBVSxPQUFPQSxHQUFFRyxLQUFHSDtTQUFPLElBQUcsWUFBVSxPQUFPQSxHQUFFLElBQUdJLE1BQU1DLE9BQU8sQ0FBQ0wsSUFBRztRQUFDLElBQUlNLElBQUVOLEVBQUVPLE1BQU07UUFBQyxJQUFJTixJQUFFLEdBQUVBLElBQUVLLEdBQUVMLElBQUlELENBQUMsQ0FBQ0MsRUFBRSxJQUFHQyxDQUFBQSxJQUFFSCxFQUFFQyxDQUFDLENBQUNDLEVBQUUsTUFBS0UsQ0FBQUEsS0FBSUEsQ0FBQUEsS0FBRyxHQUFFLEdBQUdBLEtBQUdELENBQUFBO0lBQUUsT0FBTSxJQUFJQSxLQUFLRixFQUFFQSxDQUFDLENBQUNFLEVBQUUsSUFBR0MsQ0FBQUEsS0FBSUEsQ0FBQUEsS0FBRyxHQUFFLEdBQUdBLEtBQUdELENBQUFBO0lBQUcsT0FBT0M7QUFBQztBQUFRLFNBQVNLO0lBQU8sSUFBSSxJQUFJUixHQUFFQyxHQUFFQyxJQUFFLEdBQUVDLElBQUUsSUFBR0csSUFBRUcsVUFBVUYsTUFBTSxFQUFDTCxJQUFFSSxHQUFFSixJQUFJLENBQUNGLElBQUVTLFNBQVMsQ0FBQ1AsRUFBRSxLQUFJRCxDQUFBQSxJQUFFRixFQUFFQyxFQUFDLEtBQUtHLENBQUFBLEtBQUlBLENBQUFBLEtBQUcsR0FBRSxHQUFHQSxLQUFHRixDQUFBQTtJQUFHLE9BQU9FO0FBQUM7QUFBQywrREFBZUssSUFBSUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvY2xzeC9kaXN0L2Nsc3gubWpzP2Q5YzYiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gcihlKXt2YXIgdCxmLG49XCJcIjtpZihcInN0cmluZ1wiPT10eXBlb2YgZXx8XCJudW1iZXJcIj09dHlwZW9mIGUpbis9ZTtlbHNlIGlmKFwib2JqZWN0XCI9PXR5cGVvZiBlKWlmKEFycmF5LmlzQXJyYXkoZSkpe3ZhciBvPWUubGVuZ3RoO2Zvcih0PTA7dDxvO3QrKyllW3RdJiYoZj1yKGVbdF0pKSYmKG4mJihuKz1cIiBcIiksbis9Zil9ZWxzZSBmb3IoZiBpbiBlKWVbZl0mJihuJiYobis9XCIgXCIpLG4rPWYpO3JldHVybiBufWV4cG9ydCBmdW5jdGlvbiBjbHN4KCl7Zm9yKHZhciBlLHQsZj0wLG49XCJcIixvPWFyZ3VtZW50cy5sZW5ndGg7ZjxvO2YrKykoZT1hcmd1bWVudHNbZl0pJiYodD1yKGUpKSYmKG4mJihuKz1cIiBcIiksbis9dCk7cmV0dXJuIG59ZXhwb3J0IGRlZmF1bHQgY2xzeDsiXSwibmFtZXMiOlsiciIsImUiLCJ0IiwiZiIsIm4iLCJBcnJheSIsImlzQXJyYXkiLCJvIiwibGVuZ3RoIiwiY2xzeCIsImFyZ3VtZW50cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/clsx/dist/clsx.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/sonner/dist/index.mjs":
/*!********************************************!*\
  !*** ./node_modules/sonner/dist/index.mjs ***!
  \********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Toaster: function() { return /* binding */ Be; },\n/* harmony export */   toast: function() { return /* binding */ te; },\n/* harmony export */   useSonner: function() { return /* binding */ Ce; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react-dom/index.js\");\n/* __next_internal_client_entry_do_not_use__ Toaster,toast,useSonner auto */ var _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$(), _s3 = $RefreshSig$();\n\n\n\nvar kt = (r)=>{\n    switch(r){\n        case \"success\":\n            return Vt;\n        case \"info\":\n            return Kt;\n        case \"warning\":\n            return Ot;\n        case \"error\":\n            return Jt;\n        default:\n            return null;\n    }\n}, Ut = Array(12).fill(0), Dt = (param)=>{\n    let { visible: r, className: o } = param;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: [\n            \"sonner-loading-wrapper\",\n            o\n        ].filter(Boolean).join(\" \"),\n        \"data-visible\": r\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"sonner-spinner\"\n    }, Ut.map((t, s)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            className: \"sonner-loading-bar\",\n            key: \"spinner-bar-\".concat(s)\n        }))));\n}, Vt = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 20 20\",\n    fill: \"currentColor\",\n    height: \"20\",\n    width: \"20\"\n}, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\",\n    clipRule: \"evenodd\"\n})), Ot = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 24 24\",\n    fill: \"currentColor\",\n    height: \"20\",\n    width: \"20\"\n}, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M9.401 3.003c1.155-2 4.043-2 5.197 0l7.355 12.748c1.154 2-.29 4.5-2.599 4.5H4.645c-2.309 0-3.752-2.5-2.598-4.5L9.4 3.003zM12 8.25a.75.75 0 01.75.75v3.75a.75.75 0 01-1.5 0V9a.75.75 0 01.75-.75zm0 8.25a.75.75 0 100-1.5.75.75 0 000 1.5z\",\n    clipRule: \"evenodd\"\n})), Kt = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 20 20\",\n    fill: \"currentColor\",\n    height: \"20\",\n    width: \"20\"\n}, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a.75.75 0 000 1.5h.253a.25.25 0 01.244.304l-.459 2.066A1.75 1.75 0 0010.747 15H11a.75.75 0 000-1.5h-.253a.25.25 0 01-.244-.304l.459-2.066A1.75 1.75 0 009.253 9H9z\",\n    clipRule: \"evenodd\"\n})), Jt = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 20 20\",\n    fill: \"currentColor\",\n    height: \"20\",\n    width: \"20\"\n}, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-5a.75.75 0 01.75.75v4.5a.75.75 0 01-1.5 0v-4.5A.75.75 0 0110 5zm0 10a1 1 0 100-2 1 1 0 000 2z\",\n    clipRule: \"evenodd\"\n})), Ht = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"12\",\n    height: \"12\",\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: \"currentColor\",\n    strokeWidth: \"1.5\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n}, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"line\", {\n    x1: \"18\",\n    y1: \"6\",\n    x2: \"6\",\n    y2: \"18\"\n}), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"line\", {\n    x1: \"6\",\n    y1: \"6\",\n    x2: \"18\",\n    y2: \"18\"\n}));\n\nvar At = ()=>{\n    _s();\n    let [r, o] = react__WEBPACK_IMPORTED_MODULE_0__.useState(document.hidden);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        let t = ()=>{\n            o(document.hidden);\n        };\n        return document.addEventListener(\"visibilitychange\", t), ()=>window.removeEventListener(\"visibilitychange\", t);\n    }, []), r;\n};\n_s(At, \"9ZAJu7b2WeZDrs0ETLxhVSDrYIE=\");\n_c = At;\n\nvar ft = 1, mt = class {\n    constructor(){\n        this.subscribe = (o)=>(this.subscribers.push(o), ()=>{\n                let t = this.subscribers.indexOf(o);\n                this.subscribers.splice(t, 1);\n            });\n        this.publish = (o)=>{\n            this.subscribers.forEach((t)=>t(o));\n        };\n        this.addToast = (o)=>{\n            this.publish(o), this.toasts = [\n                ...this.toasts,\n                o\n            ];\n        };\n        this.create = (o)=>{\n            var P;\n            let { message: t, ...s } = o, g = typeof (o == null ? void 0 : o.id) == \"number\" || ((P = o.id) == null ? void 0 : P.length) > 0 ? o.id : ft++, l = this.toasts.find((h)=>h.id === g), E = o.dismissible === void 0 ? !0 : o.dismissible;\n            return l ? this.toasts = this.toasts.map((h)=>h.id === g ? (this.publish({\n                    ...h,\n                    ...o,\n                    id: g,\n                    title: t\n                }), {\n                    ...h,\n                    ...o,\n                    id: g,\n                    dismissible: E,\n                    title: t\n                }) : h) : this.addToast({\n                title: t,\n                ...s,\n                dismissible: E,\n                id: g\n            }), g;\n        };\n        this.dismiss = (o)=>(o || this.toasts.forEach((t)=>{\n                this.subscribers.forEach((s)=>s({\n                        id: t.id,\n                        dismiss: !0\n                    }));\n            }), this.subscribers.forEach((t)=>t({\n                    id: o,\n                    dismiss: !0\n                })), o);\n        this.message = (o, t)=>this.create({\n                ...t,\n                message: o\n            });\n        this.error = (o, t)=>this.create({\n                ...t,\n                message: o,\n                type: \"error\"\n            });\n        this.success = (o, t)=>this.create({\n                ...t,\n                type: \"success\",\n                message: o\n            });\n        this.info = (o, t)=>this.create({\n                ...t,\n                type: \"info\",\n                message: o\n            });\n        this.warning = (o, t)=>this.create({\n                ...t,\n                type: \"warning\",\n                message: o\n            });\n        this.loading = (o, t)=>this.create({\n                ...t,\n                type: \"loading\",\n                message: o\n            });\n        this.promise = (o, t)=>{\n            if (!t) return;\n            let s;\n            t.loading !== void 0 && (s = this.create({\n                ...t,\n                promise: o,\n                type: \"loading\",\n                message: t.loading,\n                description: typeof t.description != \"function\" ? t.description : void 0\n            }));\n            let g = o instanceof Promise ? o : o(), l = s !== void 0, E, P = g.then(async (c)=>{\n                if (E = [\n                    \"resolve\",\n                    c\n                ], /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(c)) l = !1, this.create({\n                    id: s,\n                    type: \"default\",\n                    message: c\n                });\n                else if (Qt(c) && !c.ok) {\n                    l = !1;\n                    let k = typeof t.error == \"function\" ? await t.error(\"HTTP error! status: \".concat(c.status)) : t.error, j = typeof t.description == \"function\" ? await t.description(\"HTTP error! status: \".concat(c.status)) : t.description;\n                    this.create({\n                        id: s,\n                        type: \"error\",\n                        message: k,\n                        description: j\n                    });\n                } else if (t.success !== void 0) {\n                    l = !1;\n                    let k = typeof t.success == \"function\" ? await t.success(c) : t.success, j = typeof t.description == \"function\" ? await t.description(c) : t.description;\n                    this.create({\n                        id: s,\n                        type: \"success\",\n                        message: k,\n                        description: j\n                    });\n                }\n            }).catch(async (c)=>{\n                if (E = [\n                    \"reject\",\n                    c\n                ], t.error !== void 0) {\n                    l = !1;\n                    let y = typeof t.error == \"function\" ? await t.error(c) : t.error, k = typeof t.description == \"function\" ? await t.description(c) : t.description;\n                    this.create({\n                        id: s,\n                        type: \"error\",\n                        message: y,\n                        description: k\n                    });\n                }\n            }).finally(()=>{\n                var c;\n                l && (this.dismiss(s), s = void 0), (c = t.finally) == null || c.call(t);\n            }), h = ()=>new Promise((c, y)=>P.then(()=>E[0] === \"reject\" ? y(E[1]) : c(E[1])).catch(y));\n            return typeof s != \"string\" && typeof s != \"number\" ? {\n                unwrap: h\n            } : Object.assign(s, {\n                unwrap: h\n            });\n        };\n        this.custom = (o, t)=>{\n            let s = (t == null ? void 0 : t.id) || ft++;\n            return this.create({\n                jsx: o(s),\n                id: s,\n                ...t\n            }), s;\n        };\n        this.subscribers = [], this.toasts = [];\n    }\n}, T = new mt, Gt = (r, o)=>{\n    let t = (o == null ? void 0 : o.id) || ft++;\n    return T.addToast({\n        title: r,\n        ...o,\n        id: t\n    }), t;\n}, Qt = (r)=>r && typeof r == \"object\" && \"ok\" in r && typeof r.ok == \"boolean\" && \"status\" in r && typeof r.status == \"number\", qt = Gt, Zt = ()=>T.toasts, te = Object.assign(qt, {\n    success: T.success,\n    info: T.info,\n    warning: T.warning,\n    error: T.error,\n    custom: T.custom,\n    message: T.message,\n    promise: T.promise,\n    dismiss: T.dismiss,\n    loading: T.loading\n}, {\n    getHistory: Zt\n});\nfunction pt(r) {\n    let { insertAt: o } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    if (!r || typeof document == \"undefined\") return;\n    let t = document.head || document.getElementsByTagName(\"head\")[0], s = document.createElement(\"style\");\n    s.type = \"text/css\", o === \"top\" && t.firstChild ? t.insertBefore(s, t.firstChild) : t.appendChild(s), s.styleSheet ? s.styleSheet.cssText = r : s.appendChild(document.createTextNode(r));\n}\npt(':where(html[dir=\"ltr\"]),:where([data-sonner-toaster][dir=\"ltr\"]){--toast-icon-margin-start: -3px;--toast-icon-margin-end: 4px;--toast-svg-margin-start: -1px;--toast-svg-margin-end: 0px;--toast-button-margin-start: auto;--toast-button-margin-end: 0;--toast-close-button-start: 0;--toast-close-button-end: unset;--toast-close-button-transform: translate(-35%, -35%)}:where(html[dir=\"rtl\"]),:where([data-sonner-toaster][dir=\"rtl\"]){--toast-icon-margin-start: 4px;--toast-icon-margin-end: -3px;--toast-svg-margin-start: 0px;--toast-svg-margin-end: -1px;--toast-button-margin-start: 0;--toast-button-margin-end: auto;--toast-close-button-start: unset;--toast-close-button-end: 0;--toast-close-button-transform: translate(35%, -35%)}:where([data-sonner-toaster]){position:fixed;width:var(--width);font-family:ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;--gray1: hsl(0, 0%, 99%);--gray2: hsl(0, 0%, 97.3%);--gray3: hsl(0, 0%, 95.1%);--gray4: hsl(0, 0%, 93%);--gray5: hsl(0, 0%, 90.9%);--gray6: hsl(0, 0%, 88.7%);--gray7: hsl(0, 0%, 85.8%);--gray8: hsl(0, 0%, 78%);--gray9: hsl(0, 0%, 56.1%);--gray10: hsl(0, 0%, 52.3%);--gray11: hsl(0, 0%, 43.5%);--gray12: hsl(0, 0%, 9%);--border-radius: 8px;box-sizing:border-box;padding:0;margin:0;list-style:none;outline:none;z-index:999999999;transition:transform .4s ease}:where([data-sonner-toaster][data-lifted=\"true\"]){transform:translateY(-10px)}@media (hover: none) and (pointer: coarse){:where([data-sonner-toaster][data-lifted=\"true\"]){transform:none}}:where([data-sonner-toaster][data-x-position=\"right\"]){right:max(var(--offset),env(safe-area-inset-right))}:where([data-sonner-toaster][data-x-position=\"left\"]){left:max(var(--offset),env(safe-area-inset-left))}:where([data-sonner-toaster][data-x-position=\"center\"]){left:50%;transform:translate(-50%)}:where([data-sonner-toaster][data-y-position=\"top\"]){top:max(var(--offset),env(safe-area-inset-top))}:where([data-sonner-toaster][data-y-position=\"bottom\"]){bottom:max(var(--offset),env(safe-area-inset-bottom))}:where([data-sonner-toast]){--y: translateY(100%);--lift-amount: calc(var(--lift) * var(--gap));z-index:var(--z-index);position:absolute;opacity:0;transform:var(--y);filter:blur(0);touch-action:none;transition:transform .4s,opacity .4s,height .4s,box-shadow .2s;box-sizing:border-box;outline:none;overflow-wrap:anywhere}:where([data-sonner-toast][data-styled=\"true\"]){padding:16px;background:var(--normal-bg);border:1px solid var(--normal-border);color:var(--normal-text);border-radius:var(--border-radius);box-shadow:0 4px 12px #0000001a;width:var(--width);font-size:13px;display:flex;align-items:center;gap:6px}:where([data-sonner-toast]:focus-visible){box-shadow:0 4px 12px #0000001a,0 0 0 2px #0003}:where([data-sonner-toast][data-y-position=\"top\"]){top:0;--y: translateY(-100%);--lift: 1;--lift-amount: calc(1 * var(--gap))}:where([data-sonner-toast][data-y-position=\"bottom\"]){bottom:0;--y: translateY(100%);--lift: -1;--lift-amount: calc(var(--lift) * var(--gap))}:where([data-sonner-toast]) :where([data-description]){font-weight:400;line-height:1.4;color:inherit}:where([data-sonner-toast]) :where([data-title]){font-weight:500;line-height:1.5;color:inherit}:where([data-sonner-toast]) :where([data-icon]){display:flex;height:16px;width:16px;position:relative;justify-content:flex-start;align-items:center;flex-shrink:0;margin-left:var(--toast-icon-margin-start);margin-right:var(--toast-icon-margin-end)}:where([data-sonner-toast][data-promise=\"true\"]) :where([data-icon])>svg{opacity:0;transform:scale(.8);transform-origin:center;animation:sonner-fade-in .3s ease forwards}:where([data-sonner-toast]) :where([data-icon])>*{flex-shrink:0}:where([data-sonner-toast]) :where([data-icon]) svg{margin-left:var(--toast-svg-margin-start);margin-right:var(--toast-svg-margin-end)}:where([data-sonner-toast]) :where([data-content]){display:flex;flex-direction:column;gap:2px}[data-sonner-toast][data-styled=true] [data-button]{border-radius:4px;padding-left:8px;padding-right:8px;height:24px;font-size:12px;color:var(--normal-bg);background:var(--normal-text);margin-left:var(--toast-button-margin-start);margin-right:var(--toast-button-margin-end);border:none;cursor:pointer;outline:none;display:flex;align-items:center;flex-shrink:0;transition:opacity .4s,box-shadow .2s}:where([data-sonner-toast]) :where([data-button]):focus-visible{box-shadow:0 0 0 2px #0006}:where([data-sonner-toast]) :where([data-button]):first-of-type{margin-left:var(--toast-button-margin-start);margin-right:var(--toast-button-margin-end)}:where([data-sonner-toast]) :where([data-cancel]){color:var(--normal-text);background:rgba(0,0,0,.08)}:where([data-sonner-toast][data-theme=\"dark\"]) :where([data-cancel]){background:rgba(255,255,255,.3)}:where([data-sonner-toast]) :where([data-close-button]){position:absolute;left:var(--toast-close-button-start);right:var(--toast-close-button-end);top:0;height:20px;width:20px;display:flex;justify-content:center;align-items:center;padding:0;color:var(--gray12);border:1px solid var(--gray4);transform:var(--toast-close-button-transform);border-radius:50%;cursor:pointer;z-index:1;transition:opacity .1s,background .2s,border-color .2s}[data-sonner-toast] [data-close-button]{background:var(--gray1)}:where([data-sonner-toast]) :where([data-close-button]):focus-visible{box-shadow:0 4px 12px #0000001a,0 0 0 2px #0003}:where([data-sonner-toast]) :where([data-disabled=\"true\"]){cursor:not-allowed}:where([data-sonner-toast]):hover :where([data-close-button]):hover{background:var(--gray2);border-color:var(--gray5)}:where([data-sonner-toast][data-swiping=\"true\"]):before{content:\"\";position:absolute;left:0;right:0;height:100%;z-index:-1}:where([data-sonner-toast][data-y-position=\"top\"][data-swiping=\"true\"]):before{bottom:50%;transform:scaleY(3) translateY(50%)}:where([data-sonner-toast][data-y-position=\"bottom\"][data-swiping=\"true\"]):before{top:50%;transform:scaleY(3) translateY(-50%)}:where([data-sonner-toast][data-swiping=\"false\"][data-removed=\"true\"]):before{content:\"\";position:absolute;inset:0;transform:scaleY(2)}:where([data-sonner-toast]):after{content:\"\";position:absolute;left:0;height:calc(var(--gap) + 1px);bottom:100%;width:100%}:where([data-sonner-toast][data-mounted=\"true\"]){--y: translateY(0);opacity:1}:where([data-sonner-toast][data-expanded=\"false\"][data-front=\"false\"]){--scale: var(--toasts-before) * .05 + 1;--y: translateY(calc(var(--lift-amount) * var(--toasts-before))) scale(calc(-1 * var(--scale)));height:var(--front-toast-height)}:where([data-sonner-toast])>*{transition:opacity .4s}:where([data-sonner-toast][data-expanded=\"false\"][data-front=\"false\"][data-styled=\"true\"])>*{opacity:0}:where([data-sonner-toast][data-visible=\"false\"]){opacity:0;pointer-events:none}:where([data-sonner-toast][data-mounted=\"true\"][data-expanded=\"true\"]){--y: translateY(calc(var(--lift) * var(--offset)));height:var(--initial-height)}:where([data-sonner-toast][data-removed=\"true\"][data-front=\"true\"][data-swipe-out=\"false\"]){--y: translateY(calc(var(--lift) * -100%));opacity:0}:where([data-sonner-toast][data-removed=\"true\"][data-front=\"false\"][data-swipe-out=\"false\"][data-expanded=\"true\"]){--y: translateY(calc(var(--lift) * var(--offset) + var(--lift) * -100%));opacity:0}:where([data-sonner-toast][data-removed=\"true\"][data-front=\"false\"][data-swipe-out=\"false\"][data-expanded=\"false\"]){--y: translateY(40%);opacity:0;transition:transform .5s,opacity .2s}:where([data-sonner-toast][data-removed=\"true\"][data-front=\"false\"]):before{height:calc(var(--initial-height) + 20%)}[data-sonner-toast][data-swiping=true]{transform:var(--y) translateY(var(--swipe-amount, 0px));transition:none}[data-sonner-toast][data-swiped=true]{user-select:none}[data-sonner-toast][data-swipe-out=true][data-y-position=bottom],[data-sonner-toast][data-swipe-out=true][data-y-position=top]{animation:swipe-out .2s ease-out forwards}@keyframes swipe-out{0%{transform:translateY(calc(var(--lift) * var(--offset) + var(--swipe-amount)));opacity:1}to{transform:translateY(calc(var(--lift) * var(--offset) + var(--swipe-amount) + var(--lift) * -100%));opacity:0}}@media (max-width: 600px){[data-sonner-toaster]{position:fixed;--mobile-offset: 16px;right:var(--mobile-offset);left:var(--mobile-offset);width:100%}[data-sonner-toaster][dir=rtl]{left:calc(var(--mobile-offset) * -1)}[data-sonner-toaster] [data-sonner-toast]{left:0;right:0;width:calc(100% - var(--mobile-offset) * 2)}[data-sonner-toaster][data-x-position=left]{left:var(--mobile-offset)}[data-sonner-toaster][data-y-position=bottom]{bottom:20px}[data-sonner-toaster][data-y-position=top]{top:20px}[data-sonner-toaster][data-x-position=center]{left:var(--mobile-offset);right:var(--mobile-offset);transform:none}}[data-sonner-toaster][data-theme=light]{--normal-bg: #fff;--normal-border: var(--gray4);--normal-text: var(--gray12);--success-bg: hsl(143, 85%, 96%);--success-border: hsl(145, 92%, 91%);--success-text: hsl(140, 100%, 27%);--info-bg: hsl(208, 100%, 97%);--info-border: hsl(221, 91%, 91%);--info-text: hsl(210, 92%, 45%);--warning-bg: hsl(49, 100%, 97%);--warning-border: hsl(49, 91%, 91%);--warning-text: hsl(31, 92%, 45%);--error-bg: hsl(359, 100%, 97%);--error-border: hsl(359, 100%, 94%);--error-text: hsl(360, 100%, 45%)}[data-sonner-toaster][data-theme=light] [data-sonner-toast][data-invert=true]{--normal-bg: #000;--normal-border: hsl(0, 0%, 20%);--normal-text: var(--gray1)}[data-sonner-toaster][data-theme=dark] [data-sonner-toast][data-invert=true]{--normal-bg: #fff;--normal-border: var(--gray3);--normal-text: var(--gray12)}[data-sonner-toaster][data-theme=dark]{--normal-bg: #000;--normal-border: hsl(0, 0%, 20%);--normal-text: var(--gray1);--success-bg: hsl(150, 100%, 6%);--success-border: hsl(147, 100%, 12%);--success-text: hsl(150, 86%, 65%);--info-bg: hsl(215, 100%, 6%);--info-border: hsl(223, 100%, 12%);--info-text: hsl(216, 87%, 65%);--warning-bg: hsl(64, 100%, 6%);--warning-border: hsl(60, 100%, 12%);--warning-text: hsl(46, 87%, 65%);--error-bg: hsl(358, 76%, 10%);--error-border: hsl(357, 89%, 16%);--error-text: hsl(358, 100%, 81%)}[data-rich-colors=true][data-sonner-toast][data-type=success],[data-rich-colors=true][data-sonner-toast][data-type=success] [data-close-button]{background:var(--success-bg);border-color:var(--success-border);color:var(--success-text)}[data-rich-colors=true][data-sonner-toast][data-type=info],[data-rich-colors=true][data-sonner-toast][data-type=info] [data-close-button]{background:var(--info-bg);border-color:var(--info-border);color:var(--info-text)}[data-rich-colors=true][data-sonner-toast][data-type=warning],[data-rich-colors=true][data-sonner-toast][data-type=warning] [data-close-button]{background:var(--warning-bg);border-color:var(--warning-border);color:var(--warning-text)}[data-rich-colors=true][data-sonner-toast][data-type=error],[data-rich-colors=true][data-sonner-toast][data-type=error] [data-close-button]{background:var(--error-bg);border-color:var(--error-border);color:var(--error-text)}.sonner-loading-wrapper{--size: 16px;height:var(--size);width:var(--size);position:absolute;inset:0;z-index:10}.sonner-loading-wrapper[data-visible=false]{transform-origin:center;animation:sonner-fade-out .2s ease forwards}.sonner-spinner{position:relative;top:50%;left:50%;height:var(--size);width:var(--size)}.sonner-loading-bar{animation:sonner-spin 1.2s linear infinite;background:var(--gray11);border-radius:6px;height:8%;left:-10%;position:absolute;top:-3.9%;width:24%}.sonner-loading-bar:nth-child(1){animation-delay:-1.2s;transform:rotate(.0001deg) translate(146%)}.sonner-loading-bar:nth-child(2){animation-delay:-1.1s;transform:rotate(30deg) translate(146%)}.sonner-loading-bar:nth-child(3){animation-delay:-1s;transform:rotate(60deg) translate(146%)}.sonner-loading-bar:nth-child(4){animation-delay:-.9s;transform:rotate(90deg) translate(146%)}.sonner-loading-bar:nth-child(5){animation-delay:-.8s;transform:rotate(120deg) translate(146%)}.sonner-loading-bar:nth-child(6){animation-delay:-.7s;transform:rotate(150deg) translate(146%)}.sonner-loading-bar:nth-child(7){animation-delay:-.6s;transform:rotate(180deg) translate(146%)}.sonner-loading-bar:nth-child(8){animation-delay:-.5s;transform:rotate(210deg) translate(146%)}.sonner-loading-bar:nth-child(9){animation-delay:-.4s;transform:rotate(240deg) translate(146%)}.sonner-loading-bar:nth-child(10){animation-delay:-.3s;transform:rotate(270deg) translate(146%)}.sonner-loading-bar:nth-child(11){animation-delay:-.2s;transform:rotate(300deg) translate(146%)}.sonner-loading-bar:nth-child(12){animation-delay:-.1s;transform:rotate(330deg) translate(146%)}@keyframes sonner-fade-in{0%{opacity:0;transform:scale(.8)}to{opacity:1;transform:scale(1)}}@keyframes sonner-fade-out{0%{opacity:1;transform:scale(1)}to{opacity:0;transform:scale(.8)}}@keyframes sonner-spin{0%{opacity:1}to{opacity:.15}}@media (prefers-reduced-motion){[data-sonner-toast],[data-sonner-toast]>*,.sonner-loading-bar{transition:none!important;animation:none!important}}.sonner-loader{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);transform-origin:center;transition:opacity .2s,transform .2s}.sonner-loader[data-visible=false]{opacity:0;transform:scale(.8) translate(-50%,-50%)}\\n');\nfunction V(r) {\n    return r.label !== void 0;\n}\n_c1 = V;\nvar ae = 3, ne = \"32px\", Lt = 4e3, se = 356, re = 14, ie = 20, le = 200;\nfunction de() {\n    for(var _len = arguments.length, r = new Array(_len), _key = 0; _key < _len; _key++){\n        r[_key] = arguments[_key];\n    }\n    return r.filter(Boolean).join(\" \");\n}\nvar ce = (r)=>{\n    _s1();\n    var xt, vt, wt, Tt, Rt, St, Et, Nt, Pt, Ct, Bt;\n    let { invert: o, toast: t, unstyled: s, interacting: g, setHeights: l, visibleToasts: E, heights: P, index: h, toasts: c, expanded: y, removeToast: k, defaultRichColors: j, closeButton: O, style: st, cancelButtonStyle: i, actionButtonStyle: K, className: J = \"\", descriptionClassName: rt = \"\", duration: _, position: it, gap: lt, loadingIcon: X, expandByDefault: C, classNames: a, icons: N, closeButtonAriaLabel: G = \"Close toast\", pauseWhenPageIsHidden: Q, cn: R } = r, [B, q] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1), [U, dt] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1), [M, A] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1), [Z, L] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1), [Y, tt] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1), [d, u] = react__WEBPACK_IMPORTED_MODULE_0__.useState(0), [b, w] = react__WEBPACK_IMPORTED_MODULE_0__.useState(0), D = react__WEBPACK_IMPORTED_MODULE_0__.useRef(t.duration || _ || Lt), f = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null), H = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null), et = h === 0, ot = h + 1 <= E, x = t.type, F = t.dismissible !== !1, jt = t.className || \"\", Yt = t.descriptionClassName || \"\", at = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>P.findIndex((n)=>n.toastId === t.id) || 0, [\n        P,\n        t.id\n    ]), Ft = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        var n;\n        return (n = t.closeButton) != null ? n : O;\n    }, [\n        t.closeButton,\n        O\n    ]), ue = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>t.duration || _ || Lt, [\n        t.duration,\n        _\n    ]), ct = react__WEBPACK_IMPORTED_MODULE_0__.useRef(0), $ = react__WEBPACK_IMPORTED_MODULE_0__.useRef(0), gt = react__WEBPACK_IMPORTED_MODULE_0__.useRef(0), nt = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null), [ht, $t] = it.split(\"-\"), bt = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>P.reduce((n, m, p)=>p >= at ? n : n + m.height, 0), [\n        P,\n        at\n    ]), yt = At(), Wt = t.invert || o, ut = x === \"loading\";\n    $.current = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>at * lt + bt, [\n        at,\n        bt\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        q(!0);\n    }, []), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        let n = H.current;\n        if (n) {\n            let m = n.getBoundingClientRect().height;\n            return w(m), l((p)=>[\n                    {\n                        toastId: t.id,\n                        height: m,\n                        position: t.position\n                    },\n                    ...p\n                ]), ()=>l((p)=>p.filter((v)=>v.toastId !== t.id));\n        }\n    }, [\n        l,\n        t.id\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(()=>{\n        if (!B) return;\n        let n = H.current, m = n.style.height;\n        n.style.height = \"auto\";\n        let p = n.getBoundingClientRect().height;\n        n.style.height = m, w(p), l((v)=>v.find((I)=>I.toastId === t.id) ? v.map((I)=>I.toastId === t.id ? {\n                    ...I,\n                    height: p\n                } : I) : [\n                {\n                    toastId: t.id,\n                    height: p,\n                    position: t.position\n                },\n                ...v\n            ]);\n    }, [\n        B,\n        t.title,\n        t.description,\n        l,\n        t.id\n    ]);\n    let z = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(()=>{\n        dt(!0), u($.current), l((n)=>n.filter((m)=>m.toastId !== t.id)), setTimeout(()=>{\n            k(t);\n        }, le);\n    }, [\n        t,\n        k,\n        l,\n        $\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (t.promise && x === \"loading\" || t.duration === 1 / 0 || t.type === \"loading\") return;\n        let n;\n        return y || g || Q && yt ? (()=>{\n            if (gt.current < ct.current) {\n                let v = new Date().getTime() - ct.current;\n                D.current = D.current - v;\n            }\n            gt.current = new Date().getTime();\n        })() : (()=>{\n            D.current !== 1 / 0 && (ct.current = new Date().getTime(), n = setTimeout(()=>{\n                var v;\n                (v = t.onAutoClose) == null || v.call(t, t), z();\n            }, D.current));\n        })(), ()=>clearTimeout(n);\n    }, [\n        y,\n        g,\n        t,\n        x,\n        Q,\n        yt,\n        z\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        t.delete && z();\n    }, [\n        z,\n        t.delete\n    ]);\n    function _t() {\n        var n, m, p;\n        return N != null && N.loading ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            className: R(a == null ? void 0 : a.loader, (n = t == null ? void 0 : t.classNames) == null ? void 0 : n.loader, \"sonner-loader\"),\n            \"data-visible\": x === \"loading\"\n        }, N.loading) : X ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            className: R(a == null ? void 0 : a.loader, (m = t == null ? void 0 : t.classNames) == null ? void 0 : m.loader, \"sonner-loader\"),\n            \"data-visible\": x === \"loading\"\n        }, X) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Dt, {\n            className: R(a == null ? void 0 : a.loader, (p = t == null ? void 0 : t.classNames) == null ? void 0 : p.loader),\n            visible: x === \"loading\"\n        });\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"li\", {\n        tabIndex: 0,\n        ref: H,\n        className: R(J, jt, a == null ? void 0 : a.toast, (xt = t == null ? void 0 : t.classNames) == null ? void 0 : xt.toast, a == null ? void 0 : a.default, a == null ? void 0 : a[x], (vt = t == null ? void 0 : t.classNames) == null ? void 0 : vt[x]),\n        \"data-sonner-toast\": \"\",\n        \"data-rich-colors\": (wt = t.richColors) != null ? wt : j,\n        \"data-styled\": !(t.jsx || t.unstyled || s),\n        \"data-mounted\": B,\n        \"data-promise\": !!t.promise,\n        \"data-swiped\": Y,\n        \"data-removed\": U,\n        \"data-visible\": ot,\n        \"data-y-position\": ht,\n        \"data-x-position\": $t,\n        \"data-index\": h,\n        \"data-front\": et,\n        \"data-swiping\": M,\n        \"data-dismissible\": F,\n        \"data-type\": x,\n        \"data-invert\": Wt,\n        \"data-swipe-out\": Z,\n        \"data-expanded\": !!(y || C && B),\n        style: {\n            \"--index\": h,\n            \"--toasts-before\": h,\n            \"--z-index\": c.length - h,\n            \"--offset\": \"\".concat(U ? d : $.current, \"px\"),\n            \"--initial-height\": C ? \"auto\" : \"\".concat(b, \"px\"),\n            ...st,\n            ...t.style\n        },\n        onPointerDown: (n)=>{\n            ut || !F || (f.current = new Date, u($.current), n.target.setPointerCapture(n.pointerId), n.target.tagName !== \"BUTTON\" && (A(!0), nt.current = {\n                x: n.clientX,\n                y: n.clientY\n            }));\n        },\n        onPointerUp: ()=>{\n            var v, W, I, It;\n            if (Z || !F) return;\n            nt.current = null;\n            let n = Number(((v = H.current) == null ? void 0 : v.style.getPropertyValue(\"--swipe-amount\").replace(\"px\", \"\")) || 0), m = new Date().getTime() - ((W = f.current) == null ? void 0 : W.getTime()), p = Math.abs(n) / m;\n            if (Math.abs(n) >= ie || p > .11) {\n                u($.current), (I = t.onDismiss) == null || I.call(t, t), z(), L(!0), tt(!1);\n                return;\n            }\n            (It = H.current) == null || It.style.setProperty(\"--swipe-amount\", \"0px\"), A(!1);\n        },\n        onPointerMove: (n)=>{\n            var W, I;\n            if (!nt.current || !F) return;\n            let m = n.clientY - nt.current.y, p = ((W = window.getSelection()) == null ? void 0 : W.toString().length) > 0, v = ht === \"top\" ? Math.min(0, m) : Math.max(0, m);\n            Math.abs(v) > 0 && tt(!0), !p && ((I = H.current) == null || I.style.setProperty(\"--swipe-amount\", \"\".concat(v, \"px\")));\n        }\n    }, Ft && !t.jsx ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n        \"aria-label\": G,\n        \"data-disabled\": ut,\n        \"data-close-button\": !0,\n        onClick: ut || !F ? ()=>{} : ()=>{\n            var n;\n            z(), (n = t.onDismiss) == null || n.call(t, t);\n        },\n        className: R(a == null ? void 0 : a.closeButton, (Tt = t == null ? void 0 : t.classNames) == null ? void 0 : Tt.closeButton)\n    }, (Rt = N == null ? void 0 : N.close) != null ? Rt : Ht) : null, t.jsx || /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(t.title) ? t.jsx ? t.jsx : typeof t.title == \"function\" ? t.title() : t.title : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, x || t.icon || t.promise ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        \"data-icon\": \"\",\n        className: R(a == null ? void 0 : a.icon, (St = t == null ? void 0 : t.classNames) == null ? void 0 : St.icon)\n    }, t.promise || t.type === \"loading\" && !t.icon ? t.icon || _t() : null, t.type !== \"loading\" ? t.icon || (N == null ? void 0 : N[x]) || kt(x) : null) : null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        \"data-content\": \"\",\n        className: R(a == null ? void 0 : a.content, (Et = t == null ? void 0 : t.classNames) == null ? void 0 : Et.content)\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        \"data-title\": \"\",\n        className: R(a == null ? void 0 : a.title, (Nt = t == null ? void 0 : t.classNames) == null ? void 0 : Nt.title)\n    }, typeof t.title == \"function\" ? t.title() : t.title), t.description ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        \"data-description\": \"\",\n        className: R(rt, Yt, a == null ? void 0 : a.description, (Pt = t == null ? void 0 : t.classNames) == null ? void 0 : Pt.description)\n    }, typeof t.description == \"function\" ? t.description() : t.description) : null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(t.cancel) ? t.cancel : t.cancel && V(t.cancel) ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n        \"data-button\": !0,\n        \"data-cancel\": !0,\n        style: t.cancelButtonStyle || i,\n        onClick: (n)=>{\n            var m, p;\n            V(t.cancel) && F && ((p = (m = t.cancel).onClick) == null || p.call(m, n), z());\n        },\n        className: R(a == null ? void 0 : a.cancelButton, (Ct = t == null ? void 0 : t.classNames) == null ? void 0 : Ct.cancelButton)\n    }, t.cancel.label) : null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(t.action) ? t.action : t.action && V(t.action) ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n        \"data-button\": !0,\n        \"data-action\": !0,\n        style: t.actionButtonStyle || K,\n        onClick: (n)=>{\n            var m, p;\n            V(t.action) && ((p = (m = t.action).onClick) == null || p.call(m, n), !n.defaultPrevented && z());\n        },\n        className: R(a == null ? void 0 : a.actionButton, (Bt = t == null ? void 0 : t.classNames) == null ? void 0 : Bt.actionButton)\n    }, t.action.label) : null));\n};\n_s1(ce, \"T4XyotabOku5SfDlKogIf4W/4is=\");\n_c2 = ce;\nfunction zt() {\n    if ( false || typeof document == \"undefined\") return \"ltr\";\n    let r = document.documentElement.getAttribute(\"dir\");\n    return r === \"auto\" || !r ? window.getComputedStyle(document.documentElement).direction : r;\n}\nfunction Ce() {\n    _s2();\n    let [r, o] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>T.subscribe((t)=>{\n            o((s)=>{\n                if (\"dismiss\" in t && t.dismiss) return s.filter((l)=>l.id !== t.id);\n                let g = s.findIndex((l)=>l.id === t.id);\n                if (g !== -1) {\n                    let l = [\n                        ...s\n                    ];\n                    return l[g] = {\n                        ...l[g],\n                        ...t\n                    }, l;\n                } else return [\n                    t,\n                    ...s\n                ];\n            });\n        }), []), {\n        toasts: r\n    };\n}\n_s2(Ce, \"1TgUbPQ2XhOWkOILgOPztdFc158=\");\n_c3 = Ce;\nvar Be = /*#__PURE__*/ _s3((0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(_c4 = _s3(function(o, t) {\n    _s3();\n    let { invert: s, position: g = \"bottom-right\", hotkey: l = [\n        \"altKey\",\n        \"KeyT\"\n    ], expand: E, closeButton: P, className: h, offset: c, theme: y = \"light\", richColors: k, duration: j, style: O, visibleToasts: st = ae, toastOptions: i, dir: K = zt(), gap: J = re, loadingIcon: rt, icons: _, containerAriaLabel: it = \"Notifications\", pauseWhenPageIsHidden: lt, cn: X = de } = o, [C, a] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]), N = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>Array.from(new Set([\n            g\n        ].concat(C.filter((d)=>d.position).map((d)=>d.position)))), [\n        C,\n        g\n    ]), [G, Q] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]), [R, B] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1), [q, U] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1), [dt, M] = react__WEBPACK_IMPORTED_MODULE_0__.useState(y !== \"system\" ? y :  true && window.matchMedia && window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\"), A = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null), Z = l.join(\"+\").replace(/Key/g, \"\").replace(/Digit/g, \"\"), L = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null), Y = react__WEBPACK_IMPORTED_MODULE_0__.useRef(!1), tt = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((d)=>{\n        a((u)=>{\n            var b;\n            return (b = u.find((w)=>w.id === d.id)) != null && b.delete || T.dismiss(d.id), u.filter((param)=>{\n                let { id: w } = param;\n                return w !== d.id;\n            });\n        });\n    }, []);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>T.subscribe((d)=>{\n            if (d.dismiss) {\n                a((u)=>u.map((b)=>b.id === d.id ? {\n                            ...b,\n                            delete: !0\n                        } : b));\n                return;\n            }\n            setTimeout(()=>{\n                react_dom__WEBPACK_IMPORTED_MODULE_1__.flushSync(()=>{\n                    a((u)=>{\n                        let b = u.findIndex((w)=>w.id === d.id);\n                        return b !== -1 ? [\n                            ...u.slice(0, b),\n                            {\n                                ...u[b],\n                                ...d\n                            },\n                            ...u.slice(b + 1)\n                        ] : [\n                            d,\n                            ...u\n                        ];\n                    });\n                });\n            });\n        }), []), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (y !== \"system\") {\n            M(y);\n            return;\n        }\n        if (y === \"system\" && (window.matchMedia && window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? M(\"dark\") : M(\"light\")), \"object\" == \"undefined\") return;\n        let d = window.matchMedia(\"(prefers-color-scheme: dark)\");\n        try {\n            d.addEventListener(\"change\", (param)=>{\n                let { matches: u } = param;\n                M(u ? \"dark\" : \"light\");\n            });\n        } catch (u) {\n            d.addListener((param)=>{\n                let { matches: b } = param;\n                try {\n                    M(b ? \"dark\" : \"light\");\n                } catch (w) {\n                    console.error(w);\n                }\n            });\n        }\n    }, [\n        y\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        C.length <= 1 && B(!1);\n    }, [\n        C\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        let d = (u)=>{\n            var w, D;\n            l.every((f)=>u[f] || u.code === f) && (B(!0), (w = A.current) == null || w.focus()), u.code === \"Escape\" && (document.activeElement === A.current || (D = A.current) != null && D.contains(document.activeElement)) && B(!1);\n        };\n        return document.addEventListener(\"keydown\", d), ()=>document.removeEventListener(\"keydown\", d);\n    }, [\n        l\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (A.current) return ()=>{\n            L.current && (L.current.focus({\n                preventScroll: !0\n            }), L.current = null, Y.current = !1);\n        };\n    }, [\n        A.current\n    ]), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"section\", {\n        \"aria-label\": \"\".concat(it, \" \").concat(Z),\n        tabIndex: -1,\n        \"aria-live\": \"polite\",\n        \"aria-relevant\": \"additions text\",\n        \"aria-atomic\": \"false\"\n    }, N.map((d, u)=>{\n        var D;\n        let [b, w] = d.split(\"-\");\n        return C.length ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"ol\", {\n            key: d,\n            dir: K === \"auto\" ? zt() : K,\n            tabIndex: -1,\n            ref: A,\n            className: h,\n            \"data-sonner-toaster\": !0,\n            \"data-theme\": dt,\n            \"data-y-position\": b,\n            \"data-lifted\": R && C.length > 1 && !E,\n            \"data-x-position\": w,\n            style: {\n                \"--front-toast-height\": \"\".concat(((D = G[0]) == null ? void 0 : D.height) || 0, \"px\"),\n                \"--offset\": typeof c == \"number\" ? \"\".concat(c, \"px\") : c || ne,\n                \"--width\": \"\".concat(se, \"px\"),\n                \"--gap\": \"\".concat(J, \"px\"),\n                ...O\n            },\n            onBlur: (f)=>{\n                Y.current && !f.currentTarget.contains(f.relatedTarget) && (Y.current = !1, L.current && (L.current.focus({\n                    preventScroll: !0\n                }), L.current = null));\n            },\n            onFocus: (f)=>{\n                f.target instanceof HTMLElement && f.target.dataset.dismissible === \"false\" || Y.current || (Y.current = !0, L.current = f.relatedTarget);\n            },\n            onMouseEnter: ()=>B(!0),\n            onMouseMove: ()=>B(!0),\n            onMouseLeave: ()=>{\n                q || B(!1);\n            },\n            onPointerDown: (f)=>{\n                f.target instanceof HTMLElement && f.target.dataset.dismissible === \"false\" || U(!0);\n            },\n            onPointerUp: ()=>U(!1)\n        }, C.filter((f)=>!f.position && u === 0 || f.position === d).map((f, H)=>{\n            var et, ot;\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ce, {\n                key: f.id,\n                icons: _,\n                index: H,\n                toast: f,\n                defaultRichColors: k,\n                duration: (et = i == null ? void 0 : i.duration) != null ? et : j,\n                className: i == null ? void 0 : i.className,\n                descriptionClassName: i == null ? void 0 : i.descriptionClassName,\n                invert: s,\n                visibleToasts: st,\n                closeButton: (ot = i == null ? void 0 : i.closeButton) != null ? ot : P,\n                interacting: q,\n                position: d,\n                style: i == null ? void 0 : i.style,\n                unstyled: i == null ? void 0 : i.unstyled,\n                classNames: i == null ? void 0 : i.classNames,\n                cancelButtonStyle: i == null ? void 0 : i.cancelButtonStyle,\n                actionButtonStyle: i == null ? void 0 : i.actionButtonStyle,\n                removeToast: tt,\n                toasts: C.filter((x)=>x.position == f.position),\n                heights: G.filter((x)=>x.position == f.position),\n                setHeights: Q,\n                expandByDefault: E,\n                gap: J,\n                loadingIcon: rt,\n                expanded: R,\n                pauseWhenPageIsHidden: lt,\n                cn: X\n            });\n        })) : null;\n    }));\n}, \"j7YKxjaGfyGXneekQac63uiM1+A=\")), \"j7YKxjaGfyGXneekQac63uiM1+A=\");\n_c5 = Be;\n //# sourceMappingURL=index.mjs.map\nvar _c, _c1, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"At\");\n$RefreshReg$(_c1, \"V\");\n$RefreshReg$(_c2, \"ce\");\n$RefreshReg$(_c3, \"Ce\");\n$RefreshReg$(_c4, \"Be$ee\");\n$RefreshReg$(_c5, \"Be\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zb25uZXIvZGlzdC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQW9EO0FBQTBCO0FBQXFCO0FBQUEsSUFBSUssS0FBR0MsQ0FBQUE7SUFBSSxPQUFPQTtRQUFHLEtBQUk7WUFBVSxPQUFPQztRQUFHLEtBQUk7WUFBTyxPQUFPQztRQUFHLEtBQUk7WUFBVSxPQUFPQztRQUFHLEtBQUk7WUFBUSxPQUFPQztRQUFHO1lBQVEsT0FBTztJQUFJO0FBQUMsR0FBRUMsS0FBR0MsTUFBTSxJQUFJQyxJQUFJLENBQUMsSUFBR0MsS0FBRztRQUFDLEVBQUNDLFNBQVFULENBQUMsRUFBQ1UsV0FBVUMsQ0FBQyxFQUFDO3lCQUFHYixnREFBZSxDQUFDLE9BQU07UUFBQ1ksV0FBVTtZQUFDO1lBQXlCQztTQUFFLENBQUNFLE1BQU0sQ0FBQ0MsU0FBU0MsSUFBSSxDQUFDO1FBQUssZ0JBQWVmO0lBQUMsaUJBQUVGLGdEQUFlLENBQUMsT0FBTTtRQUFDWSxXQUFVO0lBQWdCLEdBQUVMLEdBQUdXLEdBQUcsQ0FBQyxDQUFDQyxHQUFFQyxrQkFBSXBCLGdEQUFlLENBQUMsT0FBTTtZQUFDWSxXQUFVO1lBQXFCUyxLQUFJLGVBQWlCLE9BQUZEO1FBQUc7R0FBTWpCLG1CQUFHSCxnREFBZSxDQUFDLE9BQU07SUFBQ3NCLE9BQU07SUFBNkJDLFNBQVE7SUFBWWQsTUFBSztJQUFlZSxRQUFPO0lBQUtDLE9BQU07QUFBSSxpQkFBRXpCLGdEQUFlLENBQUMsUUFBTztJQUFDMEIsVUFBUztJQUFVQyxHQUFFO0lBQXlKQyxVQUFTO0FBQVMsS0FBSXZCLG1CQUFHTCxnREFBZSxDQUFDLE9BQU07SUFBQ3NCLE9BQU07SUFBNkJDLFNBQVE7SUFBWWQsTUFBSztJQUFlZSxRQUFPO0lBQUtDLE9BQU07QUFBSSxpQkFBRXpCLGdEQUFlLENBQUMsUUFBTztJQUFDMEIsVUFBUztJQUFVQyxHQUFFO0lBQTRPQyxVQUFTO0FBQVMsS0FBSXhCLG1CQUFHSixnREFBZSxDQUFDLE9BQU07SUFBQ3NCLE9BQU07SUFBNkJDLFNBQVE7SUFBWWQsTUFBSztJQUFlZSxRQUFPO0lBQUtDLE9BQU07QUFBSSxpQkFBRXpCLGdEQUFlLENBQUMsUUFBTztJQUFDMEIsVUFBUztJQUFVQyxHQUFFO0lBQTBPQyxVQUFTO0FBQVMsS0FBSXRCLG1CQUFHTixnREFBZSxDQUFDLE9BQU07SUFBQ3NCLE9BQU07SUFBNkJDLFNBQVE7SUFBWWQsTUFBSztJQUFlZSxRQUFPO0lBQUtDLE9BQU07QUFBSSxpQkFBRXpCLGdEQUFlLENBQUMsUUFBTztJQUFDMEIsVUFBUztJQUFVQyxHQUFFO0lBQXNJQyxVQUFTO0FBQVMsS0FBSUMsbUJBQUc3QixnREFBZSxDQUFDLE9BQU07SUFBQ3NCLE9BQU07SUFBNkJHLE9BQU07SUFBS0QsUUFBTztJQUFLRCxTQUFRO0lBQVlkLE1BQUs7SUFBT3FCLFFBQU87SUFBZUMsYUFBWTtJQUFNQyxlQUFjO0lBQVFDLGdCQUFlO0FBQU8saUJBQUVqQyxnREFBZSxDQUFDLFFBQU87SUFBQ2tDLElBQUc7SUFBS0MsSUFBRztJQUFJQyxJQUFHO0lBQUlDLElBQUc7QUFBSSxrQkFBR3JDLGdEQUFlLENBQUMsUUFBTztJQUFDa0MsSUFBRztJQUFJQyxJQUFHO0lBQUlDLElBQUc7SUFBS0MsSUFBRztBQUFJO0FBQTBCO0FBQUEsSUFBSUUsS0FBRzs7SUFBSyxJQUFHLENBQUNyQyxHQUFFVyxFQUFFLEdBQUN5QiwyQ0FBVyxDQUFDRyxTQUFTQyxNQUFNO0lBQUUsT0FBT0osNENBQVksQ0FBQztRQUFLLElBQUluQixJQUFFO1lBQUtOLEVBQUU0QixTQUFTQyxNQUFNO1FBQUM7UUFBRSxPQUFPRCxTQUFTRyxnQkFBZ0IsQ0FBQyxvQkFBbUJ6QixJQUFHLElBQUkwQixPQUFPQyxtQkFBbUIsQ0FBQyxvQkFBbUIzQjtJQUFFLEdBQUUsRUFBRSxHQUFFakI7QUFBQztHQUF4TnFDO0tBQUFBO0FBQWdQO0FBQUEsSUFBSVMsS0FBRyxHQUFFQyxLQUFHO0lBQU1DLGFBQWE7UUFBQyxJQUFJLENBQUNDLFNBQVMsR0FBQ3RDLENBQUFBLElBQUksS0FBSSxDQUFDdUMsV0FBVyxDQUFDQyxJQUFJLENBQUN4QyxJQUFHO2dCQUFLLElBQUlNLElBQUUsSUFBSSxDQUFDaUMsV0FBVyxDQUFDRSxPQUFPLENBQUN6QztnQkFBRyxJQUFJLENBQUN1QyxXQUFXLENBQUNHLE1BQU0sQ0FBQ3BDLEdBQUU7WUFBRTtRQUFHLElBQUksQ0FBQ3FDLE9BQU8sR0FBQzNDLENBQUFBO1lBQUksSUFBSSxDQUFDdUMsV0FBVyxDQUFDSyxPQUFPLENBQUN0QyxDQUFBQSxJQUFHQSxFQUFFTjtRQUFHO1FBQUUsSUFBSSxDQUFDNkMsUUFBUSxHQUFDN0MsQ0FBQUE7WUFBSSxJQUFJLENBQUMyQyxPQUFPLENBQUMzQyxJQUFHLElBQUksQ0FBQzhDLE1BQU0sR0FBQzttQkFBSSxJQUFJLENBQUNBLE1BQU07Z0JBQUM5QzthQUFFO1FBQUE7UUFBRSxJQUFJLENBQUMrQyxNQUFNLEdBQUMvQyxDQUFBQTtZQUFJLElBQUlnRDtZQUFFLElBQUcsRUFBQ0MsU0FBUTNDLENBQUMsRUFBQyxHQUFHQyxHQUFFLEdBQUNQLEdBQUVrRCxJQUFFLE9BQU9sRCxDQUFBQSxLQUFHLE9BQUssS0FBSyxJQUFFQSxFQUFFbUQsRUFBRSxLQUFHLFlBQVUsQ0FBQyxDQUFDSCxJQUFFaEQsRUFBRW1ELEVBQUUsS0FBRyxPQUFLLEtBQUssSUFBRUgsRUFBRUksTUFBTSxJQUFFLElBQUVwRCxFQUFFbUQsRUFBRSxHQUFDaEIsTUFBS2tCLElBQUUsSUFBSSxDQUFDUCxNQUFNLENBQUNRLElBQUksQ0FBQ0MsQ0FBQUEsSUFBR0EsRUFBRUosRUFBRSxLQUFHRCxJQUFHTSxJQUFFeEQsRUFBRXlELFdBQVcsS0FBRyxLQUFLLElBQUUsQ0FBQyxJQUFFekQsRUFBRXlELFdBQVc7WUFBQyxPQUFPSixJQUFFLElBQUksQ0FBQ1AsTUFBTSxHQUFDLElBQUksQ0FBQ0EsTUFBTSxDQUFDekMsR0FBRyxDQUFDa0QsQ0FBQUEsSUFBR0EsRUFBRUosRUFBRSxLQUFHRCxJQUFHLEtBQUksQ0FBQ1AsT0FBTyxDQUFDO29CQUFDLEdBQUdZLENBQUM7b0JBQUMsR0FBR3ZELENBQUM7b0JBQUNtRCxJQUFHRDtvQkFBRVEsT0FBTXBEO2dCQUFDLElBQUc7b0JBQUMsR0FBR2lELENBQUM7b0JBQUMsR0FBR3ZELENBQUM7b0JBQUNtRCxJQUFHRDtvQkFBRU8sYUFBWUQ7b0JBQUVFLE9BQU1wRDtnQkFBQyxLQUFHaUQsS0FBRyxJQUFJLENBQUNWLFFBQVEsQ0FBQztnQkFBQ2EsT0FBTXBEO2dCQUFFLEdBQUdDLENBQUM7Z0JBQUNrRCxhQUFZRDtnQkFBRUwsSUFBR0Q7WUFBQyxJQUFHQTtRQUFDO1FBQUUsSUFBSSxDQUFDUyxPQUFPLEdBQUMzRCxDQUFBQSxJQUFJQSxDQUFBQSxLQUFHLElBQUksQ0FBQzhDLE1BQU0sQ0FBQ0YsT0FBTyxDQUFDdEMsQ0FBQUE7Z0JBQUksSUFBSSxDQUFDaUMsV0FBVyxDQUFDSyxPQUFPLENBQUNyQyxDQUFBQSxJQUFHQSxFQUFFO3dCQUFDNEMsSUFBRzdDLEVBQUU2QyxFQUFFO3dCQUFDUSxTQUFRLENBQUM7b0JBQUM7WUFBRyxJQUFHLElBQUksQ0FBQ3BCLFdBQVcsQ0FBQ0ssT0FBTyxDQUFDdEMsQ0FBQUEsSUFBR0EsRUFBRTtvQkFBQzZDLElBQUduRDtvQkFBRTJELFNBQVEsQ0FBQztnQkFBQyxLQUFJM0QsQ0FBQUE7UUFBRyxJQUFJLENBQUNpRCxPQUFPLEdBQUMsQ0FBQ2pELEdBQUVNLElBQUksSUFBSSxDQUFDeUMsTUFBTSxDQUFDO2dCQUFDLEdBQUd6QyxDQUFDO2dCQUFDMkMsU0FBUWpEO1lBQUM7UUFBRyxJQUFJLENBQUM0RCxLQUFLLEdBQUMsQ0FBQzVELEdBQUVNLElBQUksSUFBSSxDQUFDeUMsTUFBTSxDQUFDO2dCQUFDLEdBQUd6QyxDQUFDO2dCQUFDMkMsU0FBUWpEO2dCQUFFNkQsTUFBSztZQUFPO1FBQUcsSUFBSSxDQUFDQyxPQUFPLEdBQUMsQ0FBQzlELEdBQUVNLElBQUksSUFBSSxDQUFDeUMsTUFBTSxDQUFDO2dCQUFDLEdBQUd6QyxDQUFDO2dCQUFDdUQsTUFBSztnQkFBVVosU0FBUWpEO1lBQUM7UUFBRyxJQUFJLENBQUMrRCxJQUFJLEdBQUMsQ0FBQy9ELEdBQUVNLElBQUksSUFBSSxDQUFDeUMsTUFBTSxDQUFDO2dCQUFDLEdBQUd6QyxDQUFDO2dCQUFDdUQsTUFBSztnQkFBT1osU0FBUWpEO1lBQUM7UUFBRyxJQUFJLENBQUNnRSxPQUFPLEdBQUMsQ0FBQ2hFLEdBQUVNLElBQUksSUFBSSxDQUFDeUMsTUFBTSxDQUFDO2dCQUFDLEdBQUd6QyxDQUFDO2dCQUFDdUQsTUFBSztnQkFBVVosU0FBUWpEO1lBQUM7UUFBRyxJQUFJLENBQUNpRSxPQUFPLEdBQUMsQ0FBQ2pFLEdBQUVNLElBQUksSUFBSSxDQUFDeUMsTUFBTSxDQUFDO2dCQUFDLEdBQUd6QyxDQUFDO2dCQUFDdUQsTUFBSztnQkFBVVosU0FBUWpEO1lBQUM7UUFBRyxJQUFJLENBQUNrRSxPQUFPLEdBQUMsQ0FBQ2xFLEdBQUVNO1lBQUssSUFBRyxDQUFDQSxHQUFFO1lBQU8sSUFBSUM7WUFBRUQsRUFBRTJELE9BQU8sS0FBRyxLQUFLLEtBQUkxRCxDQUFBQSxJQUFFLElBQUksQ0FBQ3dDLE1BQU0sQ0FBQztnQkFBQyxHQUFHekMsQ0FBQztnQkFBQzRELFNBQVFsRTtnQkFBRTZELE1BQUs7Z0JBQVVaLFNBQVEzQyxFQUFFMkQsT0FBTztnQkFBQ0UsYUFBWSxPQUFPN0QsRUFBRTZELFdBQVcsSUFBRSxhQUFXN0QsRUFBRTZELFdBQVcsR0FBQyxLQUFLO1lBQUMsRUFBQztZQUFHLElBQUlqQixJQUFFbEQsYUFBYW9FLFVBQVFwRSxJQUFFQSxLQUFJcUQsSUFBRTlDLE1BQUksS0FBSyxHQUFFaUQsR0FBRVIsSUFBRUUsRUFBRW1CLElBQUksQ0FBQyxPQUFNQztnQkFBSSxJQUFHZCxJQUFFO29CQUFDO29CQUFVYztpQkFBRSxnQkFBQ3BDLGlEQUFpQixDQUFDb0MsSUFBR2pCLElBQUUsQ0FBQyxHQUFFLElBQUksQ0FBQ04sTUFBTSxDQUFDO29CQUFDSSxJQUFHNUM7b0JBQUVzRCxNQUFLO29CQUFVWixTQUFRcUI7Z0JBQUM7cUJBQVEsSUFBR0UsR0FBR0YsTUFBSSxDQUFDQSxFQUFFRyxFQUFFLEVBQUM7b0JBQUNwQixJQUFFLENBQUM7b0JBQUUsSUFBSXFCLElBQUUsT0FBT3BFLEVBQUVzRCxLQUFLLElBQUUsYUFBVyxNQUFNdEQsRUFBRXNELEtBQUssQ0FBQyx1QkFBZ0MsT0FBVFUsRUFBRUssTUFBTSxLQUFJckUsRUFBRXNELEtBQUssRUFBQ2dCLElBQUUsT0FBT3RFLEVBQUU2RCxXQUFXLElBQUUsYUFBVyxNQUFNN0QsRUFBRTZELFdBQVcsQ0FBQyx1QkFBZ0MsT0FBVEcsRUFBRUssTUFBTSxLQUFJckUsRUFBRTZELFdBQVc7b0JBQUMsSUFBSSxDQUFDcEIsTUFBTSxDQUFDO3dCQUFDSSxJQUFHNUM7d0JBQUVzRCxNQUFLO3dCQUFRWixTQUFReUI7d0JBQUVQLGFBQVlTO29CQUFDO2dCQUFFLE9BQU0sSUFBR3RFLEVBQUV3RCxPQUFPLEtBQUcsS0FBSyxHQUFFO29CQUFDVCxJQUFFLENBQUM7b0JBQUUsSUFBSXFCLElBQUUsT0FBT3BFLEVBQUV3RCxPQUFPLElBQUUsYUFBVyxNQUFNeEQsRUFBRXdELE9BQU8sQ0FBQ1EsS0FBR2hFLEVBQUV3RCxPQUFPLEVBQUNjLElBQUUsT0FBT3RFLEVBQUU2RCxXQUFXLElBQUUsYUFBVyxNQUFNN0QsRUFBRTZELFdBQVcsQ0FBQ0csS0FBR2hFLEVBQUU2RCxXQUFXO29CQUFDLElBQUksQ0FBQ3BCLE1BQU0sQ0FBQzt3QkFBQ0ksSUFBRzVDO3dCQUFFc0QsTUFBSzt3QkFBVVosU0FBUXlCO3dCQUFFUCxhQUFZUztvQkFBQztnQkFBRTtZQUFDLEdBQUdDLEtBQUssQ0FBQyxPQUFNUDtnQkFBSSxJQUFHZCxJQUFFO29CQUFDO29CQUFTYztpQkFBRSxFQUFDaEUsRUFBRXNELEtBQUssS0FBRyxLQUFLLEdBQUU7b0JBQUNQLElBQUUsQ0FBQztvQkFBRSxJQUFJeUIsSUFBRSxPQUFPeEUsRUFBRXNELEtBQUssSUFBRSxhQUFXLE1BQU10RCxFQUFFc0QsS0FBSyxDQUFDVSxLQUFHaEUsRUFBRXNELEtBQUssRUFBQ2MsSUFBRSxPQUFPcEUsRUFBRTZELFdBQVcsSUFBRSxhQUFXLE1BQU03RCxFQUFFNkQsV0FBVyxDQUFDRyxLQUFHaEUsRUFBRTZELFdBQVc7b0JBQUMsSUFBSSxDQUFDcEIsTUFBTSxDQUFDO3dCQUFDSSxJQUFHNUM7d0JBQUVzRCxNQUFLO3dCQUFRWixTQUFRNkI7d0JBQUVYLGFBQVlPO29CQUFDO2dCQUFFO1lBQUMsR0FBR0ssT0FBTyxDQUFDO2dCQUFLLElBQUlUO2dCQUFFakIsS0FBSSxLQUFJLENBQUNNLE9BQU8sQ0FBQ3BELElBQUdBLElBQUUsS0FBSyxJQUFHLENBQUMrRCxJQUFFaEUsRUFBRXlFLE9BQU8sS0FBRyxRQUFNVCxFQUFFVSxJQUFJLENBQUMxRTtZQUFFLElBQUdpRCxJQUFFLElBQUksSUFBSWEsUUFBUSxDQUFDRSxHQUFFUSxJQUFJOUIsRUFBRXFCLElBQUksQ0FBQyxJQUFJYixDQUFDLENBQUMsRUFBRSxLQUFHLFdBQVNzQixFQUFFdEIsQ0FBQyxDQUFDLEVBQUUsSUFBRWMsRUFBRWQsQ0FBQyxDQUFDLEVBQUUsR0FBR3FCLEtBQUssQ0FBQ0M7WUFBSSxPQUFPLE9BQU92RSxLQUFHLFlBQVUsT0FBT0EsS0FBRyxXQUFTO2dCQUFDMEUsUUFBTzFCO1lBQUMsSUFBRTJCLE9BQU9DLE1BQU0sQ0FBQzVFLEdBQUU7Z0JBQUMwRSxRQUFPMUI7WUFBQztRQUFFO1FBQUUsSUFBSSxDQUFDNkIsTUFBTSxHQUFDLENBQUNwRixHQUFFTTtZQUFLLElBQUlDLElBQUUsQ0FBQ0QsS0FBRyxPQUFLLEtBQUssSUFBRUEsRUFBRTZDLEVBQUUsS0FBR2hCO1lBQUssT0FBTyxJQUFJLENBQUNZLE1BQU0sQ0FBQztnQkFBQ3NDLEtBQUlyRixFQUFFTztnQkFBRzRDLElBQUc1QztnQkFBRSxHQUFHRCxDQUFDO1lBQUEsSUFBR0M7UUFBQztRQUFFLElBQUksQ0FBQ2dDLFdBQVcsR0FBQyxFQUFFLEVBQUMsSUFBSSxDQUFDTyxNQUFNLEdBQUMsRUFBRTtJQUFBO0FBQUMsR0FBRXdDLElBQUUsSUFBSWxELElBQUdtRCxLQUFHLENBQUNsRyxHQUFFVztJQUFLLElBQUlNLElBQUUsQ0FBQ04sS0FBRyxPQUFLLEtBQUssSUFBRUEsRUFBRW1ELEVBQUUsS0FBR2hCO0lBQUssT0FBT21ELEVBQUV6QyxRQUFRLENBQUM7UUFBQ2EsT0FBTXJFO1FBQUUsR0FBR1csQ0FBQztRQUFDbUQsSUFBRzdDO0lBQUMsSUFBR0E7QUFBQyxHQUFFa0UsS0FBR25GLENBQUFBLElBQUdBLEtBQUcsT0FBT0EsS0FBRyxZQUFVLFFBQU9BLEtBQUcsT0FBT0EsRUFBRW9GLEVBQUUsSUFBRSxhQUFXLFlBQVdwRixLQUFHLE9BQU9BLEVBQUVzRixNQUFNLElBQUUsVUFBU2EsS0FBR0QsSUFBR0UsS0FBRyxJQUFJSCxFQUFFeEMsTUFBTSxFQUFDNEMsS0FBR1IsT0FBT0MsTUFBTSxDQUFDSyxJQUFHO0lBQUMxQixTQUFRd0IsRUFBRXhCLE9BQU87SUFBQ0MsTUFBS3VCLEVBQUV2QixJQUFJO0lBQUNDLFNBQVFzQixFQUFFdEIsT0FBTztJQUFDSixPQUFNMEIsRUFBRTFCLEtBQUs7SUFBQ3dCLFFBQU9FLEVBQUVGLE1BQU07SUFBQ25DLFNBQVFxQyxFQUFFckMsT0FBTztJQUFDaUIsU0FBUW9CLEVBQUVwQixPQUFPO0lBQUNQLFNBQVEyQixFQUFFM0IsT0FBTztJQUFDTSxTQUFRcUIsRUFBRXJCLE9BQU87QUFBQSxHQUFFO0lBQUMwQixZQUFXRjtBQUFFO0FBQUcsU0FBU0csR0FBR3ZHLENBQUM7UUFBQyxFQUFDd0csVUFBUzdGLENBQUMsRUFBQyxHQUFaLGlFQUFhLENBQUM7SUFBRyxJQUFHLENBQUNYLEtBQUcsT0FBT3VDLFlBQVUsYUFBWTtJQUFPLElBQUl0QixJQUFFc0IsU0FBU2tFLElBQUksSUFBRWxFLFNBQVNtRSxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFDeEYsSUFBRXFCLFNBQVMzQixhQUFhLENBQUM7SUFBU00sRUFBRXNELElBQUksR0FBQyxZQUFXN0QsTUFBSSxTQUFPTSxFQUFFMEYsVUFBVSxHQUFDMUYsRUFBRTJGLFlBQVksQ0FBQzFGLEdBQUVELEVBQUUwRixVQUFVLElBQUUxRixFQUFFNEYsV0FBVyxDQUFDM0YsSUFBR0EsRUFBRTRGLFVBQVUsR0FBQzVGLEVBQUU0RixVQUFVLENBQUNDLE9BQU8sR0FBQy9HLElBQUVrQixFQUFFMkYsV0FBVyxDQUFDdEUsU0FBU3lFLGNBQWMsQ0FBQ2hIO0FBQUc7QUFBQ3VHLEdBQUk7QUFDajZMLFNBQVNVLEVBQUVqSCxDQUFDO0lBQUUsT0FBT0EsRUFBRWtILEtBQUssS0FBRyxLQUFLO0FBQUM7TUFBNUJEO0FBQTZCLElBQUlFLEtBQUcsR0FBRUMsS0FBRyxRQUFPQyxLQUFHLEtBQUlDLEtBQUcsS0FBSUMsS0FBRyxJQUFHQyxLQUFHLElBQUdDLEtBQUc7QUFBSSxTQUFTQztJQUFHO1FBQUcxSCxFQUFILHVCQUFJOztJQUFFLE9BQU9BLEVBQUVhLE1BQU0sQ0FBQ0MsU0FBU0MsSUFBSSxDQUFDO0FBQUk7QUFBQyxJQUFJNEcsS0FBRzNILENBQUFBOztJQUFJLElBQUk0SCxJQUFHQyxJQUFHQyxJQUFHQyxJQUFHQyxJQUFHQyxJQUFHQyxJQUFHQyxJQUFHQyxJQUFHQyxJQUFHQztJQUFHLElBQUcsRUFBQ0MsUUFBTzVILENBQUMsRUFBQzZILE9BQU12SCxDQUFDLEVBQUN3SCxVQUFTdkgsQ0FBQyxFQUFDd0gsYUFBWTdFLENBQUMsRUFBQzhFLFlBQVczRSxDQUFDLEVBQUM0RSxlQUFjekUsQ0FBQyxFQUFDMEUsU0FBUWxGLENBQUMsRUFBQ21GLE9BQU01RSxDQUFDLEVBQUNULFFBQU93QixDQUFDLEVBQUM4RCxVQUFTdEQsQ0FBQyxFQUFDdUQsYUFBWTNELENBQUMsRUFBQzRELG1CQUFrQjFELENBQUMsRUFBQzJELGFBQVlDLENBQUMsRUFBQ0MsT0FBTUMsRUFBRSxFQUFDQyxtQkFBa0JDLENBQUMsRUFBQ0MsbUJBQWtCQyxDQUFDLEVBQUMvSSxXQUFVZ0osSUFBRSxFQUFFLEVBQUNDLHNCQUFxQkMsS0FBRyxFQUFFLEVBQUNDLFVBQVNDLENBQUMsRUFBQ0MsVUFBU0MsRUFBRSxFQUFDQyxLQUFJQyxFQUFFLEVBQUNDLGFBQVlDLENBQUMsRUFBQ0MsaUJBQWdCQyxDQUFDLEVBQUNDLFlBQVdDLENBQUMsRUFBQ0MsT0FBTUMsQ0FBQyxFQUFDQyxzQkFBcUJDLElBQUUsYUFBYSxFQUFDQyx1QkFBc0JDLENBQUMsRUFBQ0MsSUFBR0MsQ0FBQyxFQUFDLEdBQUNoTCxHQUFFLENBQUNpTCxHQUFFQyxFQUFFLEdBQUN4TCwyQ0FBVSxDQUFDLENBQUMsSUFBRyxDQUFDeUwsR0FBRUMsR0FBRyxHQUFDMUwsMkNBQVUsQ0FBQyxDQUFDLElBQUcsQ0FBQzJMLEdBQUVDLEVBQUUsR0FBQzVMLDJDQUFVLENBQUMsQ0FBQyxJQUFHLENBQUM2TCxHQUFFQyxFQUFFLEdBQUM5TCwyQ0FBVSxDQUFDLENBQUMsSUFBRyxDQUFDK0wsR0FBRUMsR0FBRyxHQUFDaE0sMkNBQVUsQ0FBQyxDQUFDLElBQUcsQ0FBQytCLEdBQUVrSyxFQUFFLEdBQUNqTSwyQ0FBVSxDQUFDLElBQUcsQ0FBQ2tNLEdBQUVDLEVBQUUsR0FBQ25NLDJDQUFVLENBQUMsSUFBR29NLElBQUVwTSx5Q0FBUSxDQUFDdUIsRUFBRTRJLFFBQVEsSUFBRUMsS0FBR3pDLEtBQUkyRSxJQUFFdE0seUNBQVEsQ0FBQyxPQUFNdU0sSUFBRXZNLHlDQUFRLENBQUMsT0FBTXdNLEtBQUdoSSxNQUFJLEdBQUVpSSxLQUFHakksSUFBRSxLQUFHQyxHQUFFaUksSUFBRW5MLEVBQUV1RCxJQUFJLEVBQUM2SCxJQUFFcEwsRUFBRW1ELFdBQVcsS0FBRyxDQUFDLEdBQUVrSSxLQUFHckwsRUFBRVAsU0FBUyxJQUFFLElBQUc2TCxLQUFHdEwsRUFBRTBJLG9CQUFvQixJQUFFLElBQUc2QyxLQUFHOU0sMENBQVMsQ0FBQyxJQUFJaUUsRUFBRStJLFNBQVMsQ0FBQ0MsQ0FBQUEsSUFBR0EsRUFBRUMsT0FBTyxLQUFHM0wsRUFBRTZDLEVBQUUsS0FBRyxHQUFFO1FBQUNIO1FBQUUxQyxFQUFFNkMsRUFBRTtLQUFDLEdBQUUrSSxLQUFHbk4sMENBQVMsQ0FBQztRQUFLLElBQUlpTjtRQUFFLE9BQU0sQ0FBQ0EsSUFBRTFMLEVBQUVpSSxXQUFXLEtBQUcsT0FBS3lELElBQUV4RDtJQUFDLEdBQUU7UUFBQ2xJLEVBQUVpSSxXQUFXO1FBQUNDO0tBQUUsR0FBRTJELEtBQUdwTiwwQ0FBUyxDQUFDLElBQUl1QixFQUFFNEksUUFBUSxJQUFFQyxLQUFHekMsSUFBRztRQUFDcEcsRUFBRTRJLFFBQVE7UUFBQ0M7S0FBRSxHQUFFaUQsS0FBR3JOLHlDQUFRLENBQUMsSUFBR3NOLElBQUV0Tix5Q0FBUSxDQUFDLElBQUd1TixLQUFHdk4seUNBQVEsQ0FBQyxJQUFHd04sS0FBR3hOLHlDQUFRLENBQUMsT0FBTSxDQUFDeU4sSUFBR0MsR0FBRyxHQUFDcEQsR0FBR3FELEtBQUssQ0FBQyxNQUFLQyxLQUFHNU4sMENBQVMsQ0FBQyxJQUFJaUUsRUFBRTRKLE1BQU0sQ0FBQyxDQUFDWixHQUFFYSxHQUFFQyxJQUFJQSxLQUFHakIsS0FBR0csSUFBRUEsSUFBRWEsRUFBRWxNLE1BQU0sRUFBQyxJQUFHO1FBQUNxQztRQUFFNkk7S0FBRyxHQUFFa0IsS0FBR3JMLE1BQUtzTCxLQUFHMU0sRUFBRXNILE1BQU0sSUFBRTVILEdBQUVpTixLQUFHeEIsTUFBSTtJQUFVWSxFQUFFYSxPQUFPLEdBQUNuTywwQ0FBUyxDQUFDLElBQUk4TSxLQUFHdEMsS0FBR29ELElBQUc7UUFBQ2Q7UUFBR2M7S0FBRyxHQUFFNU4sNENBQVcsQ0FBQztRQUFLd0wsRUFBRSxDQUFDO0lBQUUsR0FBRSxFQUFFLEdBQUV4TCw0Q0FBVyxDQUFDO1FBQUssSUFBSWlOLElBQUVWLEVBQUU0QixPQUFPO1FBQUMsSUFBR2xCLEdBQUU7WUFBQyxJQUFJYSxJQUFFYixFQUFFbUIscUJBQXFCLEdBQUd4TSxNQUFNO1lBQUMsT0FBT3VLLEVBQUUyQixJQUFHeEosRUFBRXlKLENBQUFBLElBQUc7b0JBQUM7d0JBQUNiLFNBQVEzTCxFQUFFNkMsRUFBRTt3QkFBQ3hDLFFBQU9rTTt3QkFBRXpELFVBQVM5SSxFQUFFOEksUUFBUTtvQkFBQTt1QkFBSzBEO2lCQUFFLEdBQUUsSUFBSXpKLEVBQUV5SixDQUFBQSxJQUFHQSxFQUFFNU0sTUFBTSxDQUFDa04sQ0FBQUEsSUFBR0EsRUFBRW5CLE9BQU8sS0FBRzNMLEVBQUU2QyxFQUFFO1FBQUU7SUFBQyxHQUFFO1FBQUNFO1FBQUUvQyxFQUFFNkMsRUFBRTtLQUFDLEdBQUVwRSxrREFBaUIsQ0FBQztRQUFLLElBQUcsQ0FBQ3VMLEdBQUU7UUFBTyxJQUFJMEIsSUFBRVYsRUFBRTRCLE9BQU8sRUFBQ0wsSUFBRWIsRUFBRXZELEtBQUssQ0FBQzlILE1BQU07UUFBQ3FMLEVBQUV2RCxLQUFLLENBQUM5SCxNQUFNLEdBQUM7UUFBTyxJQUFJbU0sSUFBRWQsRUFBRW1CLHFCQUFxQixHQUFHeE0sTUFBTTtRQUFDcUwsRUFBRXZELEtBQUssQ0FBQzlILE1BQU0sR0FBQ2tNLEdBQUUzQixFQUFFNEIsSUFBR3pKLEVBQUUrSixDQUFBQSxJQUFHQSxFQUFFOUosSUFBSSxDQUFDZ0ssQ0FBQUEsSUFBR0EsRUFBRXJCLE9BQU8sS0FBRzNMLEVBQUU2QyxFQUFFLElBQUVpSyxFQUFFL00sR0FBRyxDQUFDaU4sQ0FBQUEsSUFBR0EsRUFBRXJCLE9BQU8sS0FBRzNMLEVBQUU2QyxFQUFFLEdBQUM7b0JBQUMsR0FBR21LLENBQUM7b0JBQUMzTSxRQUFPbU07Z0JBQUMsSUFBRVEsS0FBRztnQkFBQztvQkFBQ3JCLFNBQVEzTCxFQUFFNkMsRUFBRTtvQkFBQ3hDLFFBQU9tTTtvQkFBRTFELFVBQVM5SSxFQUFFOEksUUFBUTtnQkFBQTttQkFBS2dFO2FBQUU7SUFBQyxHQUFFO1FBQUM5QztRQUFFaEssRUFBRW9ELEtBQUs7UUFBQ3BELEVBQUU2RCxXQUFXO1FBQUNkO1FBQUUvQyxFQUFFNkMsRUFBRTtLQUFDO0lBQUUsSUFBSW9LLElBQUV4Tyw4Q0FBYSxDQUFDO1FBQUswTCxHQUFHLENBQUMsSUFBR08sRUFBRXFCLEVBQUVhLE9BQU8sR0FBRTdKLEVBQUUySSxDQUFBQSxJQUFHQSxFQUFFOUwsTUFBTSxDQUFDMk0sQ0FBQUEsSUFBR0EsRUFBRVosT0FBTyxLQUFHM0wsRUFBRTZDLEVBQUUsSUFBR3NLLFdBQVc7WUFBSy9JLEVBQUVwRTtRQUFFLEdBQUV3RztJQUFHLEdBQUU7UUFBQ3hHO1FBQUVvRTtRQUFFckI7UUFBRWdKO0tBQUU7SUFBRXROLDRDQUFXLENBQUM7UUFBSyxJQUFHdUIsRUFBRTRELE9BQU8sSUFBRXVILE1BQUksYUFBV25MLEVBQUU0SSxRQUFRLEtBQUcsSUFBRSxLQUFHNUksRUFBRXVELElBQUksS0FBRyxXQUFVO1FBQU8sSUFBSW1JO1FBQUUsT0FBT2xILEtBQUc1QixLQUFHaUgsS0FBRzRDLEtBQUcsQ0FBQztZQUFLLElBQUdULEdBQUdZLE9BQU8sR0FBQ2QsR0FBR2MsT0FBTyxFQUFDO2dCQUFDLElBQUlFLElBQUUsSUFBSU0sT0FBT0MsT0FBTyxLQUFHdkIsR0FBR2MsT0FBTztnQkFBQy9CLEVBQUUrQixPQUFPLEdBQUMvQixFQUFFK0IsT0FBTyxHQUFDRTtZQUFDO1lBQUNkLEdBQUdZLE9BQU8sR0FBQyxJQUFJUSxPQUFPQyxPQUFPO1FBQUUsT0FBSyxDQUFDO1lBQUt4QyxFQUFFK0IsT0FBTyxLQUFHLElBQUUsS0FBSWQsQ0FBQUEsR0FBR2MsT0FBTyxHQUFDLElBQUlRLE9BQU9DLE9BQU8sSUFBRzNCLElBQUV5QixXQUFXO2dCQUFLLElBQUlMO2dCQUFHQSxDQUFBQSxJQUFFOU0sRUFBRXNOLFdBQVcsS0FBRyxRQUFNUixFQUFFcEksSUFBSSxDQUFDMUUsR0FBRUEsSUFBR2lOO1lBQUcsR0FBRXBDLEVBQUUrQixPQUFPO1FBQUUsTUFBSyxJQUFJVyxhQUFhN0I7SUFBRSxHQUFFO1FBQUNsSDtRQUFFNUI7UUFBRTVDO1FBQUVtTDtRQUFFdEI7UUFBRTRDO1FBQUdRO0tBQUUsR0FBRXhPLDRDQUFXLENBQUM7UUFBS3VCLEVBQUV3TixNQUFNLElBQUVQO0lBQUcsR0FBRTtRQUFDQTtRQUFFak4sRUFBRXdOLE1BQU07S0FBQztJQUFFLFNBQVNDO1FBQUssSUFBSS9CLEdBQUVhLEdBQUVDO1FBQUUsT0FBTy9DLEtBQUcsUUFBTUEsRUFBRTlGLE9BQU8saUJBQUNsRixnREFBZSxDQUFDLE9BQU07WUFBQ2dCLFdBQVVzSyxFQUFFUixLQUFHLE9BQUssS0FBSyxJQUFFQSxFQUFFbUUsTUFBTSxFQUFDLENBQUNoQyxJQUFFMUwsS0FBRyxPQUFLLEtBQUssSUFBRUEsRUFBRXNKLFVBQVUsS0FBRyxPQUFLLEtBQUssSUFBRW9DLEVBQUVnQyxNQUFNLEVBQUM7WUFBaUIsZ0JBQWV2QyxNQUFJO1FBQVMsR0FBRTFCLEVBQUU5RixPQUFPLElBQUV3RixrQkFBRTFLLGdEQUFlLENBQUMsT0FBTTtZQUFDZ0IsV0FBVXNLLEVBQUVSLEtBQUcsT0FBSyxLQUFLLElBQUVBLEVBQUVtRSxNQUFNLEVBQUMsQ0FBQ25CLElBQUV2TSxLQUFHLE9BQUssS0FBSyxJQUFFQSxFQUFFc0osVUFBVSxLQUFHLE9BQUssS0FBSyxJQUFFaUQsRUFBRW1CLE1BQU0sRUFBQztZQUFpQixnQkFBZXZDLE1BQUk7UUFBUyxHQUFFaEMsbUJBQUcxSyxnREFBZSxDQUFDYyxJQUFHO1lBQUNFLFdBQVVzSyxFQUFFUixLQUFHLE9BQUssS0FBSyxJQUFFQSxFQUFFbUUsTUFBTSxFQUFDLENBQUNsQixJQUFFeE0sS0FBRyxPQUFLLEtBQUssSUFBRUEsRUFBRXNKLFVBQVUsS0FBRyxPQUFLLEtBQUssSUFBRWtELEVBQUVrQixNQUFNO1lBQUVsTyxTQUFRMkwsTUFBSTtRQUFTO0lBQUU7SUFBQyxxQkFBTzFNLGdEQUFlLENBQUMsTUFBSztRQUFDa1AsVUFBUztRQUFFQyxLQUFJNUM7UUFBRXZMLFdBQVVzSyxFQUFFdEIsR0FBRTRDLElBQUc5QixLQUFHLE9BQUssS0FBSyxJQUFFQSxFQUFFaEMsS0FBSyxFQUFDLENBQUNaLEtBQUczRyxLQUFHLE9BQUssS0FBSyxJQUFFQSxFQUFFc0osVUFBVSxLQUFHLE9BQUssS0FBSyxJQUFFM0MsR0FBR1ksS0FBSyxFQUFDZ0MsS0FBRyxPQUFLLEtBQUssSUFBRUEsRUFBRXNFLE9BQU8sRUFBQ3RFLEtBQUcsT0FBSyxLQUFLLElBQUVBLENBQUMsQ0FBQzRCLEVBQUUsRUFBQyxDQUFDdkUsS0FBRzVHLEtBQUcsT0FBSyxLQUFLLElBQUVBLEVBQUVzSixVQUFVLEtBQUcsT0FBSyxLQUFLLElBQUUxQyxFQUFFLENBQUN1RSxFQUFFO1FBQUUscUJBQW9CO1FBQUcsb0JBQW1CLENBQUN0RSxLQUFHN0csRUFBRThOLFVBQVUsS0FBRyxPQUFLakgsS0FBR3ZDO1FBQUUsZUFBYyxDQUFFdEUsQ0FBQUEsRUFBRStFLEdBQUcsSUFBRS9FLEVBQUV3SCxRQUFRLElBQUV2SCxDQUFBQTtRQUFHLGdCQUFlK0o7UUFBRSxnQkFBZSxDQUFDLENBQUNoSyxFQUFFNEQsT0FBTztRQUFDLGVBQWM0RztRQUFFLGdCQUFlTjtRQUFFLGdCQUFlZ0I7UUFBRyxtQkFBa0JnQjtRQUFHLG1CQUFrQkM7UUFBRyxjQUFhbEo7UUFBRSxjQUFhZ0k7UUFBRyxnQkFBZWI7UUFBRSxvQkFBbUJnQjtRQUFFLGFBQVlEO1FBQUUsZUFBY3VCO1FBQUcsa0JBQWlCcEM7UUFBRSxpQkFBZ0IsQ0FBQyxDQUFFOUYsQ0FBQUEsS0FBRzZFLEtBQUdXLENBQUFBO1FBQUc3QixPQUFNO1lBQUMsV0FBVWxGO1lBQUUsbUJBQWtCQTtZQUFFLGFBQVllLEVBQUVsQixNQUFNLEdBQUNHO1lBQUUsWUFBVyxHQUFpQixPQUFkaUgsSUFBRTFKLElBQUV1TCxFQUFFYSxPQUFPLEVBQUM7WUFBSSxvQkFBbUJ2RCxJQUFFLFNBQU8sR0FBSyxPQUFGc0IsR0FBRTtZQUFJLEdBQUd2QyxFQUFFO1lBQUMsR0FBR3BJLEVBQUVtSSxLQUFLO1FBQUE7UUFBRTRGLGVBQWNyQyxDQUFBQTtZQUFJaUIsTUFBSSxDQUFDdkIsS0FBSUwsQ0FBQUEsRUFBRTZCLE9BQU8sR0FBQyxJQUFJUSxNQUFLMUMsRUFBRXFCLEVBQUVhLE9BQU8sR0FBRWxCLEVBQUVzQyxNQUFNLENBQUNDLGlCQUFpQixDQUFDdkMsRUFBRXdDLFNBQVMsR0FBRXhDLEVBQUVzQyxNQUFNLENBQUNHLE9BQU8sS0FBRyxZQUFXOUQsQ0FBQUEsRUFBRSxDQUFDLElBQUc0QixHQUFHVyxPQUFPLEdBQUM7Z0JBQUN6QixHQUFFTyxFQUFFMEMsT0FBTztnQkFBQzVKLEdBQUVrSCxFQUFFMkMsT0FBTztZQUFBLEVBQUM7UUFBRTtRQUFFQyxhQUFZO1lBQUssSUFBSXhCLEdBQUV5QixHQUFFdkIsR0FBRXdCO1lBQUcsSUFBR2xFLEtBQUcsQ0FBQ2MsR0FBRTtZQUFPYSxHQUFHVyxPQUFPLEdBQUM7WUFBSyxJQUFJbEIsSUFBRStDLE9BQU8sQ0FBQyxDQUFDM0IsSUFBRTlCLEVBQUU0QixPQUFPLEtBQUcsT0FBSyxLQUFLLElBQUVFLEVBQUUzRSxLQUFLLENBQUN1RyxnQkFBZ0IsQ0FBQyxrQkFBa0JDLE9BQU8sQ0FBQyxNQUFLLEdBQUUsS0FBSSxJQUFHcEMsSUFBRSxJQUFJYSxPQUFPQyxPQUFPLEtBQUksRUFBQ2tCLElBQUV4RCxFQUFFNkIsT0FBTyxLQUFHLE9BQUssS0FBSyxJQUFFMkIsRUFBRWxCLE9BQU8sRUFBQyxHQUFHYixJQUFFb0MsS0FBS0MsR0FBRyxDQUFDbkQsS0FBR2E7WUFBRSxJQUFHcUMsS0FBS0MsR0FBRyxDQUFDbkQsTUFBSW5GLE1BQUlpRyxJQUFFLEtBQUk7Z0JBQUM5QixFQUFFcUIsRUFBRWEsT0FBTyxHQUFFLENBQUNJLElBQUVoTixFQUFFOE8sU0FBUyxLQUFHLFFBQU05QixFQUFFdEksSUFBSSxDQUFDMUUsR0FBRUEsSUFBR2lOLEtBQUkxQyxFQUFFLENBQUMsSUFBR0UsR0FBRyxDQUFDO2dCQUFHO1lBQU07WUFBRStELENBQUFBLEtBQUd4RCxFQUFFNEIsT0FBTyxLQUFHLFFBQU00QixHQUFHckcsS0FBSyxDQUFDNEcsV0FBVyxDQUFDLGtCQUFpQixRQUFPMUUsRUFBRSxDQUFDO1FBQUU7UUFBRTJFLGVBQWN0RCxDQUFBQTtZQUFJLElBQUk2QyxHQUFFdkI7WUFBRSxJQUFHLENBQUNmLEdBQUdXLE9BQU8sSUFBRSxDQUFDeEIsR0FBRTtZQUFPLElBQUltQixJQUFFYixFQUFFMkMsT0FBTyxHQUFDcEMsR0FBR1csT0FBTyxDQUFDcEksQ0FBQyxFQUFDZ0ksSUFBRSxDQUFDLENBQUMrQixJQUFFN00sT0FBT3VOLFlBQVksRUFBQyxLQUFJLE9BQUssS0FBSyxJQUFFVixFQUFFVyxRQUFRLEdBQUdwTSxNQUFNLElBQUUsR0FBRWdLLElBQUVaLE9BQUssUUFBTTBDLEtBQUtPLEdBQUcsQ0FBQyxHQUFFNUMsS0FBR3FDLEtBQUtRLEdBQUcsQ0FBQyxHQUFFN0M7WUFBR3FDLEtBQUtDLEdBQUcsQ0FBQy9CLEtBQUcsS0FBR3JDLEdBQUcsQ0FBQyxJQUFHLENBQUMrQixLQUFJLEVBQUNRLElBQUVoQyxFQUFFNEIsT0FBTyxLQUFHLFFBQU1JLEVBQUU3RSxLQUFLLENBQUM0RyxXQUFXLENBQUMsa0JBQWlCLEdBQUssT0FBRmpDLEdBQUUsTUFBRztRQUFFO0lBQUMsR0FBRWxCLE1BQUksQ0FBQzVMLEVBQUUrRSxHQUFHLGlCQUFDdEcsZ0RBQWUsQ0FBQyxVQUFTO1FBQUMsY0FBYWtMO1FBQUUsaUJBQWdCZ0Q7UUFBRyxxQkFBb0IsQ0FBQztRQUFFMEMsU0FBUTFDLE1BQUksQ0FBQ3ZCLElBQUUsS0FBSyxJQUFFO1lBQUssSUFBSU07WUFBRXVCLEtBQUksQ0FBQ3ZCLElBQUUxTCxFQUFFOE8sU0FBUyxLQUFHLFFBQU1wRCxFQUFFaEgsSUFBSSxDQUFDMUUsR0FBRUE7UUFBRTtRQUFFUCxXQUFVc0ssRUFBRVIsS0FBRyxPQUFLLEtBQUssSUFBRUEsRUFBRXRCLFdBQVcsRUFBQyxDQUFDbkIsS0FBRzlHLEtBQUcsT0FBSyxLQUFLLElBQUVBLEVBQUVzSixVQUFVLEtBQUcsT0FBSyxLQUFLLElBQUV4QyxHQUFHbUIsV0FBVztJQUFDLEdBQUUsQ0FBQ2xCLEtBQUcwQyxLQUFHLE9BQUssS0FBSyxJQUFFQSxFQUFFNkYsS0FBSyxLQUFHLE9BQUt2SSxLQUFHckcsTUFBSSxNQUFLVixFQUFFK0UsR0FBRyxrQkFBRXRHLGlEQUFnQixDQUFDdUIsRUFBRW9ELEtBQUssSUFBRXBELEVBQUUrRSxHQUFHLEdBQUMvRSxFQUFFK0UsR0FBRyxHQUFDLE9BQU8vRSxFQUFFb0QsS0FBSyxJQUFFLGFBQVdwRCxFQUFFb0QsS0FBSyxLQUFHcEQsRUFBRW9ELEtBQUssaUJBQUMzRSxnREFBZSxDQUFDQSwyQ0FBVSxFQUFDLE1BQUswTSxLQUFHbkwsRUFBRXdQLElBQUksSUFBRXhQLEVBQUU0RCxPQUFPLGlCQUFDbkYsZ0RBQWUsQ0FBQyxPQUFNO1FBQUMsYUFBWTtRQUFHZ0IsV0FBVXNLLEVBQUVSLEtBQUcsT0FBSyxLQUFLLElBQUVBLEVBQUVpRyxJQUFJLEVBQUMsQ0FBQ3hJLEtBQUdoSCxLQUFHLE9BQUssS0FBSyxJQUFFQSxFQUFFc0osVUFBVSxLQUFHLE9BQUssS0FBSyxJQUFFdEMsR0FBR3dJLElBQUk7SUFBQyxHQUFFeFAsRUFBRTRELE9BQU8sSUFBRTVELEVBQUV1RCxJQUFJLEtBQUcsYUFBVyxDQUFDdkQsRUFBRXdQLElBQUksR0FBQ3hQLEVBQUV3UCxJQUFJLElBQUUvQixPQUFLLE1BQUt6TixFQUFFdUQsSUFBSSxLQUFHLFlBQVV2RCxFQUFFd1AsSUFBSSxJQUFHL0YsQ0FBQUEsS0FBRyxPQUFLLEtBQUssSUFBRUEsQ0FBQyxDQUFDMEIsRUFBRSxLQUFHck0sR0FBR3FNLEtBQUcsUUFBTSxvQkFBSzFNLGdEQUFlLENBQUMsT0FBTTtRQUFDLGdCQUFlO1FBQUdnQixXQUFVc0ssRUFBRVIsS0FBRyxPQUFLLEtBQUssSUFBRUEsRUFBRWtHLE9BQU8sRUFBQyxDQUFDeEksS0FBR2pILEtBQUcsT0FBSyxLQUFLLElBQUVBLEVBQUVzSixVQUFVLEtBQUcsT0FBSyxLQUFLLElBQUVyQyxHQUFHd0ksT0FBTztJQUFDLGlCQUFFaFIsZ0RBQWUsQ0FBQyxPQUFNO1FBQUMsY0FBYTtRQUFHZ0IsV0FBVXNLLEVBQUVSLEtBQUcsT0FBSyxLQUFLLElBQUVBLEVBQUVuRyxLQUFLLEVBQUMsQ0FBQzhELEtBQUdsSCxLQUFHLE9BQUssS0FBSyxJQUFFQSxFQUFFc0osVUFBVSxLQUFHLE9BQUssS0FBSyxJQUFFcEMsR0FBRzlELEtBQUs7SUFBQyxHQUFFLE9BQU9wRCxFQUFFb0QsS0FBSyxJQUFFLGFBQVdwRCxFQUFFb0QsS0FBSyxLQUFHcEQsRUFBRW9ELEtBQUssR0FBRXBELEVBQUU2RCxXQUFXLGlCQUFDcEYsZ0RBQWUsQ0FBQyxPQUFNO1FBQUMsb0JBQW1CO1FBQUdnQixXQUFVc0ssRUFBRXBCLElBQUcyQyxJQUFHL0IsS0FBRyxPQUFLLEtBQUssSUFBRUEsRUFBRTFGLFdBQVcsRUFBQyxDQUFDc0QsS0FBR25ILEtBQUcsT0FBSyxLQUFLLElBQUVBLEVBQUVzSixVQUFVLEtBQUcsT0FBSyxLQUFLLElBQUVuQyxHQUFHdEQsV0FBVztJQUFDLEdBQUUsT0FBTzdELEVBQUU2RCxXQUFXLElBQUUsYUFBVzdELEVBQUU2RCxXQUFXLEtBQUc3RCxFQUFFNkQsV0FBVyxJQUFFLHFCQUFNcEYsaURBQWdCLENBQUN1QixFQUFFMFAsTUFBTSxJQUFFMVAsRUFBRTBQLE1BQU0sR0FBQzFQLEVBQUUwUCxNQUFNLElBQUUxSixFQUFFaEcsRUFBRTBQLE1BQU0sa0JBQUVqUixnREFBZSxDQUFDLFVBQVM7UUFBQyxlQUFjLENBQUM7UUFBRSxlQUFjLENBQUM7UUFBRTBKLE9BQU1uSSxFQUFFcUksaUJBQWlCLElBQUVDO1FBQUUrRyxTQUFRM0QsQ0FBQUE7WUFBSSxJQUFJYSxHQUFFQztZQUFFeEcsRUFBRWhHLEVBQUUwUCxNQUFNLEtBQUd0RSxLQUFJLEVBQUNvQixJQUFFLENBQUNELElBQUV2TSxFQUFFMFAsTUFBTSxFQUFFTCxPQUFPLEtBQUcsUUFBTTdDLEVBQUU5SCxJQUFJLENBQUM2SCxHQUFFYixJQUFHdUIsR0FBRTtRQUFFO1FBQUV4TixXQUFVc0ssRUFBRVIsS0FBRyxPQUFLLEtBQUssSUFBRUEsRUFBRW9HLFlBQVksRUFBQyxDQUFDdkksS0FBR3BILEtBQUcsT0FBSyxLQUFLLElBQUVBLEVBQUVzSixVQUFVLEtBQUcsT0FBSyxLQUFLLElBQUVsQyxHQUFHdUksWUFBWTtJQUFDLEdBQUUzUCxFQUFFMFAsTUFBTSxDQUFDekosS0FBSyxJQUFFLG9CQUFLeEgsaURBQWdCLENBQUN1QixFQUFFNFAsTUFBTSxJQUFFNVAsRUFBRTRQLE1BQU0sR0FBQzVQLEVBQUU0UCxNQUFNLElBQUU1SixFQUFFaEcsRUFBRTRQLE1BQU0sa0JBQUVuUixnREFBZSxDQUFDLFVBQVM7UUFBQyxlQUFjLENBQUM7UUFBRSxlQUFjLENBQUM7UUFBRTBKLE9BQU1uSSxFQUFFdUksaUJBQWlCLElBQUVDO1FBQUU2RyxTQUFRM0QsQ0FBQUE7WUFBSSxJQUFJYSxHQUFFQztZQUFFeEcsRUFBRWhHLEVBQUU0UCxNQUFNLEtBQUksRUFBQ3BELElBQUUsQ0FBQ0QsSUFBRXZNLEVBQUU0UCxNQUFNLEVBQUVQLE9BQU8sS0FBRyxRQUFNN0MsRUFBRTlILElBQUksQ0FBQzZILEdBQUViLElBQUcsQ0FBQ0EsRUFBRW1FLGdCQUFnQixJQUFFNUMsR0FBRTtRQUFFO1FBQUV4TixXQUFVc0ssRUFBRVIsS0FBRyxPQUFLLEtBQUssSUFBRUEsRUFBRXVHLFlBQVksRUFBQyxDQUFDekksS0FBR3JILEtBQUcsT0FBSyxLQUFLLElBQUVBLEVBQUVzSixVQUFVLEtBQUcsT0FBSyxLQUFLLElBQUVqQyxHQUFHeUksWUFBWTtJQUFDLEdBQUU5UCxFQUFFNFAsTUFBTSxDQUFDM0osS0FBSyxJQUFFO0FBQU07SUFBbDJNUztNQUFBQTtBQUFvMk0sU0FBU3FKO0lBQUssSUFBRyxNQUEwQixJQUFFLE9BQU96TyxZQUFVLGFBQVksT0FBTTtJQUFNLElBQUl2QyxJQUFFdUMsU0FBUzBPLGVBQWUsQ0FBQ0MsWUFBWSxDQUFDO0lBQU8sT0FBT2xSLE1BQUksVUFBUSxDQUFDQSxJQUFFMkMsT0FBT3dPLGdCQUFnQixDQUFDNU8sU0FBUzBPLGVBQWUsRUFBRUcsU0FBUyxHQUFDcFI7QUFBQztBQUFDLFNBQVNxUjs7SUFBSyxJQUFHLENBQUNyUixHQUFFVyxFQUFFLEdBQUNqQiwyQ0FBVSxDQUFDLEVBQUU7SUFBRSxPQUFPQSw0Q0FBVyxDQUFDLElBQUl1RyxFQUFFaEQsU0FBUyxDQUFDaEMsQ0FBQUE7WUFBSU4sRUFBRU8sQ0FBQUE7Z0JBQUksSUFBRyxhQUFZRCxLQUFHQSxFQUFFcUQsT0FBTyxFQUFDLE9BQU9wRCxFQUFFTCxNQUFNLENBQUNtRCxDQUFBQSxJQUFHQSxFQUFFRixFQUFFLEtBQUc3QyxFQUFFNkMsRUFBRTtnQkFBRSxJQUFJRCxJQUFFM0MsRUFBRXdMLFNBQVMsQ0FBQzFJLENBQUFBLElBQUdBLEVBQUVGLEVBQUUsS0FBRzdDLEVBQUU2QyxFQUFFO2dCQUFFLElBQUdELE1BQUksQ0FBQyxHQUFFO29CQUFDLElBQUlHLElBQUU7MkJBQUk5QztxQkFBRTtvQkFBQyxPQUFPOEMsQ0FBQyxDQUFDSCxFQUFFLEdBQUM7d0JBQUMsR0FBR0csQ0FBQyxDQUFDSCxFQUFFO3dCQUFDLEdBQUc1QyxDQUFDO29CQUFBLEdBQUUrQztnQkFBQyxPQUFNLE9BQU07b0JBQUMvQzt1QkFBS0M7aUJBQUU7WUFBQTtRQUFFLElBQUcsRUFBRSxHQUFFO1FBQUN1QyxRQUFPekQ7SUFBQztBQUFDO0lBQW5RcVI7TUFBQUE7QUFBb1EsSUFBSUMsbUJBQUcxUixJQUFBQSxpREFBRUEsV0FBQyxTQUFTZSxDQUFDLEVBQUNNLENBQUM7O0lBQUUsSUFBRyxFQUFDc0gsUUFBT3JILENBQUMsRUFBQzZJLFVBQVNsRyxJQUFFLGNBQWMsRUFBQzBOLFFBQU92TixJQUFFO1FBQUM7UUFBUztLQUFPLEVBQUN3TixRQUFPck4sQ0FBQyxFQUFDK0UsYUFBWXZGLENBQUMsRUFBQ2pELFdBQVV3RCxDQUFDLEVBQUN1TixRQUFPeE0sQ0FBQyxFQUFDeU0sT0FBTWpNLElBQUUsT0FBTyxFQUFDc0osWUFBVzFKLENBQUMsRUFBQ3dFLFVBQVN0RSxDQUFDLEVBQUM2RCxPQUFNRCxDQUFDLEVBQUNQLGVBQWNTLEtBQUdsQyxFQUFFLEVBQUN3SyxjQUFhcEksQ0FBQyxFQUFDcUksS0FBSW5JLElBQUV1SCxJQUFJLEVBQUMvRyxLQUFJUCxJQUFFbkMsRUFBRSxFQUFDNEMsYUFBWVAsRUFBRSxFQUFDYSxPQUFNWCxDQUFDLEVBQUMrSCxvQkFBbUI3SCxLQUFHLGVBQWUsRUFBQ2EsdUJBQXNCWCxFQUFFLEVBQUNhLElBQUdYLElBQUUxQyxFQUFFLEVBQUMsR0FBQy9HLEdBQUUsQ0FBQzJKLEdBQUVFLEVBQUUsR0FBQzlLLDJDQUFVLENBQUMsRUFBRSxHQUFFZ0wsSUFBRWhMLDBDQUFTLENBQUMsSUFBSVksTUFBTXdSLElBQUksQ0FBQyxJQUFJQyxJQUFJO1lBQUNsTztTQUFFLENBQUNtTyxNQUFNLENBQUMxSCxFQUFFekosTUFBTSxDQUFDWSxDQUFBQSxJQUFHQSxFQUFFc0ksUUFBUSxFQUFFL0ksR0FBRyxDQUFDUyxDQUFBQSxJQUFHQSxFQUFFc0ksUUFBUSxNQUFLO1FBQUNPO1FBQUV6RztLQUFFLEdBQUUsQ0FBQytHLEdBQUVFLEVBQUUsR0FBQ3BMLDJDQUFVLENBQUMsRUFBRSxHQUFFLENBQUNzTCxHQUFFQyxFQUFFLEdBQUN2TCwyQ0FBVSxDQUFDLENBQUMsSUFBRyxDQUFDd0wsR0FBRUMsRUFBRSxHQUFDekwsMkNBQVUsQ0FBQyxDQUFDLElBQUcsQ0FBQzBMLElBQUdDLEVBQUUsR0FBQzNMLDJDQUFVLENBQUMrRixNQUFJLFdBQVNBLElBQUUsS0FBMEIsSUFBRTlDLE9BQU9zUCxVQUFVLElBQUV0UCxPQUFPc1AsVUFBVSxDQUFDLGdDQUFnQ0MsT0FBTyxHQUFDLFNBQU8sVUFBUzVHLElBQUU1TCx5Q0FBUSxDQUFDLE9BQU02TCxJQUFFdkgsRUFBRWpELElBQUksQ0FBQyxLQUFLNk8sT0FBTyxDQUFDLFFBQU8sSUFBSUEsT0FBTyxDQUFDLFVBQVMsS0FBSXBFLElBQUU5TCx5Q0FBUSxDQUFDLE9BQU0rTCxJQUFFL0wseUNBQVEsQ0FBQyxDQUFDLElBQUdnTSxLQUFHaE0sOENBQWEsQ0FBQytCLENBQUFBO1FBQUkrSSxFQUFFbUIsQ0FBQUE7WUFBSSxJQUFJQztZQUFFLE9BQU0sQ0FBQ0EsSUFBRUQsRUFBRTFILElBQUksQ0FBQzRILENBQUFBLElBQUdBLEVBQUUvSCxFQUFFLEtBQUdyQyxFQUFFcUMsRUFBRSxNQUFJLFFBQU04SCxFQUFFNkMsTUFBTSxJQUFFeEksRUFBRTNCLE9BQU8sQ0FBQzdDLEVBQUVxQyxFQUFFLEdBQUU2SCxFQUFFOUssTUFBTSxDQUFDO29CQUFDLEVBQUNpRCxJQUFHK0gsQ0FBQyxFQUFDO3VCQUFHQSxNQUFJcEssRUFBRXFDLEVBQUU7O1FBQUM7SUFBRSxHQUFFLEVBQUU7SUFBRSxPQUFPcEUsNENBQVcsQ0FBQyxJQUFJdUcsRUFBRWhELFNBQVMsQ0FBQ3hCLENBQUFBO1lBQUksSUFBR0EsRUFBRTZDLE9BQU8sRUFBQztnQkFBQ2tHLEVBQUVtQixDQUFBQSxJQUFHQSxFQUFFM0ssR0FBRyxDQUFDNEssQ0FBQUEsSUFBR0EsRUFBRTlILEVBQUUsS0FBR3JDLEVBQUVxQyxFQUFFLEdBQUM7NEJBQUMsR0FBRzhILENBQUM7NEJBQUM2QyxRQUFPLENBQUM7d0JBQUMsSUFBRTdDO2dCQUFJO1lBQU07WUFBQ3dDLFdBQVc7Z0JBQUt2TyxnREFBWSxDQUFDO29CQUFLMkssRUFBRW1CLENBQUFBO3dCQUFJLElBQUlDLElBQUVELEVBQUVlLFNBQVMsQ0FBQ2IsQ0FBQUEsSUFBR0EsRUFBRS9ILEVBQUUsS0FBR3JDLEVBQUVxQyxFQUFFO3dCQUFFLE9BQU84SCxNQUFJLENBQUMsSUFBRTsrQkFBSUQsRUFBRXlHLEtBQUssQ0FBQyxHQUFFeEc7NEJBQUc7Z0NBQUMsR0FBR0QsQ0FBQyxDQUFDQyxFQUFFO2dDQUFDLEdBQUduSyxDQUFDOzRCQUFBOytCQUFLa0ssRUFBRXlHLEtBQUssQ0FBQ3hHLElBQUU7eUJBQUcsR0FBQzs0QkFBQ25LOytCQUFLa0s7eUJBQUU7b0JBQUE7Z0JBQUU7WUFBRTtRQUFFLElBQUcsRUFBRSxHQUFFak0sNENBQVcsQ0FBQztRQUFLLElBQUcrRixNQUFJLFVBQVM7WUFBQzRGLEVBQUU1RjtZQUFHO1FBQU07UUFBQyxJQUFHQSxNQUFJLFlBQVc5QyxDQUFBQSxPQUFPc1AsVUFBVSxJQUFFdFAsT0FBT3NQLFVBQVUsQ0FBQyxnQ0FBZ0NDLE9BQU8sR0FBQzdHLEVBQUUsVUFBUUEsRUFBRSxRQUFPLEdBQUcsWUFBZSxhQUFZO1FBQU8sSUFBSTVKLElBQUVrQixPQUFPc1AsVUFBVSxDQUFDO1FBQWdDLElBQUc7WUFBQ3hRLEVBQUVpQixnQkFBZ0IsQ0FBQyxVQUFTO29CQUFDLEVBQUN3UCxTQUFRdkcsQ0FBQyxFQUFDO2dCQUFJTixFQUFFTSxJQUFFLFNBQU87WUFBUTtRQUFFLEVBQUMsT0FBTUEsR0FBRTtZQUFDbEssRUFBRTRRLFdBQVcsQ0FBQztvQkFBQyxFQUFDSCxTQUFRdEcsQ0FBQyxFQUFDO2dCQUFJLElBQUc7b0JBQUNQLEVBQUVPLElBQUUsU0FBTztnQkFBUSxFQUFDLE9BQU1DLEdBQUU7b0JBQUN5RyxRQUFRL04sS0FBSyxDQUFDc0g7Z0JBQUU7WUFBQztRQUFFO0lBQUMsR0FBRTtRQUFDcEc7S0FBRSxHQUFFL0YsNENBQVcsQ0FBQztRQUFLNEssRUFBRXZHLE1BQU0sSUFBRSxLQUFHa0gsRUFBRSxDQUFDO0lBQUUsR0FBRTtRQUFDWDtLQUFFLEdBQUU1Syw0Q0FBVyxDQUFDO1FBQUssSUFBSStCLElBQUVrSyxDQUFBQTtZQUFJLElBQUlFLEdBQUVDO1lBQUU5SCxFQUFFdU8sS0FBSyxDQUFDdkcsQ0FBQUEsSUFBR0wsQ0FBQyxDQUFDSyxFQUFFLElBQUVMLEVBQUU2RyxJQUFJLEtBQUd4RyxNQUFLZixDQUFBQSxFQUFFLENBQUMsSUFBRyxDQUFDWSxJQUFFUCxFQUFFdUMsT0FBTyxLQUFHLFFBQU1oQyxFQUFFNEcsS0FBSyxFQUFDLEdBQUc5RyxFQUFFNkcsSUFBSSxLQUFHLFlBQVdqUSxDQUFBQSxTQUFTbVEsYUFBYSxLQUFHcEgsRUFBRXVDLE9BQU8sSUFBRSxDQUFDL0IsSUFBRVIsRUFBRXVDLE9BQU8sS0FBRyxRQUFNL0IsRUFBRTZHLFFBQVEsQ0FBQ3BRLFNBQVNtUSxhQUFhLE1BQUl6SCxFQUFFLENBQUM7UUFBRTtRQUFFLE9BQU8xSSxTQUFTRyxnQkFBZ0IsQ0FBQyxXQUFVakIsSUFBRyxJQUFJYyxTQUFTSyxtQkFBbUIsQ0FBQyxXQUFVbkI7SUFBRSxHQUFFO1FBQUN1QztLQUFFLEdBQUV0RSw0Q0FBVyxDQUFDO1FBQUssSUFBRzRMLEVBQUV1QyxPQUFPLEVBQUMsT0FBTTtZQUFLckMsRUFBRXFDLE9BQU8sSUFBR3JDLENBQUFBLEVBQUVxQyxPQUFPLENBQUM0RSxLQUFLLENBQUM7Z0JBQUNHLGVBQWMsQ0FBQztZQUFDLElBQUdwSCxFQUFFcUMsT0FBTyxHQUFDLE1BQUtwQyxFQUFFb0MsT0FBTyxHQUFDLENBQUM7UUFBRTtJQUFDLEdBQUU7UUFBQ3ZDLEVBQUV1QyxPQUFPO0tBQUMsaUJBQUVuTyxnREFBZSxDQUFDLFdBQVU7UUFBQyxjQUFhLEdBQVM2TCxPQUFOdkIsSUFBRyxLQUFLLE9BQUZ1QjtRQUFJcUQsVUFBUyxDQUFDO1FBQUUsYUFBWTtRQUFTLGlCQUFnQjtRQUFpQixlQUFjO0lBQU8sR0FBRWxFLEVBQUUxSixHQUFHLENBQUMsQ0FBQ1MsR0FBRWtLO1FBQUssSUFBSUc7UUFBRSxJQUFHLENBQUNGLEdBQUVDLEVBQUUsR0FBQ3BLLEVBQUU0TCxLQUFLLENBQUM7UUFBSyxPQUFPL0MsRUFBRXZHLE1BQU0saUJBQUNyRSxnREFBZSxDQUFDLE1BQUs7WUFBQ3lCLEtBQUlNO1lBQUVtUSxLQUFJbkksTUFBSSxTQUFPdUgsT0FBS3ZIO1lBQUVtRixVQUFTLENBQUM7WUFBRUMsS0FBSXZEO1lBQUU1SyxXQUFVd0Q7WUFBRSx1QkFBc0IsQ0FBQztZQUFFLGNBQWFrSDtZQUFHLG1CQUFrQlE7WUFBRSxlQUFjWixLQUFHVixFQUFFdkcsTUFBTSxHQUFDLEtBQUcsQ0FBQ0k7WUFBRSxtQkFBa0IwSDtZQUFFekMsT0FBTTtnQkFBQyx3QkFBdUIsR0FBdUMsT0FBcEMsQ0FBQyxDQUFDMEMsSUFBRWxCLENBQUMsQ0FBQyxFQUFFLEtBQUcsT0FBSyxLQUFLLElBQUVrQixFQUFFeEssTUFBTSxLQUFHLEdBQUU7Z0JBQUksWUFBVyxPQUFPMkQsS0FBRyxXQUFTLEdBQUssT0FBRkEsR0FBRSxRQUFJQSxLQUFHbUM7Z0JBQUcsV0FBVSxHQUFNLE9BQUhFLElBQUc7Z0JBQUksU0FBUSxHQUFLLE9BQUZvQyxHQUFFO2dCQUFJLEdBQUdQLENBQUM7WUFBQTtZQUFFMEosUUFBTzdHLENBQUFBO2dCQUFJUCxFQUFFb0MsT0FBTyxJQUFFLENBQUM3QixFQUFFOEcsYUFBYSxDQUFDSCxRQUFRLENBQUMzRyxFQUFFK0csYUFBYSxLQUFJdEgsQ0FBQUEsRUFBRW9DLE9BQU8sR0FBQyxDQUFDLEdBQUVyQyxFQUFFcUMsT0FBTyxJQUFHckMsQ0FBQUEsRUFBRXFDLE9BQU8sQ0FBQzRFLEtBQUssQ0FBQztvQkFBQ0csZUFBYyxDQUFDO2dCQUFDLElBQUdwSCxFQUFFcUMsT0FBTyxHQUFDLElBQUcsQ0FBQztZQUFFO1lBQUVtRixTQUFRaEgsQ0FBQUE7Z0JBQUlBLEVBQUVpRCxNQUFNLFlBQVlnRSxlQUFhakgsRUFBRWlELE1BQU0sQ0FBQ2lFLE9BQU8sQ0FBQzlPLFdBQVcsS0FBRyxXQUFTcUgsRUFBRW9DLE9BQU8sSUFBR3BDLENBQUFBLEVBQUVvQyxPQUFPLEdBQUMsQ0FBQyxHQUFFckMsRUFBRXFDLE9BQU8sR0FBQzdCLEVBQUUrRyxhQUFhO1lBQUM7WUFBRUksY0FBYSxJQUFJbEksRUFBRSxDQUFDO1lBQUdtSSxhQUFZLElBQUluSSxFQUFFLENBQUM7WUFBR29JLGNBQWE7Z0JBQUtuSSxLQUFHRCxFQUFFLENBQUM7WUFBRTtZQUFFK0QsZUFBY2hELENBQUFBO2dCQUFJQSxFQUFFaUQsTUFBTSxZQUFZZ0UsZUFBYWpILEVBQUVpRCxNQUFNLENBQUNpRSxPQUFPLENBQUM5TyxXQUFXLEtBQUcsV0FBUytHLEVBQUUsQ0FBQztZQUFFO1lBQUVvRSxhQUFZLElBQUlwRSxFQUFFLENBQUM7UUFBRSxHQUFFYixFQUFFekosTUFBTSxDQUFDbUwsQ0FBQUEsSUFBRyxDQUFDQSxFQUFFakMsUUFBUSxJQUFFNEIsTUFBSSxLQUFHSyxFQUFFakMsUUFBUSxLQUFHdEksR0FBR1QsR0FBRyxDQUFDLENBQUNnTCxHQUFFQztZQUFLLElBQUlDLElBQUdDO1lBQUcscUJBQU96TSxnREFBZSxDQUFDaUksSUFBRztnQkFBQ3hHLEtBQUk2SyxFQUFFbEksRUFBRTtnQkFBQzJHLE9BQU1YO2dCQUFFaEIsT0FBTW1EO2dCQUFFekQsT0FBTXdEO2dCQUFFL0MsbUJBQWtCNUQ7Z0JBQUV3RSxVQUFTLENBQUNxQyxLQUFHM0MsS0FBRyxPQUFLLEtBQUssSUFBRUEsRUFBRU0sUUFBUSxLQUFHLE9BQUtxQyxLQUFHM0c7Z0JBQUU3RSxXQUFVNkksS0FBRyxPQUFLLEtBQUssSUFBRUEsRUFBRTdJLFNBQVM7Z0JBQUNpSixzQkFBcUJKLEtBQUcsT0FBSyxLQUFLLElBQUVBLEVBQUVJLG9CQUFvQjtnQkFBQ3BCLFFBQU9ySDtnQkFBRTBILGVBQWNTO2dCQUFHSCxhQUFZLENBQUNpRCxLQUFHNUMsS0FBRyxPQUFLLEtBQUssSUFBRUEsRUFBRUwsV0FBVyxLQUFHLE9BQUtpRCxLQUFHeEk7Z0JBQUUrRSxhQUFZd0M7Z0JBQUVuQixVQUFTdEk7Z0JBQUUySCxPQUFNRyxLQUFHLE9BQUssS0FBSyxJQUFFQSxFQUFFSCxLQUFLO2dCQUFDWCxVQUFTYyxLQUFHLE9BQUssS0FBSyxJQUFFQSxFQUFFZCxRQUFRO2dCQUFDOEIsWUFBV2hCLEtBQUcsT0FBSyxLQUFLLElBQUVBLEVBQUVnQixVQUFVO2dCQUFDakIsbUJBQWtCQyxLQUFHLE9BQUssS0FBSyxJQUFFQSxFQUFFRCxpQkFBaUI7Z0JBQUNFLG1CQUFrQkQsS0FBRyxPQUFLLEtBQUssSUFBRUEsRUFBRUMsaUJBQWlCO2dCQUFDUixhQUFZMEM7Z0JBQUdqSSxRQUFPNkcsRUFBRXpKLE1BQU0sQ0FBQ3VMLENBQUFBLElBQUdBLEVBQUVyQyxRQUFRLElBQUVpQyxFQUFFakMsUUFBUTtnQkFBRWxCLFNBQVErQixFQUFFL0osTUFBTSxDQUFDdUwsQ0FBQUEsSUFBR0EsRUFBRXJDLFFBQVEsSUFBRWlDLEVBQUVqQyxRQUFRO2dCQUFFcEIsWUFBV21DO2dCQUFFVCxpQkFBZ0JsRztnQkFBRThGLEtBQUlQO2dCQUFFUyxhQUFZUDtnQkFBR2IsVUFBU2lDO2dCQUFFSCx1QkFBc0JYO2dCQUFHYSxJQUFHWDtZQUFDO1FBQUUsTUFBSTtJQUFJO0FBQUc7O0FBQXFELENBQ3A0VixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3Nvbm5lci9kaXN0L2luZGV4Lm1qcz8wYmUyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiO2ltcG9ydCBlLHtmb3J3YXJkUmVmIGFzIGVlfWZyb21cInJlYWN0XCI7aW1wb3J0IG9lIGZyb21cInJlYWN0LWRvbVwiO2ltcG9ydCBTIGZyb21cInJlYWN0XCI7dmFyIGt0PXI9Pntzd2l0Y2gocil7Y2FzZVwic3VjY2Vzc1wiOnJldHVybiBWdDtjYXNlXCJpbmZvXCI6cmV0dXJuIEt0O2Nhc2VcIndhcm5pbmdcIjpyZXR1cm4gT3Q7Y2FzZVwiZXJyb3JcIjpyZXR1cm4gSnQ7ZGVmYXVsdDpyZXR1cm4gbnVsbH19LFV0PUFycmF5KDEyKS5maWxsKDApLER0PSh7dmlzaWJsZTpyLGNsYXNzTmFtZTpvfSk9PlMuY3JlYXRlRWxlbWVudChcImRpdlwiLHtjbGFzc05hbWU6W1wic29ubmVyLWxvYWRpbmctd3JhcHBlclwiLG9dLmZpbHRlcihCb29sZWFuKS5qb2luKFwiIFwiKSxcImRhdGEtdmlzaWJsZVwiOnJ9LFMuY3JlYXRlRWxlbWVudChcImRpdlwiLHtjbGFzc05hbWU6XCJzb25uZXItc3Bpbm5lclwifSxVdC5tYXAoKHQscyk9PlMuY3JlYXRlRWxlbWVudChcImRpdlwiLHtjbGFzc05hbWU6XCJzb25uZXItbG9hZGluZy1iYXJcIixrZXk6YHNwaW5uZXItYmFyLSR7c31gfSkpKSksVnQ9Uy5jcmVhdGVFbGVtZW50KFwic3ZnXCIse3htbG5zOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIix2aWV3Qm94OlwiMCAwIDIwIDIwXCIsZmlsbDpcImN1cnJlbnRDb2xvclwiLGhlaWdodDpcIjIwXCIsd2lkdGg6XCIyMFwifSxTLmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIse2ZpbGxSdWxlOlwiZXZlbm9kZFwiLGQ6XCJNMTAgMThhOCA4IDAgMTAwLTE2IDggOCAwIDAwMCAxNnptMy44NTctOS44MDlhLjc1Ljc1IDAgMDAtMS4yMTQtLjg4MmwtMy40ODMgNC43OS0xLjg4LTEuODhhLjc1Ljc1IDAgMTAtMS4wNiAxLjA2MWwyLjUgMi41YS43NS43NSAwIDAwMS4xMzctLjA4OWw0LTUuNXpcIixjbGlwUnVsZTpcImV2ZW5vZGRcIn0pKSxPdD1TLmNyZWF0ZUVsZW1lbnQoXCJzdmdcIix7eG1sbnM6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLHZpZXdCb3g6XCIwIDAgMjQgMjRcIixmaWxsOlwiY3VycmVudENvbG9yXCIsaGVpZ2h0OlwiMjBcIix3aWR0aDpcIjIwXCJ9LFMuY3JlYXRlRWxlbWVudChcInBhdGhcIix7ZmlsbFJ1bGU6XCJldmVub2RkXCIsZDpcIk05LjQwMSAzLjAwM2MxLjE1NS0yIDQuMDQzLTIgNS4xOTcgMGw3LjM1NSAxMi43NDhjMS4xNTQgMi0uMjkgNC41LTIuNTk5IDQuNUg0LjY0NWMtMi4zMDkgMC0zLjc1Mi0yLjUtMi41OTgtNC41TDkuNCAzLjAwM3pNMTIgOC4yNWEuNzUuNzUgMCAwMS43NS43NXYzLjc1YS43NS43NSAwIDAxLTEuNSAwVjlhLjc1Ljc1IDAgMDEuNzUtLjc1em0wIDguMjVhLjc1Ljc1IDAgMTAwLTEuNS43NS43NSAwIDAwMCAxLjV6XCIsY2xpcFJ1bGU6XCJldmVub2RkXCJ9KSksS3Q9Uy5jcmVhdGVFbGVtZW50KFwic3ZnXCIse3htbG5zOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIix2aWV3Qm94OlwiMCAwIDIwIDIwXCIsZmlsbDpcImN1cnJlbnRDb2xvclwiLGhlaWdodDpcIjIwXCIsd2lkdGg6XCIyMFwifSxTLmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIse2ZpbGxSdWxlOlwiZXZlbm9kZFwiLGQ6XCJNMTggMTBhOCA4IDAgMTEtMTYgMCA4IDggMCAwMTE2IDB6bS03LTRhMSAxIDAgMTEtMiAwIDEgMSAwIDAxMiAwek05IDlhLjc1Ljc1IDAgMDAwIDEuNWguMjUzYS4yNS4yNSAwIDAxLjI0NC4zMDRsLS40NTkgMi4wNjZBMS43NSAxLjc1IDAgMDAxMC43NDcgMTVIMTFhLjc1Ljc1IDAgMDAwLTEuNWgtLjI1M2EuMjUuMjUgMCAwMS0uMjQ0LS4zMDRsLjQ1OS0yLjA2NkExLjc1IDEuNzUgMCAwMDkuMjUzIDlIOXpcIixjbGlwUnVsZTpcImV2ZW5vZGRcIn0pKSxKdD1TLmNyZWF0ZUVsZW1lbnQoXCJzdmdcIix7eG1sbnM6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLHZpZXdCb3g6XCIwIDAgMjAgMjBcIixmaWxsOlwiY3VycmVudENvbG9yXCIsaGVpZ2h0OlwiMjBcIix3aWR0aDpcIjIwXCJ9LFMuY3JlYXRlRWxlbWVudChcInBhdGhcIix7ZmlsbFJ1bGU6XCJldmVub2RkXCIsZDpcIk0xOCAxMGE4IDggMCAxMS0xNiAwIDggOCAwIDAxMTYgMHptLTgtNWEuNzUuNzUgMCAwMS43NS43NXY0LjVhLjc1Ljc1IDAgMDEtMS41IDB2LTQuNUEuNzUuNzUgMCAwMTEwIDV6bTAgMTBhMSAxIDAgMTAwLTIgMSAxIDAgMDAwIDJ6XCIsY2xpcFJ1bGU6XCJldmVub2RkXCJ9KSksSHQ9Uy5jcmVhdGVFbGVtZW50KFwic3ZnXCIse3htbG5zOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIix3aWR0aDpcIjEyXCIsaGVpZ2h0OlwiMTJcIix2aWV3Qm94OlwiMCAwIDI0IDI0XCIsZmlsbDpcIm5vbmVcIixzdHJva2U6XCJjdXJyZW50Q29sb3JcIixzdHJva2VXaWR0aDpcIjEuNVwiLHN0cm9rZUxpbmVjYXA6XCJyb3VuZFwiLHN0cm9rZUxpbmVqb2luOlwicm91bmRcIn0sUy5jcmVhdGVFbGVtZW50KFwibGluZVwiLHt4MTpcIjE4XCIseTE6XCI2XCIseDI6XCI2XCIseTI6XCIxOFwifSksUy5jcmVhdGVFbGVtZW50KFwibGluZVwiLHt4MTpcIjZcIix5MTpcIjZcIix4MjpcIjE4XCIseTI6XCIxOFwifSkpO2ltcG9ydCBNdCBmcm9tXCJyZWFjdFwiO3ZhciBBdD0oKT0+e2xldFtyLG9dPU10LnVzZVN0YXRlKGRvY3VtZW50LmhpZGRlbik7cmV0dXJuIE10LnVzZUVmZmVjdCgoKT0+e2xldCB0PSgpPT57byhkb2N1bWVudC5oaWRkZW4pfTtyZXR1cm4gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIix0KSwoKT0+d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsdCl9LFtdKSxyfTtpbXBvcnQgWHQgZnJvbVwicmVhY3RcIjt2YXIgZnQ9MSxtdD1jbGFzc3tjb25zdHJ1Y3Rvcigpe3RoaXMuc3Vic2NyaWJlPW89Pih0aGlzLnN1YnNjcmliZXJzLnB1c2gobyksKCk9PntsZXQgdD10aGlzLnN1YnNjcmliZXJzLmluZGV4T2Yobyk7dGhpcy5zdWJzY3JpYmVycy5zcGxpY2UodCwxKX0pO3RoaXMucHVibGlzaD1vPT57dGhpcy5zdWJzY3JpYmVycy5mb3JFYWNoKHQ9PnQobykpfTt0aGlzLmFkZFRvYXN0PW89Pnt0aGlzLnB1Ymxpc2gobyksdGhpcy50b2FzdHM9Wy4uLnRoaXMudG9hc3RzLG9dfTt0aGlzLmNyZWF0ZT1vPT57dmFyIFA7bGV0e21lc3NhZ2U6dCwuLi5zfT1vLGc9dHlwZW9mKG89PW51bGw/dm9pZCAwOm8uaWQpPT1cIm51bWJlclwifHwoKFA9by5pZCk9PW51bGw/dm9pZCAwOlAubGVuZ3RoKT4wP28uaWQ6ZnQrKyxsPXRoaXMudG9hc3RzLmZpbmQoaD0+aC5pZD09PWcpLEU9by5kaXNtaXNzaWJsZT09PXZvaWQgMD8hMDpvLmRpc21pc3NpYmxlO3JldHVybiBsP3RoaXMudG9hc3RzPXRoaXMudG9hc3RzLm1hcChoPT5oLmlkPT09Zz8odGhpcy5wdWJsaXNoKHsuLi5oLC4uLm8saWQ6Zyx0aXRsZTp0fSksey4uLmgsLi4ubyxpZDpnLGRpc21pc3NpYmxlOkUsdGl0bGU6dH0pOmgpOnRoaXMuYWRkVG9hc3Qoe3RpdGxlOnQsLi4ucyxkaXNtaXNzaWJsZTpFLGlkOmd9KSxnfTt0aGlzLmRpc21pc3M9bz0+KG98fHRoaXMudG9hc3RzLmZvckVhY2godD0+e3RoaXMuc3Vic2NyaWJlcnMuZm9yRWFjaChzPT5zKHtpZDp0LmlkLGRpc21pc3M6ITB9KSl9KSx0aGlzLnN1YnNjcmliZXJzLmZvckVhY2godD0+dCh7aWQ6byxkaXNtaXNzOiEwfSkpLG8pO3RoaXMubWVzc2FnZT0obyx0KT0+dGhpcy5jcmVhdGUoey4uLnQsbWVzc2FnZTpvfSk7dGhpcy5lcnJvcj0obyx0KT0+dGhpcy5jcmVhdGUoey4uLnQsbWVzc2FnZTpvLHR5cGU6XCJlcnJvclwifSk7dGhpcy5zdWNjZXNzPShvLHQpPT50aGlzLmNyZWF0ZSh7Li4udCx0eXBlOlwic3VjY2Vzc1wiLG1lc3NhZ2U6b30pO3RoaXMuaW5mbz0obyx0KT0+dGhpcy5jcmVhdGUoey4uLnQsdHlwZTpcImluZm9cIixtZXNzYWdlOm99KTt0aGlzLndhcm5pbmc9KG8sdCk9PnRoaXMuY3JlYXRlKHsuLi50LHR5cGU6XCJ3YXJuaW5nXCIsbWVzc2FnZTpvfSk7dGhpcy5sb2FkaW5nPShvLHQpPT50aGlzLmNyZWF0ZSh7Li4udCx0eXBlOlwibG9hZGluZ1wiLG1lc3NhZ2U6b30pO3RoaXMucHJvbWlzZT0obyx0KT0+e2lmKCF0KXJldHVybjtsZXQgczt0LmxvYWRpbmchPT12b2lkIDAmJihzPXRoaXMuY3JlYXRlKHsuLi50LHByb21pc2U6byx0eXBlOlwibG9hZGluZ1wiLG1lc3NhZ2U6dC5sb2FkaW5nLGRlc2NyaXB0aW9uOnR5cGVvZiB0LmRlc2NyaXB0aW9uIT1cImZ1bmN0aW9uXCI/dC5kZXNjcmlwdGlvbjp2b2lkIDB9KSk7bGV0IGc9byBpbnN0YW5jZW9mIFByb21pc2U/bzpvKCksbD1zIT09dm9pZCAwLEUsUD1nLnRoZW4oYXN5bmMgYz0+e2lmKEU9W1wicmVzb2x2ZVwiLGNdLFh0LmlzVmFsaWRFbGVtZW50KGMpKWw9ITEsdGhpcy5jcmVhdGUoe2lkOnMsdHlwZTpcImRlZmF1bHRcIixtZXNzYWdlOmN9KTtlbHNlIGlmKFF0KGMpJiYhYy5vayl7bD0hMTtsZXQgaz10eXBlb2YgdC5lcnJvcj09XCJmdW5jdGlvblwiP2F3YWl0IHQuZXJyb3IoYEhUVFAgZXJyb3IhIHN0YXR1czogJHtjLnN0YXR1c31gKTp0LmVycm9yLGo9dHlwZW9mIHQuZGVzY3JpcHRpb249PVwiZnVuY3Rpb25cIj9hd2FpdCB0LmRlc2NyaXB0aW9uKGBIVFRQIGVycm9yISBzdGF0dXM6ICR7Yy5zdGF0dXN9YCk6dC5kZXNjcmlwdGlvbjt0aGlzLmNyZWF0ZSh7aWQ6cyx0eXBlOlwiZXJyb3JcIixtZXNzYWdlOmssZGVzY3JpcHRpb246an0pfWVsc2UgaWYodC5zdWNjZXNzIT09dm9pZCAwKXtsPSExO2xldCBrPXR5cGVvZiB0LnN1Y2Nlc3M9PVwiZnVuY3Rpb25cIj9hd2FpdCB0LnN1Y2Nlc3MoYyk6dC5zdWNjZXNzLGo9dHlwZW9mIHQuZGVzY3JpcHRpb249PVwiZnVuY3Rpb25cIj9hd2FpdCB0LmRlc2NyaXB0aW9uKGMpOnQuZGVzY3JpcHRpb247dGhpcy5jcmVhdGUoe2lkOnMsdHlwZTpcInN1Y2Nlc3NcIixtZXNzYWdlOmssZGVzY3JpcHRpb246an0pfX0pLmNhdGNoKGFzeW5jIGM9PntpZihFPVtcInJlamVjdFwiLGNdLHQuZXJyb3IhPT12b2lkIDApe2w9ITE7bGV0IHk9dHlwZW9mIHQuZXJyb3I9PVwiZnVuY3Rpb25cIj9hd2FpdCB0LmVycm9yKGMpOnQuZXJyb3Isaz10eXBlb2YgdC5kZXNjcmlwdGlvbj09XCJmdW5jdGlvblwiP2F3YWl0IHQuZGVzY3JpcHRpb24oYyk6dC5kZXNjcmlwdGlvbjt0aGlzLmNyZWF0ZSh7aWQ6cyx0eXBlOlwiZXJyb3JcIixtZXNzYWdlOnksZGVzY3JpcHRpb246a30pfX0pLmZpbmFsbHkoKCk9Pnt2YXIgYztsJiYodGhpcy5kaXNtaXNzKHMpLHM9dm9pZCAwKSwoYz10LmZpbmFsbHkpPT1udWxsfHxjLmNhbGwodCl9KSxoPSgpPT5uZXcgUHJvbWlzZSgoYyx5KT0+UC50aGVuKCgpPT5FWzBdPT09XCJyZWplY3RcIj95KEVbMV0pOmMoRVsxXSkpLmNhdGNoKHkpKTtyZXR1cm4gdHlwZW9mIHMhPVwic3RyaW5nXCImJnR5cGVvZiBzIT1cIm51bWJlclwiP3t1bndyYXA6aH06T2JqZWN0LmFzc2lnbihzLHt1bndyYXA6aH0pfTt0aGlzLmN1c3RvbT0obyx0KT0+e2xldCBzPSh0PT1udWxsP3ZvaWQgMDp0LmlkKXx8ZnQrKztyZXR1cm4gdGhpcy5jcmVhdGUoe2pzeDpvKHMpLGlkOnMsLi4udH0pLHN9O3RoaXMuc3Vic2NyaWJlcnM9W10sdGhpcy50b2FzdHM9W119fSxUPW5ldyBtdCxHdD0ocixvKT0+e2xldCB0PShvPT1udWxsP3ZvaWQgMDpvLmlkKXx8ZnQrKztyZXR1cm4gVC5hZGRUb2FzdCh7dGl0bGU6ciwuLi5vLGlkOnR9KSx0fSxRdD1yPT5yJiZ0eXBlb2Ygcj09XCJvYmplY3RcIiYmXCJva1wiaW4gciYmdHlwZW9mIHIub2s9PVwiYm9vbGVhblwiJiZcInN0YXR1c1wiaW4gciYmdHlwZW9mIHIuc3RhdHVzPT1cIm51bWJlclwiLHF0PUd0LFp0PSgpPT5ULnRvYXN0cyx0ZT1PYmplY3QuYXNzaWduKHF0LHtzdWNjZXNzOlQuc3VjY2VzcyxpbmZvOlQuaW5mbyx3YXJuaW5nOlQud2FybmluZyxlcnJvcjpULmVycm9yLGN1c3RvbTpULmN1c3RvbSxtZXNzYWdlOlQubWVzc2FnZSxwcm9taXNlOlQucHJvbWlzZSxkaXNtaXNzOlQuZGlzbWlzcyxsb2FkaW5nOlQubG9hZGluZ30se2dldEhpc3Rvcnk6WnR9KTtmdW5jdGlvbiBwdChyLHtpbnNlcnRBdDpvfT17fSl7aWYoIXJ8fHR5cGVvZiBkb2N1bWVudD09XCJ1bmRlZmluZWRcIilyZXR1cm47bGV0IHQ9ZG9jdW1lbnQuaGVhZHx8ZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdLHM9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO3MudHlwZT1cInRleHQvY3NzXCIsbz09PVwidG9wXCImJnQuZmlyc3RDaGlsZD90Lmluc2VydEJlZm9yZShzLHQuZmlyc3RDaGlsZCk6dC5hcHBlbmRDaGlsZChzKSxzLnN0eWxlU2hlZXQ/cy5zdHlsZVNoZWV0LmNzc1RleHQ9cjpzLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHIpKX1wdChgOndoZXJlKGh0bWxbZGlyPVwibHRyXCJdKSw6d2hlcmUoW2RhdGEtc29ubmVyLXRvYXN0ZXJdW2Rpcj1cImx0clwiXSl7LS10b2FzdC1pY29uLW1hcmdpbi1zdGFydDogLTNweDstLXRvYXN0LWljb24tbWFyZ2luLWVuZDogNHB4Oy0tdG9hc3Qtc3ZnLW1hcmdpbi1zdGFydDogLTFweDstLXRvYXN0LXN2Zy1tYXJnaW4tZW5kOiAwcHg7LS10b2FzdC1idXR0b24tbWFyZ2luLXN0YXJ0OiBhdXRvOy0tdG9hc3QtYnV0dG9uLW1hcmdpbi1lbmQ6IDA7LS10b2FzdC1jbG9zZS1idXR0b24tc3RhcnQ6IDA7LS10b2FzdC1jbG9zZS1idXR0b24tZW5kOiB1bnNldDstLXRvYXN0LWNsb3NlLWJ1dHRvbi10cmFuc2Zvcm06IHRyYW5zbGF0ZSgtMzUlLCAtMzUlKX06d2hlcmUoaHRtbFtkaXI9XCJydGxcIl0pLDp3aGVyZShbZGF0YS1zb25uZXItdG9hc3Rlcl1bZGlyPVwicnRsXCJdKXstLXRvYXN0LWljb24tbWFyZ2luLXN0YXJ0OiA0cHg7LS10b2FzdC1pY29uLW1hcmdpbi1lbmQ6IC0zcHg7LS10b2FzdC1zdmctbWFyZ2luLXN0YXJ0OiAwcHg7LS10b2FzdC1zdmctbWFyZ2luLWVuZDogLTFweDstLXRvYXN0LWJ1dHRvbi1tYXJnaW4tc3RhcnQ6IDA7LS10b2FzdC1idXR0b24tbWFyZ2luLWVuZDogYXV0bzstLXRvYXN0LWNsb3NlLWJ1dHRvbi1zdGFydDogdW5zZXQ7LS10b2FzdC1jbG9zZS1idXR0b24tZW5kOiAwOy0tdG9hc3QtY2xvc2UtYnV0dG9uLXRyYW5zZm9ybTogdHJhbnNsYXRlKDM1JSwgLTM1JSl9OndoZXJlKFtkYXRhLXNvbm5lci10b2FzdGVyXSl7cG9zaXRpb246Zml4ZWQ7d2lkdGg6dmFyKC0td2lkdGgpO2ZvbnQtZmFtaWx5OnVpLXNhbnMtc2VyaWYsc3lzdGVtLXVpLC1hcHBsZS1zeXN0ZW0sQmxpbmtNYWNTeXN0ZW1Gb250LFNlZ29lIFVJLFJvYm90byxIZWx2ZXRpY2EgTmV1ZSxBcmlhbCxOb3RvIFNhbnMsc2Fucy1zZXJpZixBcHBsZSBDb2xvciBFbW9qaSxTZWdvZSBVSSBFbW9qaSxTZWdvZSBVSSBTeW1ib2wsTm90byBDb2xvciBFbW9qaTstLWdyYXkxOiBoc2woMCwgMCUsIDk5JSk7LS1ncmF5MjogaHNsKDAsIDAlLCA5Ny4zJSk7LS1ncmF5MzogaHNsKDAsIDAlLCA5NS4xJSk7LS1ncmF5NDogaHNsKDAsIDAlLCA5MyUpOy0tZ3JheTU6IGhzbCgwLCAwJSwgOTAuOSUpOy0tZ3JheTY6IGhzbCgwLCAwJSwgODguNyUpOy0tZ3JheTc6IGhzbCgwLCAwJSwgODUuOCUpOy0tZ3JheTg6IGhzbCgwLCAwJSwgNzglKTstLWdyYXk5OiBoc2woMCwgMCUsIDU2LjElKTstLWdyYXkxMDogaHNsKDAsIDAlLCA1Mi4zJSk7LS1ncmF5MTE6IGhzbCgwLCAwJSwgNDMuNSUpOy0tZ3JheTEyOiBoc2woMCwgMCUsIDklKTstLWJvcmRlci1yYWRpdXM6IDhweDtib3gtc2l6aW5nOmJvcmRlci1ib3g7cGFkZGluZzowO21hcmdpbjowO2xpc3Qtc3R5bGU6bm9uZTtvdXRsaW5lOm5vbmU7ei1pbmRleDo5OTk5OTk5OTk7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjRzIGVhc2V9OndoZXJlKFtkYXRhLXNvbm5lci10b2FzdGVyXVtkYXRhLWxpZnRlZD1cInRydWVcIl0pe3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0xMHB4KX1AbWVkaWEgKGhvdmVyOiBub25lKSBhbmQgKHBvaW50ZXI6IGNvYXJzZSl7OndoZXJlKFtkYXRhLXNvbm5lci10b2FzdGVyXVtkYXRhLWxpZnRlZD1cInRydWVcIl0pe3RyYW5zZm9ybTpub25lfX06d2hlcmUoW2RhdGEtc29ubmVyLXRvYXN0ZXJdW2RhdGEteC1wb3NpdGlvbj1cInJpZ2h0XCJdKXtyaWdodDptYXgodmFyKC0tb2Zmc2V0KSxlbnYoc2FmZS1hcmVhLWluc2V0LXJpZ2h0KSl9OndoZXJlKFtkYXRhLXNvbm5lci10b2FzdGVyXVtkYXRhLXgtcG9zaXRpb249XCJsZWZ0XCJdKXtsZWZ0Om1heCh2YXIoLS1vZmZzZXQpLGVudihzYWZlLWFyZWEtaW5zZXQtbGVmdCkpfTp3aGVyZShbZGF0YS1zb25uZXItdG9hc3Rlcl1bZGF0YS14LXBvc2l0aW9uPVwiY2VudGVyXCJdKXtsZWZ0OjUwJTt0cmFuc2Zvcm06dHJhbnNsYXRlKC01MCUpfTp3aGVyZShbZGF0YS1zb25uZXItdG9hc3Rlcl1bZGF0YS15LXBvc2l0aW9uPVwidG9wXCJdKXt0b3A6bWF4KHZhcigtLW9mZnNldCksZW52KHNhZmUtYXJlYS1pbnNldC10b3ApKX06d2hlcmUoW2RhdGEtc29ubmVyLXRvYXN0ZXJdW2RhdGEteS1wb3NpdGlvbj1cImJvdHRvbVwiXSl7Ym90dG9tOm1heCh2YXIoLS1vZmZzZXQpLGVudihzYWZlLWFyZWEtaW5zZXQtYm90dG9tKSl9OndoZXJlKFtkYXRhLXNvbm5lci10b2FzdF0pey0teTogdHJhbnNsYXRlWSgxMDAlKTstLWxpZnQtYW1vdW50OiBjYWxjKHZhcigtLWxpZnQpICogdmFyKC0tZ2FwKSk7ei1pbmRleDp2YXIoLS16LWluZGV4KTtwb3NpdGlvbjphYnNvbHV0ZTtvcGFjaXR5OjA7dHJhbnNmb3JtOnZhcigtLXkpO2ZpbHRlcjpibHVyKDApO3RvdWNoLWFjdGlvbjpub25lO3RyYW5zaXRpb246dHJhbnNmb3JtIC40cyxvcGFjaXR5IC40cyxoZWlnaHQgLjRzLGJveC1zaGFkb3cgLjJzO2JveC1zaXppbmc6Ym9yZGVyLWJveDtvdXRsaW5lOm5vbmU7b3ZlcmZsb3ctd3JhcDphbnl3aGVyZX06d2hlcmUoW2RhdGEtc29ubmVyLXRvYXN0XVtkYXRhLXN0eWxlZD1cInRydWVcIl0pe3BhZGRpbmc6MTZweDtiYWNrZ3JvdW5kOnZhcigtLW5vcm1hbC1iZyk7Ym9yZGVyOjFweCBzb2xpZCB2YXIoLS1ub3JtYWwtYm9yZGVyKTtjb2xvcjp2YXIoLS1ub3JtYWwtdGV4dCk7Ym9yZGVyLXJhZGl1czp2YXIoLS1ib3JkZXItcmFkaXVzKTtib3gtc2hhZG93OjAgNHB4IDEycHggIzAwMDAwMDFhO3dpZHRoOnZhcigtLXdpZHRoKTtmb250LXNpemU6MTNweDtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2dhcDo2cHh9OndoZXJlKFtkYXRhLXNvbm5lci10b2FzdF06Zm9jdXMtdmlzaWJsZSl7Ym94LXNoYWRvdzowIDRweCAxMnB4ICMwMDAwMDAxYSwwIDAgMCAycHggIzAwMDN9OndoZXJlKFtkYXRhLXNvbm5lci10b2FzdF1bZGF0YS15LXBvc2l0aW9uPVwidG9wXCJdKXt0b3A6MDstLXk6IHRyYW5zbGF0ZVkoLTEwMCUpOy0tbGlmdDogMTstLWxpZnQtYW1vdW50OiBjYWxjKDEgKiB2YXIoLS1nYXApKX06d2hlcmUoW2RhdGEtc29ubmVyLXRvYXN0XVtkYXRhLXktcG9zaXRpb249XCJib3R0b21cIl0pe2JvdHRvbTowOy0teTogdHJhbnNsYXRlWSgxMDAlKTstLWxpZnQ6IC0xOy0tbGlmdC1hbW91bnQ6IGNhbGModmFyKC0tbGlmdCkgKiB2YXIoLS1nYXApKX06d2hlcmUoW2RhdGEtc29ubmVyLXRvYXN0XSkgOndoZXJlKFtkYXRhLWRlc2NyaXB0aW9uXSl7Zm9udC13ZWlnaHQ6NDAwO2xpbmUtaGVpZ2h0OjEuNDtjb2xvcjppbmhlcml0fTp3aGVyZShbZGF0YS1zb25uZXItdG9hc3RdKSA6d2hlcmUoW2RhdGEtdGl0bGVdKXtmb250LXdlaWdodDo1MDA7bGluZS1oZWlnaHQ6MS41O2NvbG9yOmluaGVyaXR9OndoZXJlKFtkYXRhLXNvbm5lci10b2FzdF0pIDp3aGVyZShbZGF0YS1pY29uXSl7ZGlzcGxheTpmbGV4O2hlaWdodDoxNnB4O3dpZHRoOjE2cHg7cG9zaXRpb246cmVsYXRpdmU7anVzdGlmeS1jb250ZW50OmZsZXgtc3RhcnQ7YWxpZ24taXRlbXM6Y2VudGVyO2ZsZXgtc2hyaW5rOjA7bWFyZ2luLWxlZnQ6dmFyKC0tdG9hc3QtaWNvbi1tYXJnaW4tc3RhcnQpO21hcmdpbi1yaWdodDp2YXIoLS10b2FzdC1pY29uLW1hcmdpbi1lbmQpfTp3aGVyZShbZGF0YS1zb25uZXItdG9hc3RdW2RhdGEtcHJvbWlzZT1cInRydWVcIl0pIDp3aGVyZShbZGF0YS1pY29uXSk+c3Zne29wYWNpdHk6MDt0cmFuc2Zvcm06c2NhbGUoLjgpO3RyYW5zZm9ybS1vcmlnaW46Y2VudGVyO2FuaW1hdGlvbjpzb25uZXItZmFkZS1pbiAuM3MgZWFzZSBmb3J3YXJkc306d2hlcmUoW2RhdGEtc29ubmVyLXRvYXN0XSkgOndoZXJlKFtkYXRhLWljb25dKT4qe2ZsZXgtc2hyaW5rOjB9OndoZXJlKFtkYXRhLXNvbm5lci10b2FzdF0pIDp3aGVyZShbZGF0YS1pY29uXSkgc3Zne21hcmdpbi1sZWZ0OnZhcigtLXRvYXN0LXN2Zy1tYXJnaW4tc3RhcnQpO21hcmdpbi1yaWdodDp2YXIoLS10b2FzdC1zdmctbWFyZ2luLWVuZCl9OndoZXJlKFtkYXRhLXNvbm5lci10b2FzdF0pIDp3aGVyZShbZGF0YS1jb250ZW50XSl7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtnYXA6MnB4fVtkYXRhLXNvbm5lci10b2FzdF1bZGF0YS1zdHlsZWQ9dHJ1ZV0gW2RhdGEtYnV0dG9uXXtib3JkZXItcmFkaXVzOjRweDtwYWRkaW5nLWxlZnQ6OHB4O3BhZGRpbmctcmlnaHQ6OHB4O2hlaWdodDoyNHB4O2ZvbnQtc2l6ZToxMnB4O2NvbG9yOnZhcigtLW5vcm1hbC1iZyk7YmFja2dyb3VuZDp2YXIoLS1ub3JtYWwtdGV4dCk7bWFyZ2luLWxlZnQ6dmFyKC0tdG9hc3QtYnV0dG9uLW1hcmdpbi1zdGFydCk7bWFyZ2luLXJpZ2h0OnZhcigtLXRvYXN0LWJ1dHRvbi1tYXJnaW4tZW5kKTtib3JkZXI6bm9uZTtjdXJzb3I6cG9pbnRlcjtvdXRsaW5lOm5vbmU7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtmbGV4LXNocmluazowO3RyYW5zaXRpb246b3BhY2l0eSAuNHMsYm94LXNoYWRvdyAuMnN9OndoZXJlKFtkYXRhLXNvbm5lci10b2FzdF0pIDp3aGVyZShbZGF0YS1idXR0b25dKTpmb2N1cy12aXNpYmxle2JveC1zaGFkb3c6MCAwIDAgMnB4ICMwMDA2fTp3aGVyZShbZGF0YS1zb25uZXItdG9hc3RdKSA6d2hlcmUoW2RhdGEtYnV0dG9uXSk6Zmlyc3Qtb2YtdHlwZXttYXJnaW4tbGVmdDp2YXIoLS10b2FzdC1idXR0b24tbWFyZ2luLXN0YXJ0KTttYXJnaW4tcmlnaHQ6dmFyKC0tdG9hc3QtYnV0dG9uLW1hcmdpbi1lbmQpfTp3aGVyZShbZGF0YS1zb25uZXItdG9hc3RdKSA6d2hlcmUoW2RhdGEtY2FuY2VsXSl7Y29sb3I6dmFyKC0tbm9ybWFsLXRleHQpO2JhY2tncm91bmQ6cmdiYSgwLDAsMCwuMDgpfTp3aGVyZShbZGF0YS1zb25uZXItdG9hc3RdW2RhdGEtdGhlbWU9XCJkYXJrXCJdKSA6d2hlcmUoW2RhdGEtY2FuY2VsXSl7YmFja2dyb3VuZDpyZ2JhKDI1NSwyNTUsMjU1LC4zKX06d2hlcmUoW2RhdGEtc29ubmVyLXRvYXN0XSkgOndoZXJlKFtkYXRhLWNsb3NlLWJ1dHRvbl0pe3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6dmFyKC0tdG9hc3QtY2xvc2UtYnV0dG9uLXN0YXJ0KTtyaWdodDp2YXIoLS10b2FzdC1jbG9zZS1idXR0b24tZW5kKTt0b3A6MDtoZWlnaHQ6MjBweDt3aWR0aDoyMHB4O2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjtwYWRkaW5nOjA7Y29sb3I6dmFyKC0tZ3JheTEyKTtib3JkZXI6MXB4IHNvbGlkIHZhcigtLWdyYXk0KTt0cmFuc2Zvcm06dmFyKC0tdG9hc3QtY2xvc2UtYnV0dG9uLXRyYW5zZm9ybSk7Ym9yZGVyLXJhZGl1czo1MCU7Y3Vyc29yOnBvaW50ZXI7ei1pbmRleDoxO3RyYW5zaXRpb246b3BhY2l0eSAuMXMsYmFja2dyb3VuZCAuMnMsYm9yZGVyLWNvbG9yIC4yc31bZGF0YS1zb25uZXItdG9hc3RdIFtkYXRhLWNsb3NlLWJ1dHRvbl17YmFja2dyb3VuZDp2YXIoLS1ncmF5MSl9OndoZXJlKFtkYXRhLXNvbm5lci10b2FzdF0pIDp3aGVyZShbZGF0YS1jbG9zZS1idXR0b25dKTpmb2N1cy12aXNpYmxle2JveC1zaGFkb3c6MCA0cHggMTJweCAjMDAwMDAwMWEsMCAwIDAgMnB4ICMwMDAzfTp3aGVyZShbZGF0YS1zb25uZXItdG9hc3RdKSA6d2hlcmUoW2RhdGEtZGlzYWJsZWQ9XCJ0cnVlXCJdKXtjdXJzb3I6bm90LWFsbG93ZWR9OndoZXJlKFtkYXRhLXNvbm5lci10b2FzdF0pOmhvdmVyIDp3aGVyZShbZGF0YS1jbG9zZS1idXR0b25dKTpob3ZlcntiYWNrZ3JvdW5kOnZhcigtLWdyYXkyKTtib3JkZXItY29sb3I6dmFyKC0tZ3JheTUpfTp3aGVyZShbZGF0YS1zb25uZXItdG9hc3RdW2RhdGEtc3dpcGluZz1cInRydWVcIl0pOmJlZm9yZXtjb250ZW50OlwiXCI7cG9zaXRpb246YWJzb2x1dGU7bGVmdDowO3JpZ2h0OjA7aGVpZ2h0OjEwMCU7ei1pbmRleDotMX06d2hlcmUoW2RhdGEtc29ubmVyLXRvYXN0XVtkYXRhLXktcG9zaXRpb249XCJ0b3BcIl1bZGF0YS1zd2lwaW5nPVwidHJ1ZVwiXSk6YmVmb3Jle2JvdHRvbTo1MCU7dHJhbnNmb3JtOnNjYWxlWSgzKSB0cmFuc2xhdGVZKDUwJSl9OndoZXJlKFtkYXRhLXNvbm5lci10b2FzdF1bZGF0YS15LXBvc2l0aW9uPVwiYm90dG9tXCJdW2RhdGEtc3dpcGluZz1cInRydWVcIl0pOmJlZm9yZXt0b3A6NTAlO3RyYW5zZm9ybTpzY2FsZVkoMykgdHJhbnNsYXRlWSgtNTAlKX06d2hlcmUoW2RhdGEtc29ubmVyLXRvYXN0XVtkYXRhLXN3aXBpbmc9XCJmYWxzZVwiXVtkYXRhLXJlbW92ZWQ9XCJ0cnVlXCJdKTpiZWZvcmV7Y29udGVudDpcIlwiO3Bvc2l0aW9uOmFic29sdXRlO2luc2V0OjA7dHJhbnNmb3JtOnNjYWxlWSgyKX06d2hlcmUoW2RhdGEtc29ubmVyLXRvYXN0XSk6YWZ0ZXJ7Y29udGVudDpcIlwiO3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MDtoZWlnaHQ6Y2FsYyh2YXIoLS1nYXApICsgMXB4KTtib3R0b206MTAwJTt3aWR0aDoxMDAlfTp3aGVyZShbZGF0YS1zb25uZXItdG9hc3RdW2RhdGEtbW91bnRlZD1cInRydWVcIl0pey0teTogdHJhbnNsYXRlWSgwKTtvcGFjaXR5OjF9OndoZXJlKFtkYXRhLXNvbm5lci10b2FzdF1bZGF0YS1leHBhbmRlZD1cImZhbHNlXCJdW2RhdGEtZnJvbnQ9XCJmYWxzZVwiXSl7LS1zY2FsZTogdmFyKC0tdG9hc3RzLWJlZm9yZSkgKiAuMDUgKyAxOy0teTogdHJhbnNsYXRlWShjYWxjKHZhcigtLWxpZnQtYW1vdW50KSAqIHZhcigtLXRvYXN0cy1iZWZvcmUpKSkgc2NhbGUoY2FsYygtMSAqIHZhcigtLXNjYWxlKSkpO2hlaWdodDp2YXIoLS1mcm9udC10b2FzdC1oZWlnaHQpfTp3aGVyZShbZGF0YS1zb25uZXItdG9hc3RdKT4qe3RyYW5zaXRpb246b3BhY2l0eSAuNHN9OndoZXJlKFtkYXRhLXNvbm5lci10b2FzdF1bZGF0YS1leHBhbmRlZD1cImZhbHNlXCJdW2RhdGEtZnJvbnQ9XCJmYWxzZVwiXVtkYXRhLXN0eWxlZD1cInRydWVcIl0pPip7b3BhY2l0eTowfTp3aGVyZShbZGF0YS1zb25uZXItdG9hc3RdW2RhdGEtdmlzaWJsZT1cImZhbHNlXCJdKXtvcGFjaXR5OjA7cG9pbnRlci1ldmVudHM6bm9uZX06d2hlcmUoW2RhdGEtc29ubmVyLXRvYXN0XVtkYXRhLW1vdW50ZWQ9XCJ0cnVlXCJdW2RhdGEtZXhwYW5kZWQ9XCJ0cnVlXCJdKXstLXk6IHRyYW5zbGF0ZVkoY2FsYyh2YXIoLS1saWZ0KSAqIHZhcigtLW9mZnNldCkpKTtoZWlnaHQ6dmFyKC0taW5pdGlhbC1oZWlnaHQpfTp3aGVyZShbZGF0YS1zb25uZXItdG9hc3RdW2RhdGEtcmVtb3ZlZD1cInRydWVcIl1bZGF0YS1mcm9udD1cInRydWVcIl1bZGF0YS1zd2lwZS1vdXQ9XCJmYWxzZVwiXSl7LS15OiB0cmFuc2xhdGVZKGNhbGModmFyKC0tbGlmdCkgKiAtMTAwJSkpO29wYWNpdHk6MH06d2hlcmUoW2RhdGEtc29ubmVyLXRvYXN0XVtkYXRhLXJlbW92ZWQ9XCJ0cnVlXCJdW2RhdGEtZnJvbnQ9XCJmYWxzZVwiXVtkYXRhLXN3aXBlLW91dD1cImZhbHNlXCJdW2RhdGEtZXhwYW5kZWQ9XCJ0cnVlXCJdKXstLXk6IHRyYW5zbGF0ZVkoY2FsYyh2YXIoLS1saWZ0KSAqIHZhcigtLW9mZnNldCkgKyB2YXIoLS1saWZ0KSAqIC0xMDAlKSk7b3BhY2l0eTowfTp3aGVyZShbZGF0YS1zb25uZXItdG9hc3RdW2RhdGEtcmVtb3ZlZD1cInRydWVcIl1bZGF0YS1mcm9udD1cImZhbHNlXCJdW2RhdGEtc3dpcGUtb3V0PVwiZmFsc2VcIl1bZGF0YS1leHBhbmRlZD1cImZhbHNlXCJdKXstLXk6IHRyYW5zbGF0ZVkoNDAlKTtvcGFjaXR5OjA7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjVzLG9wYWNpdHkgLjJzfTp3aGVyZShbZGF0YS1zb25uZXItdG9hc3RdW2RhdGEtcmVtb3ZlZD1cInRydWVcIl1bZGF0YS1mcm9udD1cImZhbHNlXCJdKTpiZWZvcmV7aGVpZ2h0OmNhbGModmFyKC0taW5pdGlhbC1oZWlnaHQpICsgMjAlKX1bZGF0YS1zb25uZXItdG9hc3RdW2RhdGEtc3dpcGluZz10cnVlXXt0cmFuc2Zvcm06dmFyKC0teSkgdHJhbnNsYXRlWSh2YXIoLS1zd2lwZS1hbW91bnQsIDBweCkpO3RyYW5zaXRpb246bm9uZX1bZGF0YS1zb25uZXItdG9hc3RdW2RhdGEtc3dpcGVkPXRydWVde3VzZXItc2VsZWN0Om5vbmV9W2RhdGEtc29ubmVyLXRvYXN0XVtkYXRhLXN3aXBlLW91dD10cnVlXVtkYXRhLXktcG9zaXRpb249Ym90dG9tXSxbZGF0YS1zb25uZXItdG9hc3RdW2RhdGEtc3dpcGUtb3V0PXRydWVdW2RhdGEteS1wb3NpdGlvbj10b3Bde2FuaW1hdGlvbjpzd2lwZS1vdXQgLjJzIGVhc2Utb3V0IGZvcndhcmRzfUBrZXlmcmFtZXMgc3dpcGUtb3V0ezAle3RyYW5zZm9ybTp0cmFuc2xhdGVZKGNhbGModmFyKC0tbGlmdCkgKiB2YXIoLS1vZmZzZXQpICsgdmFyKC0tc3dpcGUtYW1vdW50KSkpO29wYWNpdHk6MX10b3t0cmFuc2Zvcm06dHJhbnNsYXRlWShjYWxjKHZhcigtLWxpZnQpICogdmFyKC0tb2Zmc2V0KSArIHZhcigtLXN3aXBlLWFtb3VudCkgKyB2YXIoLS1saWZ0KSAqIC0xMDAlKSk7b3BhY2l0eTowfX1AbWVkaWEgKG1heC13aWR0aDogNjAwcHgpe1tkYXRhLXNvbm5lci10b2FzdGVyXXtwb3NpdGlvbjpmaXhlZDstLW1vYmlsZS1vZmZzZXQ6IDE2cHg7cmlnaHQ6dmFyKC0tbW9iaWxlLW9mZnNldCk7bGVmdDp2YXIoLS1tb2JpbGUtb2Zmc2V0KTt3aWR0aDoxMDAlfVtkYXRhLXNvbm5lci10b2FzdGVyXVtkaXI9cnRsXXtsZWZ0OmNhbGModmFyKC0tbW9iaWxlLW9mZnNldCkgKiAtMSl9W2RhdGEtc29ubmVyLXRvYXN0ZXJdIFtkYXRhLXNvbm5lci10b2FzdF17bGVmdDowO3JpZ2h0OjA7d2lkdGg6Y2FsYygxMDAlIC0gdmFyKC0tbW9iaWxlLW9mZnNldCkgKiAyKX1bZGF0YS1zb25uZXItdG9hc3Rlcl1bZGF0YS14LXBvc2l0aW9uPWxlZnRde2xlZnQ6dmFyKC0tbW9iaWxlLW9mZnNldCl9W2RhdGEtc29ubmVyLXRvYXN0ZXJdW2RhdGEteS1wb3NpdGlvbj1ib3R0b21de2JvdHRvbToyMHB4fVtkYXRhLXNvbm5lci10b2FzdGVyXVtkYXRhLXktcG9zaXRpb249dG9wXXt0b3A6MjBweH1bZGF0YS1zb25uZXItdG9hc3Rlcl1bZGF0YS14LXBvc2l0aW9uPWNlbnRlcl17bGVmdDp2YXIoLS1tb2JpbGUtb2Zmc2V0KTtyaWdodDp2YXIoLS1tb2JpbGUtb2Zmc2V0KTt0cmFuc2Zvcm06bm9uZX19W2RhdGEtc29ubmVyLXRvYXN0ZXJdW2RhdGEtdGhlbWU9bGlnaHRdey0tbm9ybWFsLWJnOiAjZmZmOy0tbm9ybWFsLWJvcmRlcjogdmFyKC0tZ3JheTQpOy0tbm9ybWFsLXRleHQ6IHZhcigtLWdyYXkxMik7LS1zdWNjZXNzLWJnOiBoc2woMTQzLCA4NSUsIDk2JSk7LS1zdWNjZXNzLWJvcmRlcjogaHNsKDE0NSwgOTIlLCA5MSUpOy0tc3VjY2Vzcy10ZXh0OiBoc2woMTQwLCAxMDAlLCAyNyUpOy0taW5mby1iZzogaHNsKDIwOCwgMTAwJSwgOTclKTstLWluZm8tYm9yZGVyOiBoc2woMjIxLCA5MSUsIDkxJSk7LS1pbmZvLXRleHQ6IGhzbCgyMTAsIDkyJSwgNDUlKTstLXdhcm5pbmctYmc6IGhzbCg0OSwgMTAwJSwgOTclKTstLXdhcm5pbmctYm9yZGVyOiBoc2woNDksIDkxJSwgOTElKTstLXdhcm5pbmctdGV4dDogaHNsKDMxLCA5MiUsIDQ1JSk7LS1lcnJvci1iZzogaHNsKDM1OSwgMTAwJSwgOTclKTstLWVycm9yLWJvcmRlcjogaHNsKDM1OSwgMTAwJSwgOTQlKTstLWVycm9yLXRleHQ6IGhzbCgzNjAsIDEwMCUsIDQ1JSl9W2RhdGEtc29ubmVyLXRvYXN0ZXJdW2RhdGEtdGhlbWU9bGlnaHRdIFtkYXRhLXNvbm5lci10b2FzdF1bZGF0YS1pbnZlcnQ9dHJ1ZV17LS1ub3JtYWwtYmc6ICMwMDA7LS1ub3JtYWwtYm9yZGVyOiBoc2woMCwgMCUsIDIwJSk7LS1ub3JtYWwtdGV4dDogdmFyKC0tZ3JheTEpfVtkYXRhLXNvbm5lci10b2FzdGVyXVtkYXRhLXRoZW1lPWRhcmtdIFtkYXRhLXNvbm5lci10b2FzdF1bZGF0YS1pbnZlcnQ9dHJ1ZV17LS1ub3JtYWwtYmc6ICNmZmY7LS1ub3JtYWwtYm9yZGVyOiB2YXIoLS1ncmF5Myk7LS1ub3JtYWwtdGV4dDogdmFyKC0tZ3JheTEyKX1bZGF0YS1zb25uZXItdG9hc3Rlcl1bZGF0YS10aGVtZT1kYXJrXXstLW5vcm1hbC1iZzogIzAwMDstLW5vcm1hbC1ib3JkZXI6IGhzbCgwLCAwJSwgMjAlKTstLW5vcm1hbC10ZXh0OiB2YXIoLS1ncmF5MSk7LS1zdWNjZXNzLWJnOiBoc2woMTUwLCAxMDAlLCA2JSk7LS1zdWNjZXNzLWJvcmRlcjogaHNsKDE0NywgMTAwJSwgMTIlKTstLXN1Y2Nlc3MtdGV4dDogaHNsKDE1MCwgODYlLCA2NSUpOy0taW5mby1iZzogaHNsKDIxNSwgMTAwJSwgNiUpOy0taW5mby1ib3JkZXI6IGhzbCgyMjMsIDEwMCUsIDEyJSk7LS1pbmZvLXRleHQ6IGhzbCgyMTYsIDg3JSwgNjUlKTstLXdhcm5pbmctYmc6IGhzbCg2NCwgMTAwJSwgNiUpOy0td2FybmluZy1ib3JkZXI6IGhzbCg2MCwgMTAwJSwgMTIlKTstLXdhcm5pbmctdGV4dDogaHNsKDQ2LCA4NyUsIDY1JSk7LS1lcnJvci1iZzogaHNsKDM1OCwgNzYlLCAxMCUpOy0tZXJyb3ItYm9yZGVyOiBoc2woMzU3LCA4OSUsIDE2JSk7LS1lcnJvci10ZXh0OiBoc2woMzU4LCAxMDAlLCA4MSUpfVtkYXRhLXJpY2gtY29sb3JzPXRydWVdW2RhdGEtc29ubmVyLXRvYXN0XVtkYXRhLXR5cGU9c3VjY2Vzc10sW2RhdGEtcmljaC1jb2xvcnM9dHJ1ZV1bZGF0YS1zb25uZXItdG9hc3RdW2RhdGEtdHlwZT1zdWNjZXNzXSBbZGF0YS1jbG9zZS1idXR0b25de2JhY2tncm91bmQ6dmFyKC0tc3VjY2Vzcy1iZyk7Ym9yZGVyLWNvbG9yOnZhcigtLXN1Y2Nlc3MtYm9yZGVyKTtjb2xvcjp2YXIoLS1zdWNjZXNzLXRleHQpfVtkYXRhLXJpY2gtY29sb3JzPXRydWVdW2RhdGEtc29ubmVyLXRvYXN0XVtkYXRhLXR5cGU9aW5mb10sW2RhdGEtcmljaC1jb2xvcnM9dHJ1ZV1bZGF0YS1zb25uZXItdG9hc3RdW2RhdGEtdHlwZT1pbmZvXSBbZGF0YS1jbG9zZS1idXR0b25de2JhY2tncm91bmQ6dmFyKC0taW5mby1iZyk7Ym9yZGVyLWNvbG9yOnZhcigtLWluZm8tYm9yZGVyKTtjb2xvcjp2YXIoLS1pbmZvLXRleHQpfVtkYXRhLXJpY2gtY29sb3JzPXRydWVdW2RhdGEtc29ubmVyLXRvYXN0XVtkYXRhLXR5cGU9d2FybmluZ10sW2RhdGEtcmljaC1jb2xvcnM9dHJ1ZV1bZGF0YS1zb25uZXItdG9hc3RdW2RhdGEtdHlwZT13YXJuaW5nXSBbZGF0YS1jbG9zZS1idXR0b25de2JhY2tncm91bmQ6dmFyKC0td2FybmluZy1iZyk7Ym9yZGVyLWNvbG9yOnZhcigtLXdhcm5pbmctYm9yZGVyKTtjb2xvcjp2YXIoLS13YXJuaW5nLXRleHQpfVtkYXRhLXJpY2gtY29sb3JzPXRydWVdW2RhdGEtc29ubmVyLXRvYXN0XVtkYXRhLXR5cGU9ZXJyb3JdLFtkYXRhLXJpY2gtY29sb3JzPXRydWVdW2RhdGEtc29ubmVyLXRvYXN0XVtkYXRhLXR5cGU9ZXJyb3JdIFtkYXRhLWNsb3NlLWJ1dHRvbl17YmFja2dyb3VuZDp2YXIoLS1lcnJvci1iZyk7Ym9yZGVyLWNvbG9yOnZhcigtLWVycm9yLWJvcmRlcik7Y29sb3I6dmFyKC0tZXJyb3ItdGV4dCl9LnNvbm5lci1sb2FkaW5nLXdyYXBwZXJ7LS1zaXplOiAxNnB4O2hlaWdodDp2YXIoLS1zaXplKTt3aWR0aDp2YXIoLS1zaXplKTtwb3NpdGlvbjphYnNvbHV0ZTtpbnNldDowO3otaW5kZXg6MTB9LnNvbm5lci1sb2FkaW5nLXdyYXBwZXJbZGF0YS12aXNpYmxlPWZhbHNlXXt0cmFuc2Zvcm0tb3JpZ2luOmNlbnRlcjthbmltYXRpb246c29ubmVyLWZhZGUtb3V0IC4ycyBlYXNlIGZvcndhcmRzfS5zb25uZXItc3Bpbm5lcntwb3NpdGlvbjpyZWxhdGl2ZTt0b3A6NTAlO2xlZnQ6NTAlO2hlaWdodDp2YXIoLS1zaXplKTt3aWR0aDp2YXIoLS1zaXplKX0uc29ubmVyLWxvYWRpbmctYmFye2FuaW1hdGlvbjpzb25uZXItc3BpbiAxLjJzIGxpbmVhciBpbmZpbml0ZTtiYWNrZ3JvdW5kOnZhcigtLWdyYXkxMSk7Ym9yZGVyLXJhZGl1czo2cHg7aGVpZ2h0OjglO2xlZnQ6LTEwJTtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6LTMuOSU7d2lkdGg6MjQlfS5zb25uZXItbG9hZGluZy1iYXI6bnRoLWNoaWxkKDEpe2FuaW1hdGlvbi1kZWxheTotMS4yczt0cmFuc2Zvcm06cm90YXRlKC4wMDAxZGVnKSB0cmFuc2xhdGUoMTQ2JSl9LnNvbm5lci1sb2FkaW5nLWJhcjpudGgtY2hpbGQoMil7YW5pbWF0aW9uLWRlbGF5Oi0xLjFzO3RyYW5zZm9ybTpyb3RhdGUoMzBkZWcpIHRyYW5zbGF0ZSgxNDYlKX0uc29ubmVyLWxvYWRpbmctYmFyOm50aC1jaGlsZCgzKXthbmltYXRpb24tZGVsYXk6LTFzO3RyYW5zZm9ybTpyb3RhdGUoNjBkZWcpIHRyYW5zbGF0ZSgxNDYlKX0uc29ubmVyLWxvYWRpbmctYmFyOm50aC1jaGlsZCg0KXthbmltYXRpb24tZGVsYXk6LS45czt0cmFuc2Zvcm06cm90YXRlKDkwZGVnKSB0cmFuc2xhdGUoMTQ2JSl9LnNvbm5lci1sb2FkaW5nLWJhcjpudGgtY2hpbGQoNSl7YW5pbWF0aW9uLWRlbGF5Oi0uOHM7dHJhbnNmb3JtOnJvdGF0ZSgxMjBkZWcpIHRyYW5zbGF0ZSgxNDYlKX0uc29ubmVyLWxvYWRpbmctYmFyOm50aC1jaGlsZCg2KXthbmltYXRpb24tZGVsYXk6LS43czt0cmFuc2Zvcm06cm90YXRlKDE1MGRlZykgdHJhbnNsYXRlKDE0NiUpfS5zb25uZXItbG9hZGluZy1iYXI6bnRoLWNoaWxkKDcpe2FuaW1hdGlvbi1kZWxheTotLjZzO3RyYW5zZm9ybTpyb3RhdGUoMTgwZGVnKSB0cmFuc2xhdGUoMTQ2JSl9LnNvbm5lci1sb2FkaW5nLWJhcjpudGgtY2hpbGQoOCl7YW5pbWF0aW9uLWRlbGF5Oi0uNXM7dHJhbnNmb3JtOnJvdGF0ZSgyMTBkZWcpIHRyYW5zbGF0ZSgxNDYlKX0uc29ubmVyLWxvYWRpbmctYmFyOm50aC1jaGlsZCg5KXthbmltYXRpb24tZGVsYXk6LS40czt0cmFuc2Zvcm06cm90YXRlKDI0MGRlZykgdHJhbnNsYXRlKDE0NiUpfS5zb25uZXItbG9hZGluZy1iYXI6bnRoLWNoaWxkKDEwKXthbmltYXRpb24tZGVsYXk6LS4zczt0cmFuc2Zvcm06cm90YXRlKDI3MGRlZykgdHJhbnNsYXRlKDE0NiUpfS5zb25uZXItbG9hZGluZy1iYXI6bnRoLWNoaWxkKDExKXthbmltYXRpb24tZGVsYXk6LS4yczt0cmFuc2Zvcm06cm90YXRlKDMwMGRlZykgdHJhbnNsYXRlKDE0NiUpfS5zb25uZXItbG9hZGluZy1iYXI6bnRoLWNoaWxkKDEyKXthbmltYXRpb24tZGVsYXk6LS4xczt0cmFuc2Zvcm06cm90YXRlKDMzMGRlZykgdHJhbnNsYXRlKDE0NiUpfUBrZXlmcmFtZXMgc29ubmVyLWZhZGUtaW57MCV7b3BhY2l0eTowO3RyYW5zZm9ybTpzY2FsZSguOCl9dG97b3BhY2l0eToxO3RyYW5zZm9ybTpzY2FsZSgxKX19QGtleWZyYW1lcyBzb25uZXItZmFkZS1vdXR7MCV7b3BhY2l0eToxO3RyYW5zZm9ybTpzY2FsZSgxKX10b3tvcGFjaXR5OjA7dHJhbnNmb3JtOnNjYWxlKC44KX19QGtleWZyYW1lcyBzb25uZXItc3BpbnswJXtvcGFjaXR5OjF9dG97b3BhY2l0eTouMTV9fUBtZWRpYSAocHJlZmVycy1yZWR1Y2VkLW1vdGlvbil7W2RhdGEtc29ubmVyLXRvYXN0XSxbZGF0YS1zb25uZXItdG9hc3RdPiosLnNvbm5lci1sb2FkaW5nLWJhcnt0cmFuc2l0aW9uOm5vbmUhaW1wb3J0YW50O2FuaW1hdGlvbjpub25lIWltcG9ydGFudH19LnNvbm5lci1sb2FkZXJ7cG9zaXRpb246YWJzb2x1dGU7dG9wOjUwJTtsZWZ0OjUwJTt0cmFuc2Zvcm06dHJhbnNsYXRlKC01MCUsLTUwJSk7dHJhbnNmb3JtLW9yaWdpbjpjZW50ZXI7dHJhbnNpdGlvbjpvcGFjaXR5IC4ycyx0cmFuc2Zvcm0gLjJzfS5zb25uZXItbG9hZGVyW2RhdGEtdmlzaWJsZT1mYWxzZV17b3BhY2l0eTowO3RyYW5zZm9ybTpzY2FsZSguOCkgdHJhbnNsYXRlKC01MCUsLTUwJSl9XG5gKTtmdW5jdGlvbiBWKHIpe3JldHVybiByLmxhYmVsIT09dm9pZCAwfXZhciBhZT0zLG5lPVwiMzJweFwiLEx0PTRlMyxzZT0zNTYscmU9MTQsaWU9MjAsbGU9MjAwO2Z1bmN0aW9uIGRlKC4uLnIpe3JldHVybiByLmZpbHRlcihCb29sZWFuKS5qb2luKFwiIFwiKX12YXIgY2U9cj0+e3ZhciB4dCx2dCx3dCxUdCxSdCxTdCxFdCxOdCxQdCxDdCxCdDtsZXR7aW52ZXJ0Om8sdG9hc3Q6dCx1bnN0eWxlZDpzLGludGVyYWN0aW5nOmcsc2V0SGVpZ2h0czpsLHZpc2libGVUb2FzdHM6RSxoZWlnaHRzOlAsaW5kZXg6aCx0b2FzdHM6YyxleHBhbmRlZDp5LHJlbW92ZVRvYXN0OmssZGVmYXVsdFJpY2hDb2xvcnM6aixjbG9zZUJ1dHRvbjpPLHN0eWxlOnN0LGNhbmNlbEJ1dHRvblN0eWxlOmksYWN0aW9uQnV0dG9uU3R5bGU6SyxjbGFzc05hbWU6Sj1cIlwiLGRlc2NyaXB0aW9uQ2xhc3NOYW1lOnJ0PVwiXCIsZHVyYXRpb246Xyxwb3NpdGlvbjppdCxnYXA6bHQsbG9hZGluZ0ljb246WCxleHBhbmRCeURlZmF1bHQ6QyxjbGFzc05hbWVzOmEsaWNvbnM6TixjbG9zZUJ1dHRvbkFyaWFMYWJlbDpHPVwiQ2xvc2UgdG9hc3RcIixwYXVzZVdoZW5QYWdlSXNIaWRkZW46USxjbjpSfT1yLFtCLHFdPWUudXNlU3RhdGUoITEpLFtVLGR0XT1lLnVzZVN0YXRlKCExKSxbTSxBXT1lLnVzZVN0YXRlKCExKSxbWixMXT1lLnVzZVN0YXRlKCExKSxbWSx0dF09ZS51c2VTdGF0ZSghMSksW2QsdV09ZS51c2VTdGF0ZSgwKSxbYix3XT1lLnVzZVN0YXRlKDApLEQ9ZS51c2VSZWYodC5kdXJhdGlvbnx8X3x8THQpLGY9ZS51c2VSZWYobnVsbCksSD1lLnVzZVJlZihudWxsKSxldD1oPT09MCxvdD1oKzE8PUUseD10LnR5cGUsRj10LmRpc21pc3NpYmxlIT09ITEsanQ9dC5jbGFzc05hbWV8fFwiXCIsWXQ9dC5kZXNjcmlwdGlvbkNsYXNzTmFtZXx8XCJcIixhdD1lLnVzZU1lbW8oKCk9PlAuZmluZEluZGV4KG49Pm4udG9hc3RJZD09PXQuaWQpfHwwLFtQLHQuaWRdKSxGdD1lLnVzZU1lbW8oKCk9Pnt2YXIgbjtyZXR1cm4obj10LmNsb3NlQnV0dG9uKSE9bnVsbD9uOk99LFt0LmNsb3NlQnV0dG9uLE9dKSx1ZT1lLnVzZU1lbW8oKCk9PnQuZHVyYXRpb258fF98fEx0LFt0LmR1cmF0aW9uLF9dKSxjdD1lLnVzZVJlZigwKSwkPWUudXNlUmVmKDApLGd0PWUudXNlUmVmKDApLG50PWUudXNlUmVmKG51bGwpLFtodCwkdF09aXQuc3BsaXQoXCItXCIpLGJ0PWUudXNlTWVtbygoKT0+UC5yZWR1Y2UoKG4sbSxwKT0+cD49YXQ/bjpuK20uaGVpZ2h0LDApLFtQLGF0XSkseXQ9QXQoKSxXdD10LmludmVydHx8byx1dD14PT09XCJsb2FkaW5nXCI7JC5jdXJyZW50PWUudXNlTWVtbygoKT0+YXQqbHQrYnQsW2F0LGJ0XSksZS51c2VFZmZlY3QoKCk9PntxKCEwKX0sW10pLGUudXNlRWZmZWN0KCgpPT57bGV0IG49SC5jdXJyZW50O2lmKG4pe2xldCBtPW4uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O3JldHVybiB3KG0pLGwocD0+W3t0b2FzdElkOnQuaWQsaGVpZ2h0Om0scG9zaXRpb246dC5wb3NpdGlvbn0sLi4ucF0pLCgpPT5sKHA9PnAuZmlsdGVyKHY9PnYudG9hc3RJZCE9PXQuaWQpKX19LFtsLHQuaWRdKSxlLnVzZUxheW91dEVmZmVjdCgoKT0+e2lmKCFCKXJldHVybjtsZXQgbj1ILmN1cnJlbnQsbT1uLnN0eWxlLmhlaWdodDtuLnN0eWxlLmhlaWdodD1cImF1dG9cIjtsZXQgcD1uLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtuLnN0eWxlLmhlaWdodD1tLHcocCksbCh2PT52LmZpbmQoST0+SS50b2FzdElkPT09dC5pZCk/di5tYXAoST0+SS50b2FzdElkPT09dC5pZD97Li4uSSxoZWlnaHQ6cH06SSk6W3t0b2FzdElkOnQuaWQsaGVpZ2h0OnAscG9zaXRpb246dC5wb3NpdGlvbn0sLi4udl0pfSxbQix0LnRpdGxlLHQuZGVzY3JpcHRpb24sbCx0LmlkXSk7bGV0IHo9ZS51c2VDYWxsYmFjaygoKT0+e2R0KCEwKSx1KCQuY3VycmVudCksbChuPT5uLmZpbHRlcihtPT5tLnRvYXN0SWQhPT10LmlkKSksc2V0VGltZW91dCgoKT0+e2sodCl9LGxlKX0sW3QsayxsLCRdKTtlLnVzZUVmZmVjdCgoKT0+e2lmKHQucHJvbWlzZSYmeD09PVwibG9hZGluZ1wifHx0LmR1cmF0aW9uPT09MS8wfHx0LnR5cGU9PT1cImxvYWRpbmdcIilyZXR1cm47bGV0IG47cmV0dXJuIHl8fGd8fFEmJnl0PygoKT0+e2lmKGd0LmN1cnJlbnQ8Y3QuY3VycmVudCl7bGV0IHY9bmV3IERhdGUoKS5nZXRUaW1lKCktY3QuY3VycmVudDtELmN1cnJlbnQ9RC5jdXJyZW50LXZ9Z3QuY3VycmVudD1uZXcgRGF0ZSgpLmdldFRpbWUoKX0pKCk6KCgpPT57RC5jdXJyZW50IT09MS8wJiYoY3QuY3VycmVudD1uZXcgRGF0ZSgpLmdldFRpbWUoKSxuPXNldFRpbWVvdXQoKCk9Pnt2YXIgdjsodj10Lm9uQXV0b0Nsb3NlKT09bnVsbHx8di5jYWxsKHQsdCkseigpfSxELmN1cnJlbnQpKX0pKCksKCk9PmNsZWFyVGltZW91dChuKX0sW3ksZyx0LHgsUSx5dCx6XSksZS51c2VFZmZlY3QoKCk9Pnt0LmRlbGV0ZSYmeigpfSxbeix0LmRlbGV0ZV0pO2Z1bmN0aW9uIF90KCl7dmFyIG4sbSxwO3JldHVybiBOIT1udWxsJiZOLmxvYWRpbmc/ZS5jcmVhdGVFbGVtZW50KFwiZGl2XCIse2NsYXNzTmFtZTpSKGE9PW51bGw/dm9pZCAwOmEubG9hZGVyLChuPXQ9PW51bGw/dm9pZCAwOnQuY2xhc3NOYW1lcyk9PW51bGw/dm9pZCAwOm4ubG9hZGVyLFwic29ubmVyLWxvYWRlclwiKSxcImRhdGEtdmlzaWJsZVwiOng9PT1cImxvYWRpbmdcIn0sTi5sb2FkaW5nKTpYP2UuY3JlYXRlRWxlbWVudChcImRpdlwiLHtjbGFzc05hbWU6UihhPT1udWxsP3ZvaWQgMDphLmxvYWRlciwobT10PT1udWxsP3ZvaWQgMDp0LmNsYXNzTmFtZXMpPT1udWxsP3ZvaWQgMDptLmxvYWRlcixcInNvbm5lci1sb2FkZXJcIiksXCJkYXRhLXZpc2libGVcIjp4PT09XCJsb2FkaW5nXCJ9LFgpOmUuY3JlYXRlRWxlbWVudChEdCx7Y2xhc3NOYW1lOlIoYT09bnVsbD92b2lkIDA6YS5sb2FkZXIsKHA9dD09bnVsbD92b2lkIDA6dC5jbGFzc05hbWVzKT09bnVsbD92b2lkIDA6cC5sb2FkZXIpLHZpc2libGU6eD09PVwibG9hZGluZ1wifSl9cmV0dXJuIGUuY3JlYXRlRWxlbWVudChcImxpXCIse3RhYkluZGV4OjAscmVmOkgsY2xhc3NOYW1lOlIoSixqdCxhPT1udWxsP3ZvaWQgMDphLnRvYXN0LCh4dD10PT1udWxsP3ZvaWQgMDp0LmNsYXNzTmFtZXMpPT1udWxsP3ZvaWQgMDp4dC50b2FzdCxhPT1udWxsP3ZvaWQgMDphLmRlZmF1bHQsYT09bnVsbD92b2lkIDA6YVt4XSwodnQ9dD09bnVsbD92b2lkIDA6dC5jbGFzc05hbWVzKT09bnVsbD92b2lkIDA6dnRbeF0pLFwiZGF0YS1zb25uZXItdG9hc3RcIjpcIlwiLFwiZGF0YS1yaWNoLWNvbG9yc1wiOih3dD10LnJpY2hDb2xvcnMpIT1udWxsP3d0OmosXCJkYXRhLXN0eWxlZFwiOiEodC5qc3h8fHQudW5zdHlsZWR8fHMpLFwiZGF0YS1tb3VudGVkXCI6QixcImRhdGEtcHJvbWlzZVwiOiEhdC5wcm9taXNlLFwiZGF0YS1zd2lwZWRcIjpZLFwiZGF0YS1yZW1vdmVkXCI6VSxcImRhdGEtdmlzaWJsZVwiOm90LFwiZGF0YS15LXBvc2l0aW9uXCI6aHQsXCJkYXRhLXgtcG9zaXRpb25cIjokdCxcImRhdGEtaW5kZXhcIjpoLFwiZGF0YS1mcm9udFwiOmV0LFwiZGF0YS1zd2lwaW5nXCI6TSxcImRhdGEtZGlzbWlzc2libGVcIjpGLFwiZGF0YS10eXBlXCI6eCxcImRhdGEtaW52ZXJ0XCI6V3QsXCJkYXRhLXN3aXBlLW91dFwiOlosXCJkYXRhLWV4cGFuZGVkXCI6ISEoeXx8QyYmQiksc3R5bGU6e1wiLS1pbmRleFwiOmgsXCItLXRvYXN0cy1iZWZvcmVcIjpoLFwiLS16LWluZGV4XCI6Yy5sZW5ndGgtaCxcIi0tb2Zmc2V0XCI6YCR7VT9kOiQuY3VycmVudH1weGAsXCItLWluaXRpYWwtaGVpZ2h0XCI6Qz9cImF1dG9cIjpgJHtifXB4YCwuLi5zdCwuLi50LnN0eWxlfSxvblBvaW50ZXJEb3duOm49Pnt1dHx8IUZ8fChmLmN1cnJlbnQ9bmV3IERhdGUsdSgkLmN1cnJlbnQpLG4udGFyZ2V0LnNldFBvaW50ZXJDYXB0dXJlKG4ucG9pbnRlcklkKSxuLnRhcmdldC50YWdOYW1lIT09XCJCVVRUT05cIiYmKEEoITApLG50LmN1cnJlbnQ9e3g6bi5jbGllbnRYLHk6bi5jbGllbnRZfSkpfSxvblBvaW50ZXJVcDooKT0+e3ZhciB2LFcsSSxJdDtpZihafHwhRilyZXR1cm47bnQuY3VycmVudD1udWxsO2xldCBuPU51bWJlcigoKHY9SC5jdXJyZW50KT09bnVsbD92b2lkIDA6di5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKFwiLS1zd2lwZS1hbW91bnRcIikucmVwbGFjZShcInB4XCIsXCJcIikpfHwwKSxtPW5ldyBEYXRlKCkuZ2V0VGltZSgpLSgoVz1mLmN1cnJlbnQpPT1udWxsP3ZvaWQgMDpXLmdldFRpbWUoKSkscD1NYXRoLmFicyhuKS9tO2lmKE1hdGguYWJzKG4pPj1pZXx8cD4uMTEpe3UoJC5jdXJyZW50KSwoST10Lm9uRGlzbWlzcyk9PW51bGx8fEkuY2FsbCh0LHQpLHooKSxMKCEwKSx0dCghMSk7cmV0dXJufShJdD1ILmN1cnJlbnQpPT1udWxsfHxJdC5zdHlsZS5zZXRQcm9wZXJ0eShcIi0tc3dpcGUtYW1vdW50XCIsXCIwcHhcIiksQSghMSl9LG9uUG9pbnRlck1vdmU6bj0+e3ZhciBXLEk7aWYoIW50LmN1cnJlbnR8fCFGKXJldHVybjtsZXQgbT1uLmNsaWVudFktbnQuY3VycmVudC55LHA9KChXPXdpbmRvdy5nZXRTZWxlY3Rpb24oKSk9PW51bGw/dm9pZCAwOlcudG9TdHJpbmcoKS5sZW5ndGgpPjAsdj1odD09PVwidG9wXCI/TWF0aC5taW4oMCxtKTpNYXRoLm1heCgwLG0pO01hdGguYWJzKHYpPjAmJnR0KCEwKSwhcCYmKChJPUguY3VycmVudCk9PW51bGx8fEkuc3R5bGUuc2V0UHJvcGVydHkoXCItLXN3aXBlLWFtb3VudFwiLGAke3Z9cHhgKSl9fSxGdCYmIXQuanN4P2UuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLHtcImFyaWEtbGFiZWxcIjpHLFwiZGF0YS1kaXNhYmxlZFwiOnV0LFwiZGF0YS1jbG9zZS1idXR0b25cIjohMCxvbkNsaWNrOnV0fHwhRj8oKT0+e306KCk9Pnt2YXIgbjt6KCksKG49dC5vbkRpc21pc3MpPT1udWxsfHxuLmNhbGwodCx0KX0sY2xhc3NOYW1lOlIoYT09bnVsbD92b2lkIDA6YS5jbG9zZUJ1dHRvbiwoVHQ9dD09bnVsbD92b2lkIDA6dC5jbGFzc05hbWVzKT09bnVsbD92b2lkIDA6VHQuY2xvc2VCdXR0b24pfSwoUnQ9Tj09bnVsbD92b2lkIDA6Ti5jbG9zZSkhPW51bGw/UnQ6SHQpOm51bGwsdC5qc3h8fGUuaXNWYWxpZEVsZW1lbnQodC50aXRsZSk/dC5qc3g/dC5qc3g6dHlwZW9mIHQudGl0bGU9PVwiZnVuY3Rpb25cIj90LnRpdGxlKCk6dC50aXRsZTplLmNyZWF0ZUVsZW1lbnQoZS5GcmFnbWVudCxudWxsLHh8fHQuaWNvbnx8dC5wcm9taXNlP2UuY3JlYXRlRWxlbWVudChcImRpdlwiLHtcImRhdGEtaWNvblwiOlwiXCIsY2xhc3NOYW1lOlIoYT09bnVsbD92b2lkIDA6YS5pY29uLChTdD10PT1udWxsP3ZvaWQgMDp0LmNsYXNzTmFtZXMpPT1udWxsP3ZvaWQgMDpTdC5pY29uKX0sdC5wcm9taXNlfHx0LnR5cGU9PT1cImxvYWRpbmdcIiYmIXQuaWNvbj90Lmljb258fF90KCk6bnVsbCx0LnR5cGUhPT1cImxvYWRpbmdcIj90Lmljb258fChOPT1udWxsP3ZvaWQgMDpOW3hdKXx8a3QoeCk6bnVsbCk6bnVsbCxlLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIix7XCJkYXRhLWNvbnRlbnRcIjpcIlwiLGNsYXNzTmFtZTpSKGE9PW51bGw/dm9pZCAwOmEuY29udGVudCwoRXQ9dD09bnVsbD92b2lkIDA6dC5jbGFzc05hbWVzKT09bnVsbD92b2lkIDA6RXQuY29udGVudCl9LGUuY3JlYXRlRWxlbWVudChcImRpdlwiLHtcImRhdGEtdGl0bGVcIjpcIlwiLGNsYXNzTmFtZTpSKGE9PW51bGw/dm9pZCAwOmEudGl0bGUsKE50PXQ9PW51bGw/dm9pZCAwOnQuY2xhc3NOYW1lcyk9PW51bGw/dm9pZCAwOk50LnRpdGxlKX0sdHlwZW9mIHQudGl0bGU9PVwiZnVuY3Rpb25cIj90LnRpdGxlKCk6dC50aXRsZSksdC5kZXNjcmlwdGlvbj9lLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIix7XCJkYXRhLWRlc2NyaXB0aW9uXCI6XCJcIixjbGFzc05hbWU6UihydCxZdCxhPT1udWxsP3ZvaWQgMDphLmRlc2NyaXB0aW9uLChQdD10PT1udWxsP3ZvaWQgMDp0LmNsYXNzTmFtZXMpPT1udWxsP3ZvaWQgMDpQdC5kZXNjcmlwdGlvbil9LHR5cGVvZiB0LmRlc2NyaXB0aW9uPT1cImZ1bmN0aW9uXCI/dC5kZXNjcmlwdGlvbigpOnQuZGVzY3JpcHRpb24pOm51bGwpLGUuaXNWYWxpZEVsZW1lbnQodC5jYW5jZWwpP3QuY2FuY2VsOnQuY2FuY2VsJiZWKHQuY2FuY2VsKT9lLmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIix7XCJkYXRhLWJ1dHRvblwiOiEwLFwiZGF0YS1jYW5jZWxcIjohMCxzdHlsZTp0LmNhbmNlbEJ1dHRvblN0eWxlfHxpLG9uQ2xpY2s6bj0+e3ZhciBtLHA7Vih0LmNhbmNlbCkmJkYmJigocD0obT10LmNhbmNlbCkub25DbGljayk9PW51bGx8fHAuY2FsbChtLG4pLHooKSl9LGNsYXNzTmFtZTpSKGE9PW51bGw/dm9pZCAwOmEuY2FuY2VsQnV0dG9uLChDdD10PT1udWxsP3ZvaWQgMDp0LmNsYXNzTmFtZXMpPT1udWxsP3ZvaWQgMDpDdC5jYW5jZWxCdXR0b24pfSx0LmNhbmNlbC5sYWJlbCk6bnVsbCxlLmlzVmFsaWRFbGVtZW50KHQuYWN0aW9uKT90LmFjdGlvbjp0LmFjdGlvbiYmVih0LmFjdGlvbik/ZS5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIse1wiZGF0YS1idXR0b25cIjohMCxcImRhdGEtYWN0aW9uXCI6ITAsc3R5bGU6dC5hY3Rpb25CdXR0b25TdHlsZXx8SyxvbkNsaWNrOm49Pnt2YXIgbSxwO1YodC5hY3Rpb24pJiYoKHA9KG09dC5hY3Rpb24pLm9uQ2xpY2spPT1udWxsfHxwLmNhbGwobSxuKSwhbi5kZWZhdWx0UHJldmVudGVkJiZ6KCkpfSxjbGFzc05hbWU6UihhPT1udWxsP3ZvaWQgMDphLmFjdGlvbkJ1dHRvbiwoQnQ9dD09bnVsbD92b2lkIDA6dC5jbGFzc05hbWVzKT09bnVsbD92b2lkIDA6QnQuYWN0aW9uQnV0dG9uKX0sdC5hY3Rpb24ubGFiZWwpOm51bGwpKX07ZnVuY3Rpb24genQoKXtpZih0eXBlb2Ygd2luZG93PT1cInVuZGVmaW5lZFwifHx0eXBlb2YgZG9jdW1lbnQ9PVwidW5kZWZpbmVkXCIpcmV0dXJuXCJsdHJcIjtsZXQgcj1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGlyXCIpO3JldHVybiByPT09XCJhdXRvXCJ8fCFyP3dpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkuZGlyZWN0aW9uOnJ9ZnVuY3Rpb24gQ2UoKXtsZXRbcixvXT1lLnVzZVN0YXRlKFtdKTtyZXR1cm4gZS51c2VFZmZlY3QoKCk9PlQuc3Vic2NyaWJlKHQ9PntvKHM9PntpZihcImRpc21pc3NcImluIHQmJnQuZGlzbWlzcylyZXR1cm4gcy5maWx0ZXIobD0+bC5pZCE9PXQuaWQpO2xldCBnPXMuZmluZEluZGV4KGw9PmwuaWQ9PT10LmlkKTtpZihnIT09LTEpe2xldCBsPVsuLi5zXTtyZXR1cm4gbFtnXT17Li4ubFtnXSwuLi50fSxsfWVsc2UgcmV0dXJuW3QsLi4uc119KX0pLFtdKSx7dG9hc3RzOnJ9fXZhciBCZT1lZShmdW5jdGlvbihvLHQpe2xldHtpbnZlcnQ6cyxwb3NpdGlvbjpnPVwiYm90dG9tLXJpZ2h0XCIsaG90a2V5Omw9W1wiYWx0S2V5XCIsXCJLZXlUXCJdLGV4cGFuZDpFLGNsb3NlQnV0dG9uOlAsY2xhc3NOYW1lOmgsb2Zmc2V0OmMsdGhlbWU6eT1cImxpZ2h0XCIscmljaENvbG9yczprLGR1cmF0aW9uOmosc3R5bGU6Tyx2aXNpYmxlVG9hc3RzOnN0PWFlLHRvYXN0T3B0aW9uczppLGRpcjpLPXp0KCksZ2FwOko9cmUsbG9hZGluZ0ljb246cnQsaWNvbnM6Xyxjb250YWluZXJBcmlhTGFiZWw6aXQ9XCJOb3RpZmljYXRpb25zXCIscGF1c2VXaGVuUGFnZUlzSGlkZGVuOmx0LGNuOlg9ZGV9PW8sW0MsYV09ZS51c2VTdGF0ZShbXSksTj1lLnVzZU1lbW8oKCk9PkFycmF5LmZyb20obmV3IFNldChbZ10uY29uY2F0KEMuZmlsdGVyKGQ9PmQucG9zaXRpb24pLm1hcChkPT5kLnBvc2l0aW9uKSkpKSxbQyxnXSksW0csUV09ZS51c2VTdGF0ZShbXSksW1IsQl09ZS51c2VTdGF0ZSghMSksW3EsVV09ZS51c2VTdGF0ZSghMSksW2R0LE1dPWUudXNlU3RhdGUoeSE9PVwic3lzdGVtXCI/eTp0eXBlb2Ygd2luZG93IT1cInVuZGVmaW5lZFwiJiZ3aW5kb3cubWF0Y2hNZWRpYSYmd2luZG93Lm1hdGNoTWVkaWEoXCIocHJlZmVycy1jb2xvci1zY2hlbWU6IGRhcmspXCIpLm1hdGNoZXM/XCJkYXJrXCI6XCJsaWdodFwiKSxBPWUudXNlUmVmKG51bGwpLFo9bC5qb2luKFwiK1wiKS5yZXBsYWNlKC9LZXkvZyxcIlwiKS5yZXBsYWNlKC9EaWdpdC9nLFwiXCIpLEw9ZS51c2VSZWYobnVsbCksWT1lLnVzZVJlZighMSksdHQ9ZS51c2VDYWxsYmFjayhkPT57YSh1PT57dmFyIGI7cmV0dXJuKGI9dS5maW5kKHc9PncuaWQ9PT1kLmlkKSkhPW51bGwmJmIuZGVsZXRlfHxULmRpc21pc3MoZC5pZCksdS5maWx0ZXIoKHtpZDp3fSk9PnchPT1kLmlkKX0pfSxbXSk7cmV0dXJuIGUudXNlRWZmZWN0KCgpPT5ULnN1YnNjcmliZShkPT57aWYoZC5kaXNtaXNzKXthKHU9PnUubWFwKGI9PmIuaWQ9PT1kLmlkP3suLi5iLGRlbGV0ZTohMH06YikpO3JldHVybn1zZXRUaW1lb3V0KCgpPT57b2UuZmx1c2hTeW5jKCgpPT57YSh1PT57bGV0IGI9dS5maW5kSW5kZXgodz0+dy5pZD09PWQuaWQpO3JldHVybiBiIT09LTE/Wy4uLnUuc2xpY2UoMCxiKSx7Li4udVtiXSwuLi5kfSwuLi51LnNsaWNlKGIrMSldOltkLC4uLnVdfSl9KX0pfSksW10pLGUudXNlRWZmZWN0KCgpPT57aWYoeSE9PVwic3lzdGVtXCIpe00oeSk7cmV0dXJufWlmKHk9PT1cInN5c3RlbVwiJiYod2luZG93Lm1hdGNoTWVkaWEmJndpbmRvdy5tYXRjaE1lZGlhKFwiKHByZWZlcnMtY29sb3Itc2NoZW1lOiBkYXJrKVwiKS5tYXRjaGVzP00oXCJkYXJrXCIpOk0oXCJsaWdodFwiKSksdHlwZW9mIHdpbmRvdz09XCJ1bmRlZmluZWRcIilyZXR1cm47bGV0IGQ9d2luZG93Lm1hdGNoTWVkaWEoXCIocHJlZmVycy1jb2xvci1zY2hlbWU6IGRhcmspXCIpO3RyeXtkLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwoe21hdGNoZXM6dX0pPT57TSh1P1wiZGFya1wiOlwibGlnaHRcIil9KX1jYXRjaCh1KXtkLmFkZExpc3RlbmVyKCh7bWF0Y2hlczpifSk9Pnt0cnl7TShiP1wiZGFya1wiOlwibGlnaHRcIil9Y2F0Y2godyl7Y29uc29sZS5lcnJvcih3KX19KX19LFt5XSksZS51c2VFZmZlY3QoKCk9PntDLmxlbmd0aDw9MSYmQighMSl9LFtDXSksZS51c2VFZmZlY3QoKCk9PntsZXQgZD11PT57dmFyIHcsRDtsLmV2ZXJ5KGY9PnVbZl18fHUuY29kZT09PWYpJiYoQighMCksKHc9QS5jdXJyZW50KT09bnVsbHx8dy5mb2N1cygpKSx1LmNvZGU9PT1cIkVzY2FwZVwiJiYoZG9jdW1lbnQuYWN0aXZlRWxlbWVudD09PUEuY3VycmVudHx8KEQ9QS5jdXJyZW50KSE9bnVsbCYmRC5jb250YWlucyhkb2N1bWVudC5hY3RpdmVFbGVtZW50KSkmJkIoITEpfTtyZXR1cm4gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIixkKSwoKT0+ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIixkKX0sW2xdKSxlLnVzZUVmZmVjdCgoKT0+e2lmKEEuY3VycmVudClyZXR1cm4oKT0+e0wuY3VycmVudCYmKEwuY3VycmVudC5mb2N1cyh7cHJldmVudFNjcm9sbDohMH0pLEwuY3VycmVudD1udWxsLFkuY3VycmVudD0hMSl9fSxbQS5jdXJyZW50XSksZS5jcmVhdGVFbGVtZW50KFwic2VjdGlvblwiLHtcImFyaWEtbGFiZWxcIjpgJHtpdH0gJHtafWAsdGFiSW5kZXg6LTEsXCJhcmlhLWxpdmVcIjpcInBvbGl0ZVwiLFwiYXJpYS1yZWxldmFudFwiOlwiYWRkaXRpb25zIHRleHRcIixcImFyaWEtYXRvbWljXCI6XCJmYWxzZVwifSxOLm1hcCgoZCx1KT0+e3ZhciBEO2xldFtiLHddPWQuc3BsaXQoXCItXCIpO3JldHVybiBDLmxlbmd0aD9lLmNyZWF0ZUVsZW1lbnQoXCJvbFwiLHtrZXk6ZCxkaXI6Sz09PVwiYXV0b1wiP3p0KCk6Syx0YWJJbmRleDotMSxyZWY6QSxjbGFzc05hbWU6aCxcImRhdGEtc29ubmVyLXRvYXN0ZXJcIjohMCxcImRhdGEtdGhlbWVcIjpkdCxcImRhdGEteS1wb3NpdGlvblwiOmIsXCJkYXRhLWxpZnRlZFwiOlImJkMubGVuZ3RoPjEmJiFFLFwiZGF0YS14LXBvc2l0aW9uXCI6dyxzdHlsZTp7XCItLWZyb250LXRvYXN0LWhlaWdodFwiOmAkeygoRD1HWzBdKT09bnVsbD92b2lkIDA6RC5oZWlnaHQpfHwwfXB4YCxcIi0tb2Zmc2V0XCI6dHlwZW9mIGM9PVwibnVtYmVyXCI/YCR7Y31weGA6Y3x8bmUsXCItLXdpZHRoXCI6YCR7c2V9cHhgLFwiLS1nYXBcIjpgJHtKfXB4YCwuLi5PfSxvbkJsdXI6Zj0+e1kuY3VycmVudCYmIWYuY3VycmVudFRhcmdldC5jb250YWlucyhmLnJlbGF0ZWRUYXJnZXQpJiYoWS5jdXJyZW50PSExLEwuY3VycmVudCYmKEwuY3VycmVudC5mb2N1cyh7cHJldmVudFNjcm9sbDohMH0pLEwuY3VycmVudD1udWxsKSl9LG9uRm9jdXM6Zj0+e2YudGFyZ2V0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQmJmYudGFyZ2V0LmRhdGFzZXQuZGlzbWlzc2libGU9PT1cImZhbHNlXCJ8fFkuY3VycmVudHx8KFkuY3VycmVudD0hMCxMLmN1cnJlbnQ9Zi5yZWxhdGVkVGFyZ2V0KX0sb25Nb3VzZUVudGVyOigpPT5CKCEwKSxvbk1vdXNlTW92ZTooKT0+QighMCksb25Nb3VzZUxlYXZlOigpPT57cXx8QighMSl9LG9uUG9pbnRlckRvd246Zj0+e2YudGFyZ2V0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQmJmYudGFyZ2V0LmRhdGFzZXQuZGlzbWlzc2libGU9PT1cImZhbHNlXCJ8fFUoITApfSxvblBvaW50ZXJVcDooKT0+VSghMSl9LEMuZmlsdGVyKGY9PiFmLnBvc2l0aW9uJiZ1PT09MHx8Zi5wb3NpdGlvbj09PWQpLm1hcCgoZixIKT0+e3ZhciBldCxvdDtyZXR1cm4gZS5jcmVhdGVFbGVtZW50KGNlLHtrZXk6Zi5pZCxpY29uczpfLGluZGV4OkgsdG9hc3Q6ZixkZWZhdWx0UmljaENvbG9yczprLGR1cmF0aW9uOihldD1pPT1udWxsP3ZvaWQgMDppLmR1cmF0aW9uKSE9bnVsbD9ldDpqLGNsYXNzTmFtZTppPT1udWxsP3ZvaWQgMDppLmNsYXNzTmFtZSxkZXNjcmlwdGlvbkNsYXNzTmFtZTppPT1udWxsP3ZvaWQgMDppLmRlc2NyaXB0aW9uQ2xhc3NOYW1lLGludmVydDpzLHZpc2libGVUb2FzdHM6c3QsY2xvc2VCdXR0b246KG90PWk9PW51bGw/dm9pZCAwOmkuY2xvc2VCdXR0b24pIT1udWxsP290OlAsaW50ZXJhY3Rpbmc6cSxwb3NpdGlvbjpkLHN0eWxlOmk9PW51bGw/dm9pZCAwOmkuc3R5bGUsdW5zdHlsZWQ6aT09bnVsbD92b2lkIDA6aS51bnN0eWxlZCxjbGFzc05hbWVzOmk9PW51bGw/dm9pZCAwOmkuY2xhc3NOYW1lcyxjYW5jZWxCdXR0b25TdHlsZTppPT1udWxsP3ZvaWQgMDppLmNhbmNlbEJ1dHRvblN0eWxlLGFjdGlvbkJ1dHRvblN0eWxlOmk9PW51bGw/dm9pZCAwOmkuYWN0aW9uQnV0dG9uU3R5bGUscmVtb3ZlVG9hc3Q6dHQsdG9hc3RzOkMuZmlsdGVyKHg9PngucG9zaXRpb249PWYucG9zaXRpb24pLGhlaWdodHM6Ry5maWx0ZXIoeD0+eC5wb3NpdGlvbj09Zi5wb3NpdGlvbiksc2V0SGVpZ2h0czpRLGV4cGFuZEJ5RGVmYXVsdDpFLGdhcDpKLGxvYWRpbmdJY29uOnJ0LGV4cGFuZGVkOlIscGF1c2VXaGVuUGFnZUlzSGlkZGVuOmx0LGNuOlh9KX0pKTpudWxsfSkpfSk7ZXhwb3J0e0JlIGFzIFRvYXN0ZXIsdGUgYXMgdG9hc3QsQ2UgYXMgdXNlU29ubmVyfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXAiXSwibmFtZXMiOlsiZSIsImZvcndhcmRSZWYiLCJlZSIsIm9lIiwiUyIsImt0IiwiciIsIlZ0IiwiS3QiLCJPdCIsIkp0IiwiVXQiLCJBcnJheSIsImZpbGwiLCJEdCIsInZpc2libGUiLCJjbGFzc05hbWUiLCJvIiwiY3JlYXRlRWxlbWVudCIsImZpbHRlciIsIkJvb2xlYW4iLCJqb2luIiwibWFwIiwidCIsInMiLCJrZXkiLCJ4bWxucyIsInZpZXdCb3giLCJoZWlnaHQiLCJ3aWR0aCIsImZpbGxSdWxlIiwiZCIsImNsaXBSdWxlIiwiSHQiLCJzdHJva2UiLCJzdHJva2VXaWR0aCIsInN0cm9rZUxpbmVjYXAiLCJzdHJva2VMaW5lam9pbiIsIngxIiwieTEiLCJ4MiIsInkyIiwiTXQiLCJBdCIsInVzZVN0YXRlIiwiZG9jdW1lbnQiLCJoaWRkZW4iLCJ1c2VFZmZlY3QiLCJhZGRFdmVudExpc3RlbmVyIiwid2luZG93IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIlh0IiwiZnQiLCJtdCIsImNvbnN0cnVjdG9yIiwic3Vic2NyaWJlIiwic3Vic2NyaWJlcnMiLCJwdXNoIiwiaW5kZXhPZiIsInNwbGljZSIsInB1Ymxpc2giLCJmb3JFYWNoIiwiYWRkVG9hc3QiLCJ0b2FzdHMiLCJjcmVhdGUiLCJQIiwibWVzc2FnZSIsImciLCJpZCIsImxlbmd0aCIsImwiLCJmaW5kIiwiaCIsIkUiLCJkaXNtaXNzaWJsZSIsInRpdGxlIiwiZGlzbWlzcyIsImVycm9yIiwidHlwZSIsInN1Y2Nlc3MiLCJpbmZvIiwid2FybmluZyIsImxvYWRpbmciLCJwcm9taXNlIiwiZGVzY3JpcHRpb24iLCJQcm9taXNlIiwidGhlbiIsImMiLCJpc1ZhbGlkRWxlbWVudCIsIlF0Iiwib2siLCJrIiwic3RhdHVzIiwiaiIsImNhdGNoIiwieSIsImZpbmFsbHkiLCJjYWxsIiwidW53cmFwIiwiT2JqZWN0IiwiYXNzaWduIiwiY3VzdG9tIiwianN4IiwiVCIsIkd0IiwicXQiLCJadCIsInRlIiwiZ2V0SGlzdG9yeSIsInB0IiwiaW5zZXJ0QXQiLCJoZWFkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJmaXJzdENoaWxkIiwiaW5zZXJ0QmVmb3JlIiwiYXBwZW5kQ2hpbGQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNyZWF0ZVRleHROb2RlIiwiViIsImxhYmVsIiwiYWUiLCJuZSIsIkx0Iiwic2UiLCJyZSIsImllIiwibGUiLCJkZSIsImNlIiwieHQiLCJ2dCIsInd0IiwiVHQiLCJSdCIsIlN0IiwiRXQiLCJOdCIsIlB0IiwiQ3QiLCJCdCIsImludmVydCIsInRvYXN0IiwidW5zdHlsZWQiLCJpbnRlcmFjdGluZyIsInNldEhlaWdodHMiLCJ2aXNpYmxlVG9hc3RzIiwiaGVpZ2h0cyIsImluZGV4IiwiZXhwYW5kZWQiLCJyZW1vdmVUb2FzdCIsImRlZmF1bHRSaWNoQ29sb3JzIiwiY2xvc2VCdXR0b24iLCJPIiwic3R5bGUiLCJzdCIsImNhbmNlbEJ1dHRvblN0eWxlIiwiaSIsImFjdGlvbkJ1dHRvblN0eWxlIiwiSyIsIkoiLCJkZXNjcmlwdGlvbkNsYXNzTmFtZSIsInJ0IiwiZHVyYXRpb24iLCJfIiwicG9zaXRpb24iLCJpdCIsImdhcCIsImx0IiwibG9hZGluZ0ljb24iLCJYIiwiZXhwYW5kQnlEZWZhdWx0IiwiQyIsImNsYXNzTmFtZXMiLCJhIiwiaWNvbnMiLCJOIiwiY2xvc2VCdXR0b25BcmlhTGFiZWwiLCJHIiwicGF1c2VXaGVuUGFnZUlzSGlkZGVuIiwiUSIsImNuIiwiUiIsIkIiLCJxIiwiVSIsImR0IiwiTSIsIkEiLCJaIiwiTCIsIlkiLCJ0dCIsInUiLCJiIiwidyIsIkQiLCJ1c2VSZWYiLCJmIiwiSCIsImV0Iiwib3QiLCJ4IiwiRiIsImp0IiwiWXQiLCJhdCIsInVzZU1lbW8iLCJmaW5kSW5kZXgiLCJuIiwidG9hc3RJZCIsIkZ0IiwidWUiLCJjdCIsIiQiLCJndCIsIm50IiwiaHQiLCIkdCIsInNwbGl0IiwiYnQiLCJyZWR1Y2UiLCJtIiwicCIsInl0IiwiV3QiLCJ1dCIsImN1cnJlbnQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ2IiwidXNlTGF5b3V0RWZmZWN0IiwiSSIsInoiLCJ1c2VDYWxsYmFjayIsInNldFRpbWVvdXQiLCJEYXRlIiwiZ2V0VGltZSIsIm9uQXV0b0Nsb3NlIiwiY2xlYXJUaW1lb3V0IiwiZGVsZXRlIiwiX3QiLCJsb2FkZXIiLCJ0YWJJbmRleCIsInJlZiIsImRlZmF1bHQiLCJyaWNoQ29sb3JzIiwib25Qb2ludGVyRG93biIsInRhcmdldCIsInNldFBvaW50ZXJDYXB0dXJlIiwicG9pbnRlcklkIiwidGFnTmFtZSIsImNsaWVudFgiLCJjbGllbnRZIiwib25Qb2ludGVyVXAiLCJXIiwiSXQiLCJOdW1iZXIiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicmVwbGFjZSIsIk1hdGgiLCJhYnMiLCJvbkRpc21pc3MiLCJzZXRQcm9wZXJ0eSIsIm9uUG9pbnRlck1vdmUiLCJnZXRTZWxlY3Rpb24iLCJ0b1N0cmluZyIsIm1pbiIsIm1heCIsIm9uQ2xpY2siLCJjbG9zZSIsIkZyYWdtZW50IiwiaWNvbiIsImNvbnRlbnQiLCJjYW5jZWwiLCJjYW5jZWxCdXR0b24iLCJhY3Rpb24iLCJkZWZhdWx0UHJldmVudGVkIiwiYWN0aW9uQnV0dG9uIiwienQiLCJkb2N1bWVudEVsZW1lbnQiLCJnZXRBdHRyaWJ1dGUiLCJnZXRDb21wdXRlZFN0eWxlIiwiZGlyZWN0aW9uIiwiQ2UiLCJCZSIsImhvdGtleSIsImV4cGFuZCIsIm9mZnNldCIsInRoZW1lIiwidG9hc3RPcHRpb25zIiwiZGlyIiwiY29udGFpbmVyQXJpYUxhYmVsIiwiZnJvbSIsIlNldCIsImNvbmNhdCIsIm1hdGNoTWVkaWEiLCJtYXRjaGVzIiwiZmx1c2hTeW5jIiwic2xpY2UiLCJhZGRMaXN0ZW5lciIsImNvbnNvbGUiLCJldmVyeSIsImNvZGUiLCJmb2N1cyIsImFjdGl2ZUVsZW1lbnQiLCJjb250YWlucyIsInByZXZlbnRTY3JvbGwiLCJvbkJsdXIiLCJjdXJyZW50VGFyZ2V0IiwicmVsYXRlZFRhcmdldCIsIm9uRm9jdXMiLCJIVE1MRWxlbWVudCIsImRhdGFzZXQiLCJvbk1vdXNlRW50ZXIiLCJvbk1vdXNlTW92ZSIsIm9uTW91c2VMZWF2ZSIsIlRvYXN0ZXIiLCJ1c2VTb25uZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/sonner/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/tailwind-merge/dist/bundle-mjs.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/tailwind-merge/dist/bundle-mjs.mjs ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createTailwindMerge: function() { return /* binding */ createTailwindMerge; },\n/* harmony export */   extendTailwindMerge: function() { return /* binding */ extendTailwindMerge; },\n/* harmony export */   fromTheme: function() { return /* binding */ fromTheme; },\n/* harmony export */   getDefaultConfig: function() { return /* binding */ getDefaultConfig; },\n/* harmony export */   mergeConfigs: function() { return /* binding */ mergeConfigs; },\n/* harmony export */   twJoin: function() { return /* binding */ twJoin; },\n/* harmony export */   twMerge: function() { return /* binding */ twMerge; },\n/* harmony export */   validators: function() { return /* binding */ validators; }\n/* harmony export */ });\nconst CLASS_PART_SEPARATOR = \"-\";\nconst createClassGroupUtils = (config)=>{\n    const classMap = createClassMap(config);\n    const { conflictingClassGroups, conflictingClassGroupModifiers } = config;\n    const getClassGroupId = (className)=>{\n        const classParts = className.split(CLASS_PART_SEPARATOR);\n        // Classes like `-inset-1` produce an empty string as first classPart. We assume that classes for negative values are used correctly and remove it from classParts.\n        if (classParts[0] === \"\" && classParts.length !== 1) {\n            classParts.shift();\n        }\n        return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className);\n    };\n    const getConflictingClassGroupIds = (classGroupId, hasPostfixModifier)=>{\n        const conflicts = conflictingClassGroups[classGroupId] || [];\n        if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {\n            return [\n                ...conflicts,\n                ...conflictingClassGroupModifiers[classGroupId]\n            ];\n        }\n        return conflicts;\n    };\n    return {\n        getClassGroupId,\n        getConflictingClassGroupIds\n    };\n};\nconst getGroupRecursive = (classParts, classPartObject)=>{\n    var _classPartObject_validators_find;\n    if (classParts.length === 0) {\n        return classPartObject.classGroupId;\n    }\n    const currentClassPart = classParts[0];\n    const nextClassPartObject = classPartObject.nextPart.get(currentClassPart);\n    const classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : undefined;\n    if (classGroupFromNextClassPart) {\n        return classGroupFromNextClassPart;\n    }\n    if (classPartObject.validators.length === 0) {\n        return undefined;\n    }\n    const classRest = classParts.join(CLASS_PART_SEPARATOR);\n    return (_classPartObject_validators_find = classPartObject.validators.find((param)=>{\n        let { validator } = param;\n        return validator(classRest);\n    })) === null || _classPartObject_validators_find === void 0 ? void 0 : _classPartObject_validators_find.classGroupId;\n};\nconst arbitraryPropertyRegex = /^\\[(.+)\\]$/;\nconst getGroupIdForArbitraryProperty = (className)=>{\n    if (arbitraryPropertyRegex.test(className)) {\n        const arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1];\n        const property = arbitraryPropertyClassName === null || arbitraryPropertyClassName === void 0 ? void 0 : arbitraryPropertyClassName.substring(0, arbitraryPropertyClassName.indexOf(\":\"));\n        if (property) {\n            // I use two dots here because one dot is used as prefix for class groups in plugins\n            return \"arbitrary..\" + property;\n        }\n    }\n};\n/**\n * Exported for testing only\n */ const createClassMap = (config)=>{\n    const { theme, prefix } = config;\n    const classMap = {\n        nextPart: new Map(),\n        validators: []\n    };\n    const prefixedClassGroupEntries = getPrefixedClassGroupEntries(Object.entries(config.classGroups), prefix);\n    prefixedClassGroupEntries.forEach((param)=>{\n        let [classGroupId, classGroup] = param;\n        processClassesRecursively(classGroup, classMap, classGroupId, theme);\n    });\n    return classMap;\n};\nconst processClassesRecursively = (classGroup, classPartObject, classGroupId, theme)=>{\n    classGroup.forEach((classDefinition)=>{\n        if (typeof classDefinition === \"string\") {\n            const classPartObjectToEdit = classDefinition === \"\" ? classPartObject : getPart(classPartObject, classDefinition);\n            classPartObjectToEdit.classGroupId = classGroupId;\n            return;\n        }\n        if (typeof classDefinition === \"function\") {\n            if (isThemeGetter(classDefinition)) {\n                processClassesRecursively(classDefinition(theme), classPartObject, classGroupId, theme);\n                return;\n            }\n            classPartObject.validators.push({\n                validator: classDefinition,\n                classGroupId\n            });\n            return;\n        }\n        Object.entries(classDefinition).forEach((param)=>{\n            let [key, classGroup] = param;\n            processClassesRecursively(classGroup, getPart(classPartObject, key), classGroupId, theme);\n        });\n    });\n};\nconst getPart = (classPartObject, path)=>{\n    let currentClassPartObject = classPartObject;\n    path.split(CLASS_PART_SEPARATOR).forEach((pathPart)=>{\n        if (!currentClassPartObject.nextPart.has(pathPart)) {\n            currentClassPartObject.nextPart.set(pathPart, {\n                nextPart: new Map(),\n                validators: []\n            });\n        }\n        currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);\n    });\n    return currentClassPartObject;\n};\nconst isThemeGetter = (func)=>func.isThemeGetter;\nconst getPrefixedClassGroupEntries = (classGroupEntries, prefix)=>{\n    if (!prefix) {\n        return classGroupEntries;\n    }\n    return classGroupEntries.map((param)=>{\n        let [classGroupId, classGroup] = param;\n        const prefixedClassGroup = classGroup.map((classDefinition)=>{\n            if (typeof classDefinition === \"string\") {\n                return prefix + classDefinition;\n            }\n            if (typeof classDefinition === \"object\") {\n                return Object.fromEntries(Object.entries(classDefinition).map((param)=>{\n                    let [key, value] = param;\n                    return [\n                        prefix + key,\n                        value\n                    ];\n                }));\n            }\n            return classDefinition;\n        });\n        return [\n            classGroupId,\n            prefixedClassGroup\n        ];\n    });\n};\n// LRU cache inspired from hashlru (https://github.com/dominictarr/hashlru/blob/v1.0.4/index.js) but object replaced with Map to improve performance\nconst createLruCache = (maxCacheSize)=>{\n    if (maxCacheSize < 1) {\n        return {\n            get: ()=>undefined,\n            set: ()=>{}\n        };\n    }\n    let cacheSize = 0;\n    let cache = new Map();\n    let previousCache = new Map();\n    const update = (key, value)=>{\n        cache.set(key, value);\n        cacheSize++;\n        if (cacheSize > maxCacheSize) {\n            cacheSize = 0;\n            previousCache = cache;\n            cache = new Map();\n        }\n    };\n    return {\n        get (key) {\n            let value = cache.get(key);\n            if (value !== undefined) {\n                return value;\n            }\n            if ((value = previousCache.get(key)) !== undefined) {\n                update(key, value);\n                return value;\n            }\n        },\n        set (key, value) {\n            if (cache.has(key)) {\n                cache.set(key, value);\n            } else {\n                update(key, value);\n            }\n        }\n    };\n};\nconst IMPORTANT_MODIFIER = \"!\";\nconst createParseClassName = (config)=>{\n    const { separator, experimentalParseClassName } = config;\n    const isSeparatorSingleCharacter = separator.length === 1;\n    const firstSeparatorCharacter = separator[0];\n    const separatorLength = separator.length;\n    // parseClassName inspired by https://github.com/tailwindlabs/tailwindcss/blob/v3.2.2/src/util/splitAtTopLevelOnly.js\n    const parseClassName = (className)=>{\n        const modifiers = [];\n        let bracketDepth = 0;\n        let modifierStart = 0;\n        let postfixModifierPosition;\n        for(let index = 0; index < className.length; index++){\n            let currentCharacter = className[index];\n            if (bracketDepth === 0) {\n                if (currentCharacter === firstSeparatorCharacter && (isSeparatorSingleCharacter || className.slice(index, index + separatorLength) === separator)) {\n                    modifiers.push(className.slice(modifierStart, index));\n                    modifierStart = index + separatorLength;\n                    continue;\n                }\n                if (currentCharacter === \"/\") {\n                    postfixModifierPosition = index;\n                    continue;\n                }\n            }\n            if (currentCharacter === \"[\") {\n                bracketDepth++;\n            } else if (currentCharacter === \"]\") {\n                bracketDepth--;\n            }\n        }\n        const baseClassNameWithImportantModifier = modifiers.length === 0 ? className : className.substring(modifierStart);\n        const hasImportantModifier = baseClassNameWithImportantModifier.startsWith(IMPORTANT_MODIFIER);\n        const baseClassName = hasImportantModifier ? baseClassNameWithImportantModifier.substring(1) : baseClassNameWithImportantModifier;\n        const maybePostfixModifierPosition = postfixModifierPosition && postfixModifierPosition > modifierStart ? postfixModifierPosition - modifierStart : undefined;\n        return {\n            modifiers,\n            hasImportantModifier,\n            baseClassName,\n            maybePostfixModifierPosition\n        };\n    };\n    if (experimentalParseClassName) {\n        return (className)=>experimentalParseClassName({\n                className,\n                parseClassName\n            });\n    }\n    return parseClassName;\n};\n/**\n * Sorts modifiers according to following schema:\n * - Predefined modifiers are sorted alphabetically\n * - When an arbitrary variant appears, it must be preserved which modifiers are before and after it\n */ const sortModifiers = (modifiers)=>{\n    if (modifiers.length <= 1) {\n        return modifiers;\n    }\n    const sortedModifiers = [];\n    let unsortedModifiers = [];\n    modifiers.forEach((modifier)=>{\n        const isArbitraryVariant = modifier[0] === \"[\";\n        if (isArbitraryVariant) {\n            sortedModifiers.push(...unsortedModifiers.sort(), modifier);\n            unsortedModifiers = [];\n        } else {\n            unsortedModifiers.push(modifier);\n        }\n    });\n    sortedModifiers.push(...unsortedModifiers.sort());\n    return sortedModifiers;\n};\nconst createConfigUtils = (config)=>({\n        cache: createLruCache(config.cacheSize),\n        parseClassName: createParseClassName(config),\n        ...createClassGroupUtils(config)\n    });\nconst SPLIT_CLASSES_REGEX = /\\s+/;\nconst mergeClassList = (classList, configUtils)=>{\n    const { parseClassName, getClassGroupId, getConflictingClassGroupIds } = configUtils;\n    /**\n   * Set of classGroupIds in following format:\n   * `{importantModifier}{variantModifiers}{classGroupId}`\n   * @example 'float'\n   * @example 'hover:focus:bg-color'\n   * @example 'md:!pr'\n   */ const classGroupsInConflict = [];\n    const classNames = classList.trim().split(SPLIT_CLASSES_REGEX);\n    let result = \"\";\n    for(let index = classNames.length - 1; index >= 0; index -= 1){\n        const originalClassName = classNames[index];\n        const { modifiers, hasImportantModifier, baseClassName, maybePostfixModifierPosition } = parseClassName(originalClassName);\n        let hasPostfixModifier = Boolean(maybePostfixModifierPosition);\n        let classGroupId = getClassGroupId(hasPostfixModifier ? baseClassName.substring(0, maybePostfixModifierPosition) : baseClassName);\n        if (!classGroupId) {\n            if (!hasPostfixModifier) {\n                // Not a Tailwind class\n                result = originalClassName + (result.length > 0 ? \" \" + result : result);\n                continue;\n            }\n            classGroupId = getClassGroupId(baseClassName);\n            if (!classGroupId) {\n                // Not a Tailwind class\n                result = originalClassName + (result.length > 0 ? \" \" + result : result);\n                continue;\n            }\n            hasPostfixModifier = false;\n        }\n        const variantModifier = sortModifiers(modifiers).join(\":\");\n        const modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER : variantModifier;\n        const classId = modifierId + classGroupId;\n        if (classGroupsInConflict.includes(classId)) {\n            continue;\n        }\n        classGroupsInConflict.push(classId);\n        const conflictGroups = getConflictingClassGroupIds(classGroupId, hasPostfixModifier);\n        for(let i = 0; i < conflictGroups.length; ++i){\n            const group = conflictGroups[i];\n            classGroupsInConflict.push(modifierId + group);\n        }\n        // Tailwind class not in conflict\n        result = originalClassName + (result.length > 0 ? \" \" + result : result);\n    }\n    return result;\n};\n/**\n * The code in this file is copied from https://github.com/lukeed/clsx and modified to suit the needs of tailwind-merge better.\n *\n * Specifically:\n * - Runtime code from https://github.com/lukeed/clsx/blob/v1.2.1/src/index.js\n * - TypeScript types from https://github.com/lukeed/clsx/blob/v1.2.1/clsx.d.ts\n *\n * Original code has MIT license: Copyright (c) Luke Edwards <luke.edwards05@gmail.com> (lukeed.com)\n */ function twJoin() {\n    let index = 0;\n    let argument;\n    let resolvedValue;\n    let string = \"\";\n    while(index < arguments.length){\n        if (argument = arguments[index++]) {\n            if (resolvedValue = toValue(argument)) {\n                string && (string += \" \");\n                string += resolvedValue;\n            }\n        }\n    }\n    return string;\n}\nconst toValue = (mix)=>{\n    if (typeof mix === \"string\") {\n        return mix;\n    }\n    let resolvedValue;\n    let string = \"\";\n    for(let k = 0; k < mix.length; k++){\n        if (mix[k]) {\n            if (resolvedValue = toValue(mix[k])) {\n                string && (string += \" \");\n                string += resolvedValue;\n            }\n        }\n    }\n    return string;\n};\nfunction createTailwindMerge(createConfigFirst) {\n    for(var _len = arguments.length, createConfigRest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        createConfigRest[_key - 1] = arguments[_key];\n    }\n    let configUtils;\n    let cacheGet;\n    let cacheSet;\n    let functionToCall = initTailwindMerge;\n    function initTailwindMerge(classList) {\n        const config = createConfigRest.reduce((previousConfig, createConfigCurrent)=>createConfigCurrent(previousConfig), createConfigFirst());\n        configUtils = createConfigUtils(config);\n        cacheGet = configUtils.cache.get;\n        cacheSet = configUtils.cache.set;\n        functionToCall = tailwindMerge;\n        return tailwindMerge(classList);\n    }\n    function tailwindMerge(classList) {\n        const cachedResult = cacheGet(classList);\n        if (cachedResult) {\n            return cachedResult;\n        }\n        const result = mergeClassList(classList, configUtils);\n        cacheSet(classList, result);\n        return result;\n    }\n    return function callTailwindMerge() {\n        return functionToCall(twJoin.apply(null, arguments));\n    };\n}\nconst fromTheme = (key)=>{\n    const themeGetter = (theme)=>theme[key] || [];\n    themeGetter.isThemeGetter = true;\n    return themeGetter;\n};\nconst arbitraryValueRegex = /^\\[(?:([a-z-]+):)?(.+)\\]$/i;\nconst fractionRegex = /^\\d+\\/\\d+$/;\nconst stringLengths = /*#__PURE__*/ new Set([\n    \"px\",\n    \"full\",\n    \"screen\"\n]);\nconst tshirtUnitRegex = /^(\\d+(\\.\\d+)?)?(xs|sm|md|lg|xl)$/;\nconst lengthUnitRegex = /\\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\\b(calc|min|max|clamp)\\(.+\\)|^0$/;\nconst colorFunctionRegex = /^(rgba?|hsla?|hwb|(ok)?(lab|lch))\\(.+\\)$/;\n// Shadow always begins with x and y offset separated by underscore optionally prepended by inset\nconst shadowRegex = /^(inset_)?-?((\\d+)?\\.?(\\d+)[a-z]+|0)_-?((\\d+)?\\.?(\\d+)[a-z]+|0)/;\nconst imageRegex = /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\\(.+\\)$/;\nconst isLength = (value)=>isNumber(value) || stringLengths.has(value) || fractionRegex.test(value);\nconst isArbitraryLength = (value)=>getIsArbitraryValue(value, \"length\", isLengthOnly);\nconst isNumber = (value)=>Boolean(value) && !Number.isNaN(Number(value));\nconst isArbitraryNumber = (value)=>getIsArbitraryValue(value, \"number\", isNumber);\nconst isInteger = (value)=>Boolean(value) && Number.isInteger(Number(value));\nconst isPercent = (value)=>value.endsWith(\"%\") && isNumber(value.slice(0, -1));\nconst isArbitraryValue = (value)=>arbitraryValueRegex.test(value);\nconst isTshirtSize = (value)=>tshirtUnitRegex.test(value);\nconst sizeLabels = /*#__PURE__*/ new Set([\n    \"length\",\n    \"size\",\n    \"percentage\"\n]);\nconst isArbitrarySize = (value)=>getIsArbitraryValue(value, sizeLabels, isNever);\nconst isArbitraryPosition = (value)=>getIsArbitraryValue(value, \"position\", isNever);\nconst imageLabels = /*#__PURE__*/ new Set([\n    \"image\",\n    \"url\"\n]);\nconst isArbitraryImage = (value)=>getIsArbitraryValue(value, imageLabels, isImage);\nconst isArbitraryShadow = (value)=>getIsArbitraryValue(value, \"\", isShadow);\nconst isAny = ()=>true;\nconst getIsArbitraryValue = (value, label, testValue)=>{\n    const result = arbitraryValueRegex.exec(value);\n    if (result) {\n        if (result[1]) {\n            return typeof label === \"string\" ? result[1] === label : label.has(result[1]);\n        }\n        return testValue(result[2]);\n    }\n    return false;\n};\nconst isLengthOnly = (value)=>// `colorFunctionRegex` check is necessary because color functions can have percentages in them which which would be incorrectly classified as lengths.\n    // For example, `hsl(0 0% 0%)` would be classified as a length without this check.\n    // I could also use lookbehind assertion in `lengthUnitRegex` but that isn't supported widely enough.\n    lengthUnitRegex.test(value) && !colorFunctionRegex.test(value);\nconst isNever = ()=>false;\nconst isShadow = (value)=>shadowRegex.test(value);\nconst isImage = (value)=>imageRegex.test(value);\nconst validators = /*#__PURE__*/ Object.defineProperty({\n    __proto__: null,\n    isAny,\n    isArbitraryImage,\n    isArbitraryLength,\n    isArbitraryNumber,\n    isArbitraryPosition,\n    isArbitraryShadow,\n    isArbitrarySize,\n    isArbitraryValue,\n    isInteger,\n    isLength,\n    isNumber,\n    isPercent,\n    isTshirtSize\n}, Symbol.toStringTag, {\n    value: \"Module\"\n});\nconst getDefaultConfig = ()=>{\n    const colors = fromTheme(\"colors\");\n    const spacing = fromTheme(\"spacing\");\n    const blur = fromTheme(\"blur\");\n    const brightness = fromTheme(\"brightness\");\n    const borderColor = fromTheme(\"borderColor\");\n    const borderRadius = fromTheme(\"borderRadius\");\n    const borderSpacing = fromTheme(\"borderSpacing\");\n    const borderWidth = fromTheme(\"borderWidth\");\n    const contrast = fromTheme(\"contrast\");\n    const grayscale = fromTheme(\"grayscale\");\n    const hueRotate = fromTheme(\"hueRotate\");\n    const invert = fromTheme(\"invert\");\n    const gap = fromTheme(\"gap\");\n    const gradientColorStops = fromTheme(\"gradientColorStops\");\n    const gradientColorStopPositions = fromTheme(\"gradientColorStopPositions\");\n    const inset = fromTheme(\"inset\");\n    const margin = fromTheme(\"margin\");\n    const opacity = fromTheme(\"opacity\");\n    const padding = fromTheme(\"padding\");\n    const saturate = fromTheme(\"saturate\");\n    const scale = fromTheme(\"scale\");\n    const sepia = fromTheme(\"sepia\");\n    const skew = fromTheme(\"skew\");\n    const space = fromTheme(\"space\");\n    const translate = fromTheme(\"translate\");\n    const getOverscroll = ()=>[\n            \"auto\",\n            \"contain\",\n            \"none\"\n        ];\n    const getOverflow = ()=>[\n            \"auto\",\n            \"hidden\",\n            \"clip\",\n            \"visible\",\n            \"scroll\"\n        ];\n    const getSpacingWithAutoAndArbitrary = ()=>[\n            \"auto\",\n            isArbitraryValue,\n            spacing\n        ];\n    const getSpacingWithArbitrary = ()=>[\n            isArbitraryValue,\n            spacing\n        ];\n    const getLengthWithEmptyAndArbitrary = ()=>[\n            \"\",\n            isLength,\n            isArbitraryLength\n        ];\n    const getNumberWithAutoAndArbitrary = ()=>[\n            \"auto\",\n            isNumber,\n            isArbitraryValue\n        ];\n    const getPositions = ()=>[\n            \"bottom\",\n            \"center\",\n            \"left\",\n            \"left-bottom\",\n            \"left-top\",\n            \"right\",\n            \"right-bottom\",\n            \"right-top\",\n            \"top\"\n        ];\n    const getLineStyles = ()=>[\n            \"solid\",\n            \"dashed\",\n            \"dotted\",\n            \"double\",\n            \"none\"\n        ];\n    const getBlendModes = ()=>[\n            \"normal\",\n            \"multiply\",\n            \"screen\",\n            \"overlay\",\n            \"darken\",\n            \"lighten\",\n            \"color-dodge\",\n            \"color-burn\",\n            \"hard-light\",\n            \"soft-light\",\n            \"difference\",\n            \"exclusion\",\n            \"hue\",\n            \"saturation\",\n            \"color\",\n            \"luminosity\"\n        ];\n    const getAlign = ()=>[\n            \"start\",\n            \"end\",\n            \"center\",\n            \"between\",\n            \"around\",\n            \"evenly\",\n            \"stretch\"\n        ];\n    const getZeroAndEmpty = ()=>[\n            \"\",\n            \"0\",\n            isArbitraryValue\n        ];\n    const getBreaks = ()=>[\n            \"auto\",\n            \"avoid\",\n            \"all\",\n            \"avoid-page\",\n            \"page\",\n            \"left\",\n            \"right\",\n            \"column\"\n        ];\n    const getNumberAndArbitrary = ()=>[\n            isNumber,\n            isArbitraryValue\n        ];\n    return {\n        cacheSize: 500,\n        separator: \":\",\n        theme: {\n            colors: [\n                isAny\n            ],\n            spacing: [\n                isLength,\n                isArbitraryLength\n            ],\n            blur: [\n                \"none\",\n                \"\",\n                isTshirtSize,\n                isArbitraryValue\n            ],\n            brightness: getNumberAndArbitrary(),\n            borderColor: [\n                colors\n            ],\n            borderRadius: [\n                \"none\",\n                \"\",\n                \"full\",\n                isTshirtSize,\n                isArbitraryValue\n            ],\n            borderSpacing: getSpacingWithArbitrary(),\n            borderWidth: getLengthWithEmptyAndArbitrary(),\n            contrast: getNumberAndArbitrary(),\n            grayscale: getZeroAndEmpty(),\n            hueRotate: getNumberAndArbitrary(),\n            invert: getZeroAndEmpty(),\n            gap: getSpacingWithArbitrary(),\n            gradientColorStops: [\n                colors\n            ],\n            gradientColorStopPositions: [\n                isPercent,\n                isArbitraryLength\n            ],\n            inset: getSpacingWithAutoAndArbitrary(),\n            margin: getSpacingWithAutoAndArbitrary(),\n            opacity: getNumberAndArbitrary(),\n            padding: getSpacingWithArbitrary(),\n            saturate: getNumberAndArbitrary(),\n            scale: getNumberAndArbitrary(),\n            sepia: getZeroAndEmpty(),\n            skew: getNumberAndArbitrary(),\n            space: getSpacingWithArbitrary(),\n            translate: getSpacingWithArbitrary()\n        },\n        classGroups: {\n            // Layout\n            /**\n       * Aspect Ratio\n       * @see https://tailwindcss.com/docs/aspect-ratio\n       */ aspect: [\n                {\n                    aspect: [\n                        \"auto\",\n                        \"square\",\n                        \"video\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Container\n       * @see https://tailwindcss.com/docs/container\n       */ container: [\n                \"container\"\n            ],\n            /**\n       * Columns\n       * @see https://tailwindcss.com/docs/columns\n       */ columns: [\n                {\n                    columns: [\n                        isTshirtSize\n                    ]\n                }\n            ],\n            /**\n       * Break After\n       * @see https://tailwindcss.com/docs/break-after\n       */ \"break-after\": [\n                {\n                    \"break-after\": getBreaks()\n                }\n            ],\n            /**\n       * Break Before\n       * @see https://tailwindcss.com/docs/break-before\n       */ \"break-before\": [\n                {\n                    \"break-before\": getBreaks()\n                }\n            ],\n            /**\n       * Break Inside\n       * @see https://tailwindcss.com/docs/break-inside\n       */ \"break-inside\": [\n                {\n                    \"break-inside\": [\n                        \"auto\",\n                        \"avoid\",\n                        \"avoid-page\",\n                        \"avoid-column\"\n                    ]\n                }\n            ],\n            /**\n       * Box Decoration Break\n       * @see https://tailwindcss.com/docs/box-decoration-break\n       */ \"box-decoration\": [\n                {\n                    \"box-decoration\": [\n                        \"slice\",\n                        \"clone\"\n                    ]\n                }\n            ],\n            /**\n       * Box Sizing\n       * @see https://tailwindcss.com/docs/box-sizing\n       */ box: [\n                {\n                    box: [\n                        \"border\",\n                        \"content\"\n                    ]\n                }\n            ],\n            /**\n       * Display\n       * @see https://tailwindcss.com/docs/display\n       */ display: [\n                \"block\",\n                \"inline-block\",\n                \"inline\",\n                \"flex\",\n                \"inline-flex\",\n                \"table\",\n                \"inline-table\",\n                \"table-caption\",\n                \"table-cell\",\n                \"table-column\",\n                \"table-column-group\",\n                \"table-footer-group\",\n                \"table-header-group\",\n                \"table-row-group\",\n                \"table-row\",\n                \"flow-root\",\n                \"grid\",\n                \"inline-grid\",\n                \"contents\",\n                \"list-item\",\n                \"hidden\"\n            ],\n            /**\n       * Floats\n       * @see https://tailwindcss.com/docs/float\n       */ float: [\n                {\n                    float: [\n                        \"right\",\n                        \"left\",\n                        \"none\",\n                        \"start\",\n                        \"end\"\n                    ]\n                }\n            ],\n            /**\n       * Clear\n       * @see https://tailwindcss.com/docs/clear\n       */ clear: [\n                {\n                    clear: [\n                        \"left\",\n                        \"right\",\n                        \"both\",\n                        \"none\",\n                        \"start\",\n                        \"end\"\n                    ]\n                }\n            ],\n            /**\n       * Isolation\n       * @see https://tailwindcss.com/docs/isolation\n       */ isolation: [\n                \"isolate\",\n                \"isolation-auto\"\n            ],\n            /**\n       * Object Fit\n       * @see https://tailwindcss.com/docs/object-fit\n       */ \"object-fit\": [\n                {\n                    object: [\n                        \"contain\",\n                        \"cover\",\n                        \"fill\",\n                        \"none\",\n                        \"scale-down\"\n                    ]\n                }\n            ],\n            /**\n       * Object Position\n       * @see https://tailwindcss.com/docs/object-position\n       */ \"object-position\": [\n                {\n                    object: [\n                        ...getPositions(),\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Overflow\n       * @see https://tailwindcss.com/docs/overflow\n       */ overflow: [\n                {\n                    overflow: getOverflow()\n                }\n            ],\n            /**\n       * Overflow X\n       * @see https://tailwindcss.com/docs/overflow\n       */ \"overflow-x\": [\n                {\n                    \"overflow-x\": getOverflow()\n                }\n            ],\n            /**\n       * Overflow Y\n       * @see https://tailwindcss.com/docs/overflow\n       */ \"overflow-y\": [\n                {\n                    \"overflow-y\": getOverflow()\n                }\n            ],\n            /**\n       * Overscroll Behavior\n       * @see https://tailwindcss.com/docs/overscroll-behavior\n       */ overscroll: [\n                {\n                    overscroll: getOverscroll()\n                }\n            ],\n            /**\n       * Overscroll Behavior X\n       * @see https://tailwindcss.com/docs/overscroll-behavior\n       */ \"overscroll-x\": [\n                {\n                    \"overscroll-x\": getOverscroll()\n                }\n            ],\n            /**\n       * Overscroll Behavior Y\n       * @see https://tailwindcss.com/docs/overscroll-behavior\n       */ \"overscroll-y\": [\n                {\n                    \"overscroll-y\": getOverscroll()\n                }\n            ],\n            /**\n       * Position\n       * @see https://tailwindcss.com/docs/position\n       */ position: [\n                \"static\",\n                \"fixed\",\n                \"absolute\",\n                \"relative\",\n                \"sticky\"\n            ],\n            /**\n       * Top / Right / Bottom / Left\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */ inset: [\n                {\n                    inset: [\n                        inset\n                    ]\n                }\n            ],\n            /**\n       * Right / Left\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */ \"inset-x\": [\n                {\n                    \"inset-x\": [\n                        inset\n                    ]\n                }\n            ],\n            /**\n       * Top / Bottom\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */ \"inset-y\": [\n                {\n                    \"inset-y\": [\n                        inset\n                    ]\n                }\n            ],\n            /**\n       * Start\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */ start: [\n                {\n                    start: [\n                        inset\n                    ]\n                }\n            ],\n            /**\n       * End\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */ end: [\n                {\n                    end: [\n                        inset\n                    ]\n                }\n            ],\n            /**\n       * Top\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */ top: [\n                {\n                    top: [\n                        inset\n                    ]\n                }\n            ],\n            /**\n       * Right\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */ right: [\n                {\n                    right: [\n                        inset\n                    ]\n                }\n            ],\n            /**\n       * Bottom\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */ bottom: [\n                {\n                    bottom: [\n                        inset\n                    ]\n                }\n            ],\n            /**\n       * Left\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */ left: [\n                {\n                    left: [\n                        inset\n                    ]\n                }\n            ],\n            /**\n       * Visibility\n       * @see https://tailwindcss.com/docs/visibility\n       */ visibility: [\n                \"visible\",\n                \"invisible\",\n                \"collapse\"\n            ],\n            /**\n       * Z-Index\n       * @see https://tailwindcss.com/docs/z-index\n       */ z: [\n                {\n                    z: [\n                        \"auto\",\n                        isInteger,\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            // Flexbox and Grid\n            /**\n       * Flex Basis\n       * @see https://tailwindcss.com/docs/flex-basis\n       */ basis: [\n                {\n                    basis: getSpacingWithAutoAndArbitrary()\n                }\n            ],\n            /**\n       * Flex Direction\n       * @see https://tailwindcss.com/docs/flex-direction\n       */ \"flex-direction\": [\n                {\n                    flex: [\n                        \"row\",\n                        \"row-reverse\",\n                        \"col\",\n                        \"col-reverse\"\n                    ]\n                }\n            ],\n            /**\n       * Flex Wrap\n       * @see https://tailwindcss.com/docs/flex-wrap\n       */ \"flex-wrap\": [\n                {\n                    flex: [\n                        \"wrap\",\n                        \"wrap-reverse\",\n                        \"nowrap\"\n                    ]\n                }\n            ],\n            /**\n       * Flex\n       * @see https://tailwindcss.com/docs/flex\n       */ flex: [\n                {\n                    flex: [\n                        \"1\",\n                        \"auto\",\n                        \"initial\",\n                        \"none\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Flex Grow\n       * @see https://tailwindcss.com/docs/flex-grow\n       */ grow: [\n                {\n                    grow: getZeroAndEmpty()\n                }\n            ],\n            /**\n       * Flex Shrink\n       * @see https://tailwindcss.com/docs/flex-shrink\n       */ shrink: [\n                {\n                    shrink: getZeroAndEmpty()\n                }\n            ],\n            /**\n       * Order\n       * @see https://tailwindcss.com/docs/order\n       */ order: [\n                {\n                    order: [\n                        \"first\",\n                        \"last\",\n                        \"none\",\n                        isInteger,\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Grid Template Columns\n       * @see https://tailwindcss.com/docs/grid-template-columns\n       */ \"grid-cols\": [\n                {\n                    \"grid-cols\": [\n                        isAny\n                    ]\n                }\n            ],\n            /**\n       * Grid Column Start / End\n       * @see https://tailwindcss.com/docs/grid-column\n       */ \"col-start-end\": [\n                {\n                    col: [\n                        \"auto\",\n                        {\n                            span: [\n                                \"full\",\n                                isInteger,\n                                isArbitraryValue\n                            ]\n                        },\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Grid Column Start\n       * @see https://tailwindcss.com/docs/grid-column\n       */ \"col-start\": [\n                {\n                    \"col-start\": getNumberWithAutoAndArbitrary()\n                }\n            ],\n            /**\n       * Grid Column End\n       * @see https://tailwindcss.com/docs/grid-column\n       */ \"col-end\": [\n                {\n                    \"col-end\": getNumberWithAutoAndArbitrary()\n                }\n            ],\n            /**\n       * Grid Template Rows\n       * @see https://tailwindcss.com/docs/grid-template-rows\n       */ \"grid-rows\": [\n                {\n                    \"grid-rows\": [\n                        isAny\n                    ]\n                }\n            ],\n            /**\n       * Grid Row Start / End\n       * @see https://tailwindcss.com/docs/grid-row\n       */ \"row-start-end\": [\n                {\n                    row: [\n                        \"auto\",\n                        {\n                            span: [\n                                isInteger,\n                                isArbitraryValue\n                            ]\n                        },\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Grid Row Start\n       * @see https://tailwindcss.com/docs/grid-row\n       */ \"row-start\": [\n                {\n                    \"row-start\": getNumberWithAutoAndArbitrary()\n                }\n            ],\n            /**\n       * Grid Row End\n       * @see https://tailwindcss.com/docs/grid-row\n       */ \"row-end\": [\n                {\n                    \"row-end\": getNumberWithAutoAndArbitrary()\n                }\n            ],\n            /**\n       * Grid Auto Flow\n       * @see https://tailwindcss.com/docs/grid-auto-flow\n       */ \"grid-flow\": [\n                {\n                    \"grid-flow\": [\n                        \"row\",\n                        \"col\",\n                        \"dense\",\n                        \"row-dense\",\n                        \"col-dense\"\n                    ]\n                }\n            ],\n            /**\n       * Grid Auto Columns\n       * @see https://tailwindcss.com/docs/grid-auto-columns\n       */ \"auto-cols\": [\n                {\n                    \"auto-cols\": [\n                        \"auto\",\n                        \"min\",\n                        \"max\",\n                        \"fr\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Grid Auto Rows\n       * @see https://tailwindcss.com/docs/grid-auto-rows\n       */ \"auto-rows\": [\n                {\n                    \"auto-rows\": [\n                        \"auto\",\n                        \"min\",\n                        \"max\",\n                        \"fr\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Gap\n       * @see https://tailwindcss.com/docs/gap\n       */ gap: [\n                {\n                    gap: [\n                        gap\n                    ]\n                }\n            ],\n            /**\n       * Gap X\n       * @see https://tailwindcss.com/docs/gap\n       */ \"gap-x\": [\n                {\n                    \"gap-x\": [\n                        gap\n                    ]\n                }\n            ],\n            /**\n       * Gap Y\n       * @see https://tailwindcss.com/docs/gap\n       */ \"gap-y\": [\n                {\n                    \"gap-y\": [\n                        gap\n                    ]\n                }\n            ],\n            /**\n       * Justify Content\n       * @see https://tailwindcss.com/docs/justify-content\n       */ \"justify-content\": [\n                {\n                    justify: [\n                        \"normal\",\n                        ...getAlign()\n                    ]\n                }\n            ],\n            /**\n       * Justify Items\n       * @see https://tailwindcss.com/docs/justify-items\n       */ \"justify-items\": [\n                {\n                    \"justify-items\": [\n                        \"start\",\n                        \"end\",\n                        \"center\",\n                        \"stretch\"\n                    ]\n                }\n            ],\n            /**\n       * Justify Self\n       * @see https://tailwindcss.com/docs/justify-self\n       */ \"justify-self\": [\n                {\n                    \"justify-self\": [\n                        \"auto\",\n                        \"start\",\n                        \"end\",\n                        \"center\",\n                        \"stretch\"\n                    ]\n                }\n            ],\n            /**\n       * Align Content\n       * @see https://tailwindcss.com/docs/align-content\n       */ \"align-content\": [\n                {\n                    content: [\n                        \"normal\",\n                        ...getAlign(),\n                        \"baseline\"\n                    ]\n                }\n            ],\n            /**\n       * Align Items\n       * @see https://tailwindcss.com/docs/align-items\n       */ \"align-items\": [\n                {\n                    items: [\n                        \"start\",\n                        \"end\",\n                        \"center\",\n                        \"baseline\",\n                        \"stretch\"\n                    ]\n                }\n            ],\n            /**\n       * Align Self\n       * @see https://tailwindcss.com/docs/align-self\n       */ \"align-self\": [\n                {\n                    self: [\n                        \"auto\",\n                        \"start\",\n                        \"end\",\n                        \"center\",\n                        \"stretch\",\n                        \"baseline\"\n                    ]\n                }\n            ],\n            /**\n       * Place Content\n       * @see https://tailwindcss.com/docs/place-content\n       */ \"place-content\": [\n                {\n                    \"place-content\": [\n                        ...getAlign(),\n                        \"baseline\"\n                    ]\n                }\n            ],\n            /**\n       * Place Items\n       * @see https://tailwindcss.com/docs/place-items\n       */ \"place-items\": [\n                {\n                    \"place-items\": [\n                        \"start\",\n                        \"end\",\n                        \"center\",\n                        \"baseline\",\n                        \"stretch\"\n                    ]\n                }\n            ],\n            /**\n       * Place Self\n       * @see https://tailwindcss.com/docs/place-self\n       */ \"place-self\": [\n                {\n                    \"place-self\": [\n                        \"auto\",\n                        \"start\",\n                        \"end\",\n                        \"center\",\n                        \"stretch\"\n                    ]\n                }\n            ],\n            // Spacing\n            /**\n       * Padding\n       * @see https://tailwindcss.com/docs/padding\n       */ p: [\n                {\n                    p: [\n                        padding\n                    ]\n                }\n            ],\n            /**\n       * Padding X\n       * @see https://tailwindcss.com/docs/padding\n       */ px: [\n                {\n                    px: [\n                        padding\n                    ]\n                }\n            ],\n            /**\n       * Padding Y\n       * @see https://tailwindcss.com/docs/padding\n       */ py: [\n                {\n                    py: [\n                        padding\n                    ]\n                }\n            ],\n            /**\n       * Padding Start\n       * @see https://tailwindcss.com/docs/padding\n       */ ps: [\n                {\n                    ps: [\n                        padding\n                    ]\n                }\n            ],\n            /**\n       * Padding End\n       * @see https://tailwindcss.com/docs/padding\n       */ pe: [\n                {\n                    pe: [\n                        padding\n                    ]\n                }\n            ],\n            /**\n       * Padding Top\n       * @see https://tailwindcss.com/docs/padding\n       */ pt: [\n                {\n                    pt: [\n                        padding\n                    ]\n                }\n            ],\n            /**\n       * Padding Right\n       * @see https://tailwindcss.com/docs/padding\n       */ pr: [\n                {\n                    pr: [\n                        padding\n                    ]\n                }\n            ],\n            /**\n       * Padding Bottom\n       * @see https://tailwindcss.com/docs/padding\n       */ pb: [\n                {\n                    pb: [\n                        padding\n                    ]\n                }\n            ],\n            /**\n       * Padding Left\n       * @see https://tailwindcss.com/docs/padding\n       */ pl: [\n                {\n                    pl: [\n                        padding\n                    ]\n                }\n            ],\n            /**\n       * Margin\n       * @see https://tailwindcss.com/docs/margin\n       */ m: [\n                {\n                    m: [\n                        margin\n                    ]\n                }\n            ],\n            /**\n       * Margin X\n       * @see https://tailwindcss.com/docs/margin\n       */ mx: [\n                {\n                    mx: [\n                        margin\n                    ]\n                }\n            ],\n            /**\n       * Margin Y\n       * @see https://tailwindcss.com/docs/margin\n       */ my: [\n                {\n                    my: [\n                        margin\n                    ]\n                }\n            ],\n            /**\n       * Margin Start\n       * @see https://tailwindcss.com/docs/margin\n       */ ms: [\n                {\n                    ms: [\n                        margin\n                    ]\n                }\n            ],\n            /**\n       * Margin End\n       * @see https://tailwindcss.com/docs/margin\n       */ me: [\n                {\n                    me: [\n                        margin\n                    ]\n                }\n            ],\n            /**\n       * Margin Top\n       * @see https://tailwindcss.com/docs/margin\n       */ mt: [\n                {\n                    mt: [\n                        margin\n                    ]\n                }\n            ],\n            /**\n       * Margin Right\n       * @see https://tailwindcss.com/docs/margin\n       */ mr: [\n                {\n                    mr: [\n                        margin\n                    ]\n                }\n            ],\n            /**\n       * Margin Bottom\n       * @see https://tailwindcss.com/docs/margin\n       */ mb: [\n                {\n                    mb: [\n                        margin\n                    ]\n                }\n            ],\n            /**\n       * Margin Left\n       * @see https://tailwindcss.com/docs/margin\n       */ ml: [\n                {\n                    ml: [\n                        margin\n                    ]\n                }\n            ],\n            /**\n       * Space Between X\n       * @see https://tailwindcss.com/docs/space\n       */ \"space-x\": [\n                {\n                    \"space-x\": [\n                        space\n                    ]\n                }\n            ],\n            /**\n       * Space Between X Reverse\n       * @see https://tailwindcss.com/docs/space\n       */ \"space-x-reverse\": [\n                \"space-x-reverse\"\n            ],\n            /**\n       * Space Between Y\n       * @see https://tailwindcss.com/docs/space\n       */ \"space-y\": [\n                {\n                    \"space-y\": [\n                        space\n                    ]\n                }\n            ],\n            /**\n       * Space Between Y Reverse\n       * @see https://tailwindcss.com/docs/space\n       */ \"space-y-reverse\": [\n                \"space-y-reverse\"\n            ],\n            // Sizing\n            /**\n       * Width\n       * @see https://tailwindcss.com/docs/width\n       */ w: [\n                {\n                    w: [\n                        \"auto\",\n                        \"min\",\n                        \"max\",\n                        \"fit\",\n                        \"svw\",\n                        \"lvw\",\n                        \"dvw\",\n                        isArbitraryValue,\n                        spacing\n                    ]\n                }\n            ],\n            /**\n       * Min-Width\n       * @see https://tailwindcss.com/docs/min-width\n       */ \"min-w\": [\n                {\n                    \"min-w\": [\n                        isArbitraryValue,\n                        spacing,\n                        \"min\",\n                        \"max\",\n                        \"fit\"\n                    ]\n                }\n            ],\n            /**\n       * Max-Width\n       * @see https://tailwindcss.com/docs/max-width\n       */ \"max-w\": [\n                {\n                    \"max-w\": [\n                        isArbitraryValue,\n                        spacing,\n                        \"none\",\n                        \"full\",\n                        \"min\",\n                        \"max\",\n                        \"fit\",\n                        \"prose\",\n                        {\n                            screen: [\n                                isTshirtSize\n                            ]\n                        },\n                        isTshirtSize\n                    ]\n                }\n            ],\n            /**\n       * Height\n       * @see https://tailwindcss.com/docs/height\n       */ h: [\n                {\n                    h: [\n                        isArbitraryValue,\n                        spacing,\n                        \"auto\",\n                        \"min\",\n                        \"max\",\n                        \"fit\",\n                        \"svh\",\n                        \"lvh\",\n                        \"dvh\"\n                    ]\n                }\n            ],\n            /**\n       * Min-Height\n       * @see https://tailwindcss.com/docs/min-height\n       */ \"min-h\": [\n                {\n                    \"min-h\": [\n                        isArbitraryValue,\n                        spacing,\n                        \"min\",\n                        \"max\",\n                        \"fit\",\n                        \"svh\",\n                        \"lvh\",\n                        \"dvh\"\n                    ]\n                }\n            ],\n            /**\n       * Max-Height\n       * @see https://tailwindcss.com/docs/max-height\n       */ \"max-h\": [\n                {\n                    \"max-h\": [\n                        isArbitraryValue,\n                        spacing,\n                        \"min\",\n                        \"max\",\n                        \"fit\",\n                        \"svh\",\n                        \"lvh\",\n                        \"dvh\"\n                    ]\n                }\n            ],\n            /**\n       * Size\n       * @see https://tailwindcss.com/docs/size\n       */ size: [\n                {\n                    size: [\n                        isArbitraryValue,\n                        spacing,\n                        \"auto\",\n                        \"min\",\n                        \"max\",\n                        \"fit\"\n                    ]\n                }\n            ],\n            // Typography\n            /**\n       * Font Size\n       * @see https://tailwindcss.com/docs/font-size\n       */ \"font-size\": [\n                {\n                    text: [\n                        \"base\",\n                        isTshirtSize,\n                        isArbitraryLength\n                    ]\n                }\n            ],\n            /**\n       * Font Smoothing\n       * @see https://tailwindcss.com/docs/font-smoothing\n       */ \"font-smoothing\": [\n                \"antialiased\",\n                \"subpixel-antialiased\"\n            ],\n            /**\n       * Font Style\n       * @see https://tailwindcss.com/docs/font-style\n       */ \"font-style\": [\n                \"italic\",\n                \"not-italic\"\n            ],\n            /**\n       * Font Weight\n       * @see https://tailwindcss.com/docs/font-weight\n       */ \"font-weight\": [\n                {\n                    font: [\n                        \"thin\",\n                        \"extralight\",\n                        \"light\",\n                        \"normal\",\n                        \"medium\",\n                        \"semibold\",\n                        \"bold\",\n                        \"extrabold\",\n                        \"black\",\n                        isArbitraryNumber\n                    ]\n                }\n            ],\n            /**\n       * Font Family\n       * @see https://tailwindcss.com/docs/font-family\n       */ \"font-family\": [\n                {\n                    font: [\n                        isAny\n                    ]\n                }\n            ],\n            /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */ \"fvn-normal\": [\n                \"normal-nums\"\n            ],\n            /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */ \"fvn-ordinal\": [\n                \"ordinal\"\n            ],\n            /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */ \"fvn-slashed-zero\": [\n                \"slashed-zero\"\n            ],\n            /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */ \"fvn-figure\": [\n                \"lining-nums\",\n                \"oldstyle-nums\"\n            ],\n            /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */ \"fvn-spacing\": [\n                \"proportional-nums\",\n                \"tabular-nums\"\n            ],\n            /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */ \"fvn-fraction\": [\n                \"diagonal-fractions\",\n                \"stacked-fractions\"\n            ],\n            /**\n       * Letter Spacing\n       * @see https://tailwindcss.com/docs/letter-spacing\n       */ tracking: [\n                {\n                    tracking: [\n                        \"tighter\",\n                        \"tight\",\n                        \"normal\",\n                        \"wide\",\n                        \"wider\",\n                        \"widest\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Line Clamp\n       * @see https://tailwindcss.com/docs/line-clamp\n       */ \"line-clamp\": [\n                {\n                    \"line-clamp\": [\n                        \"none\",\n                        isNumber,\n                        isArbitraryNumber\n                    ]\n                }\n            ],\n            /**\n       * Line Height\n       * @see https://tailwindcss.com/docs/line-height\n       */ leading: [\n                {\n                    leading: [\n                        \"none\",\n                        \"tight\",\n                        \"snug\",\n                        \"normal\",\n                        \"relaxed\",\n                        \"loose\",\n                        isLength,\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * List Style Image\n       * @see https://tailwindcss.com/docs/list-style-image\n       */ \"list-image\": [\n                {\n                    \"list-image\": [\n                        \"none\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * List Style Type\n       * @see https://tailwindcss.com/docs/list-style-type\n       */ \"list-style-type\": [\n                {\n                    list: [\n                        \"none\",\n                        \"disc\",\n                        \"decimal\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * List Style Position\n       * @see https://tailwindcss.com/docs/list-style-position\n       */ \"list-style-position\": [\n                {\n                    list: [\n                        \"inside\",\n                        \"outside\"\n                    ]\n                }\n            ],\n            /**\n       * Placeholder Color\n       * @deprecated since Tailwind CSS v3.0.0\n       * @see https://tailwindcss.com/docs/placeholder-color\n       */ \"placeholder-color\": [\n                {\n                    placeholder: [\n                        colors\n                    ]\n                }\n            ],\n            /**\n       * Placeholder Opacity\n       * @see https://tailwindcss.com/docs/placeholder-opacity\n       */ \"placeholder-opacity\": [\n                {\n                    \"placeholder-opacity\": [\n                        opacity\n                    ]\n                }\n            ],\n            /**\n       * Text Alignment\n       * @see https://tailwindcss.com/docs/text-align\n       */ \"text-alignment\": [\n                {\n                    text: [\n                        \"left\",\n                        \"center\",\n                        \"right\",\n                        \"justify\",\n                        \"start\",\n                        \"end\"\n                    ]\n                }\n            ],\n            /**\n       * Text Color\n       * @see https://tailwindcss.com/docs/text-color\n       */ \"text-color\": [\n                {\n                    text: [\n                        colors\n                    ]\n                }\n            ],\n            /**\n       * Text Opacity\n       * @see https://tailwindcss.com/docs/text-opacity\n       */ \"text-opacity\": [\n                {\n                    \"text-opacity\": [\n                        opacity\n                    ]\n                }\n            ],\n            /**\n       * Text Decoration\n       * @see https://tailwindcss.com/docs/text-decoration\n       */ \"text-decoration\": [\n                \"underline\",\n                \"overline\",\n                \"line-through\",\n                \"no-underline\"\n            ],\n            /**\n       * Text Decoration Style\n       * @see https://tailwindcss.com/docs/text-decoration-style\n       */ \"text-decoration-style\": [\n                {\n                    decoration: [\n                        ...getLineStyles(),\n                        \"wavy\"\n                    ]\n                }\n            ],\n            /**\n       * Text Decoration Thickness\n       * @see https://tailwindcss.com/docs/text-decoration-thickness\n       */ \"text-decoration-thickness\": [\n                {\n                    decoration: [\n                        \"auto\",\n                        \"from-font\",\n                        isLength,\n                        isArbitraryLength\n                    ]\n                }\n            ],\n            /**\n       * Text Underline Offset\n       * @see https://tailwindcss.com/docs/text-underline-offset\n       */ \"underline-offset\": [\n                {\n                    \"underline-offset\": [\n                        \"auto\",\n                        isLength,\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Text Decoration Color\n       * @see https://tailwindcss.com/docs/text-decoration-color\n       */ \"text-decoration-color\": [\n                {\n                    decoration: [\n                        colors\n                    ]\n                }\n            ],\n            /**\n       * Text Transform\n       * @see https://tailwindcss.com/docs/text-transform\n       */ \"text-transform\": [\n                \"uppercase\",\n                \"lowercase\",\n                \"capitalize\",\n                \"normal-case\"\n            ],\n            /**\n       * Text Overflow\n       * @see https://tailwindcss.com/docs/text-overflow\n       */ \"text-overflow\": [\n                \"truncate\",\n                \"text-ellipsis\",\n                \"text-clip\"\n            ],\n            /**\n       * Text Wrap\n       * @see https://tailwindcss.com/docs/text-wrap\n       */ \"text-wrap\": [\n                {\n                    text: [\n                        \"wrap\",\n                        \"nowrap\",\n                        \"balance\",\n                        \"pretty\"\n                    ]\n                }\n            ],\n            /**\n       * Text Indent\n       * @see https://tailwindcss.com/docs/text-indent\n       */ indent: [\n                {\n                    indent: getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Vertical Alignment\n       * @see https://tailwindcss.com/docs/vertical-align\n       */ \"vertical-align\": [\n                {\n                    align: [\n                        \"baseline\",\n                        \"top\",\n                        \"middle\",\n                        \"bottom\",\n                        \"text-top\",\n                        \"text-bottom\",\n                        \"sub\",\n                        \"super\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Whitespace\n       * @see https://tailwindcss.com/docs/whitespace\n       */ whitespace: [\n                {\n                    whitespace: [\n                        \"normal\",\n                        \"nowrap\",\n                        \"pre\",\n                        \"pre-line\",\n                        \"pre-wrap\",\n                        \"break-spaces\"\n                    ]\n                }\n            ],\n            /**\n       * Word Break\n       * @see https://tailwindcss.com/docs/word-break\n       */ break: [\n                {\n                    break: [\n                        \"normal\",\n                        \"words\",\n                        \"all\",\n                        \"keep\"\n                    ]\n                }\n            ],\n            /**\n       * Hyphens\n       * @see https://tailwindcss.com/docs/hyphens\n       */ hyphens: [\n                {\n                    hyphens: [\n                        \"none\",\n                        \"manual\",\n                        \"auto\"\n                    ]\n                }\n            ],\n            /**\n       * Content\n       * @see https://tailwindcss.com/docs/content\n       */ content: [\n                {\n                    content: [\n                        \"none\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            // Backgrounds\n            /**\n       * Background Attachment\n       * @see https://tailwindcss.com/docs/background-attachment\n       */ \"bg-attachment\": [\n                {\n                    bg: [\n                        \"fixed\",\n                        \"local\",\n                        \"scroll\"\n                    ]\n                }\n            ],\n            /**\n       * Background Clip\n       * @see https://tailwindcss.com/docs/background-clip\n       */ \"bg-clip\": [\n                {\n                    \"bg-clip\": [\n                        \"border\",\n                        \"padding\",\n                        \"content\",\n                        \"text\"\n                    ]\n                }\n            ],\n            /**\n       * Background Opacity\n       * @deprecated since Tailwind CSS v3.0.0\n       * @see https://tailwindcss.com/docs/background-opacity\n       */ \"bg-opacity\": [\n                {\n                    \"bg-opacity\": [\n                        opacity\n                    ]\n                }\n            ],\n            /**\n       * Background Origin\n       * @see https://tailwindcss.com/docs/background-origin\n       */ \"bg-origin\": [\n                {\n                    \"bg-origin\": [\n                        \"border\",\n                        \"padding\",\n                        \"content\"\n                    ]\n                }\n            ],\n            /**\n       * Background Position\n       * @see https://tailwindcss.com/docs/background-position\n       */ \"bg-position\": [\n                {\n                    bg: [\n                        ...getPositions(),\n                        isArbitraryPosition\n                    ]\n                }\n            ],\n            /**\n       * Background Repeat\n       * @see https://tailwindcss.com/docs/background-repeat\n       */ \"bg-repeat\": [\n                {\n                    bg: [\n                        \"no-repeat\",\n                        {\n                            repeat: [\n                                \"\",\n                                \"x\",\n                                \"y\",\n                                \"round\",\n                                \"space\"\n                            ]\n                        }\n                    ]\n                }\n            ],\n            /**\n       * Background Size\n       * @see https://tailwindcss.com/docs/background-size\n       */ \"bg-size\": [\n                {\n                    bg: [\n                        \"auto\",\n                        \"cover\",\n                        \"contain\",\n                        isArbitrarySize\n                    ]\n                }\n            ],\n            /**\n       * Background Image\n       * @see https://tailwindcss.com/docs/background-image\n       */ \"bg-image\": [\n                {\n                    bg: [\n                        \"none\",\n                        {\n                            \"gradient-to\": [\n                                \"t\",\n                                \"tr\",\n                                \"r\",\n                                \"br\",\n                                \"b\",\n                                \"bl\",\n                                \"l\",\n                                \"tl\"\n                            ]\n                        },\n                        isArbitraryImage\n                    ]\n                }\n            ],\n            /**\n       * Background Color\n       * @see https://tailwindcss.com/docs/background-color\n       */ \"bg-color\": [\n                {\n                    bg: [\n                        colors\n                    ]\n                }\n            ],\n            /**\n       * Gradient Color Stops From Position\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */ \"gradient-from-pos\": [\n                {\n                    from: [\n                        gradientColorStopPositions\n                    ]\n                }\n            ],\n            /**\n       * Gradient Color Stops Via Position\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */ \"gradient-via-pos\": [\n                {\n                    via: [\n                        gradientColorStopPositions\n                    ]\n                }\n            ],\n            /**\n       * Gradient Color Stops To Position\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */ \"gradient-to-pos\": [\n                {\n                    to: [\n                        gradientColorStopPositions\n                    ]\n                }\n            ],\n            /**\n       * Gradient Color Stops From\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */ \"gradient-from\": [\n                {\n                    from: [\n                        gradientColorStops\n                    ]\n                }\n            ],\n            /**\n       * Gradient Color Stops Via\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */ \"gradient-via\": [\n                {\n                    via: [\n                        gradientColorStops\n                    ]\n                }\n            ],\n            /**\n       * Gradient Color Stops To\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */ \"gradient-to\": [\n                {\n                    to: [\n                        gradientColorStops\n                    ]\n                }\n            ],\n            // Borders\n            /**\n       * Border Radius\n       * @see https://tailwindcss.com/docs/border-radius\n       */ rounded: [\n                {\n                    rounded: [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Start\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-s\": [\n                {\n                    \"rounded-s\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius End\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-e\": [\n                {\n                    \"rounded-e\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Top\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-t\": [\n                {\n                    \"rounded-t\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Right\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-r\": [\n                {\n                    \"rounded-r\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Bottom\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-b\": [\n                {\n                    \"rounded-b\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Left\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-l\": [\n                {\n                    \"rounded-l\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Start Start\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-ss\": [\n                {\n                    \"rounded-ss\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Start End\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-se\": [\n                {\n                    \"rounded-se\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius End End\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-ee\": [\n                {\n                    \"rounded-ee\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius End Start\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-es\": [\n                {\n                    \"rounded-es\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Top Left\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-tl\": [\n                {\n                    \"rounded-tl\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Top Right\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-tr\": [\n                {\n                    \"rounded-tr\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Bottom Right\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-br\": [\n                {\n                    \"rounded-br\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Bottom Left\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-bl\": [\n                {\n                    \"rounded-bl\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Width\n       * @see https://tailwindcss.com/docs/border-width\n       */ \"border-w\": [\n                {\n                    border: [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Border Width X\n       * @see https://tailwindcss.com/docs/border-width\n       */ \"border-w-x\": [\n                {\n                    \"border-x\": [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Border Width Y\n       * @see https://tailwindcss.com/docs/border-width\n       */ \"border-w-y\": [\n                {\n                    \"border-y\": [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Border Width Start\n       * @see https://tailwindcss.com/docs/border-width\n       */ \"border-w-s\": [\n                {\n                    \"border-s\": [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Border Width End\n       * @see https://tailwindcss.com/docs/border-width\n       */ \"border-w-e\": [\n                {\n                    \"border-e\": [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Border Width Top\n       * @see https://tailwindcss.com/docs/border-width\n       */ \"border-w-t\": [\n                {\n                    \"border-t\": [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Border Width Right\n       * @see https://tailwindcss.com/docs/border-width\n       */ \"border-w-r\": [\n                {\n                    \"border-r\": [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Border Width Bottom\n       * @see https://tailwindcss.com/docs/border-width\n       */ \"border-w-b\": [\n                {\n                    \"border-b\": [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Border Width Left\n       * @see https://tailwindcss.com/docs/border-width\n       */ \"border-w-l\": [\n                {\n                    \"border-l\": [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Border Opacity\n       * @see https://tailwindcss.com/docs/border-opacity\n       */ \"border-opacity\": [\n                {\n                    \"border-opacity\": [\n                        opacity\n                    ]\n                }\n            ],\n            /**\n       * Border Style\n       * @see https://tailwindcss.com/docs/border-style\n       */ \"border-style\": [\n                {\n                    border: [\n                        ...getLineStyles(),\n                        \"hidden\"\n                    ]\n                }\n            ],\n            /**\n       * Divide Width X\n       * @see https://tailwindcss.com/docs/divide-width\n       */ \"divide-x\": [\n                {\n                    \"divide-x\": [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Divide Width X Reverse\n       * @see https://tailwindcss.com/docs/divide-width\n       */ \"divide-x-reverse\": [\n                \"divide-x-reverse\"\n            ],\n            /**\n       * Divide Width Y\n       * @see https://tailwindcss.com/docs/divide-width\n       */ \"divide-y\": [\n                {\n                    \"divide-y\": [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Divide Width Y Reverse\n       * @see https://tailwindcss.com/docs/divide-width\n       */ \"divide-y-reverse\": [\n                \"divide-y-reverse\"\n            ],\n            /**\n       * Divide Opacity\n       * @see https://tailwindcss.com/docs/divide-opacity\n       */ \"divide-opacity\": [\n                {\n                    \"divide-opacity\": [\n                        opacity\n                    ]\n                }\n            ],\n            /**\n       * Divide Style\n       * @see https://tailwindcss.com/docs/divide-style\n       */ \"divide-style\": [\n                {\n                    divide: getLineStyles()\n                }\n            ],\n            /**\n       * Border Color\n       * @see https://tailwindcss.com/docs/border-color\n       */ \"border-color\": [\n                {\n                    border: [\n                        borderColor\n                    ]\n                }\n            ],\n            /**\n       * Border Color X\n       * @see https://tailwindcss.com/docs/border-color\n       */ \"border-color-x\": [\n                {\n                    \"border-x\": [\n                        borderColor\n                    ]\n                }\n            ],\n            /**\n       * Border Color Y\n       * @see https://tailwindcss.com/docs/border-color\n       */ \"border-color-y\": [\n                {\n                    \"border-y\": [\n                        borderColor\n                    ]\n                }\n            ],\n            /**\n       * Border Color S\n       * @see https://tailwindcss.com/docs/border-color\n       */ \"border-color-s\": [\n                {\n                    \"border-s\": [\n                        borderColor\n                    ]\n                }\n            ],\n            /**\n       * Border Color E\n       * @see https://tailwindcss.com/docs/border-color\n       */ \"border-color-e\": [\n                {\n                    \"border-e\": [\n                        borderColor\n                    ]\n                }\n            ],\n            /**\n       * Border Color Top\n       * @see https://tailwindcss.com/docs/border-color\n       */ \"border-color-t\": [\n                {\n                    \"border-t\": [\n                        borderColor\n                    ]\n                }\n            ],\n            /**\n       * Border Color Right\n       * @see https://tailwindcss.com/docs/border-color\n       */ \"border-color-r\": [\n                {\n                    \"border-r\": [\n                        borderColor\n                    ]\n                }\n            ],\n            /**\n       * Border Color Bottom\n       * @see https://tailwindcss.com/docs/border-color\n       */ \"border-color-b\": [\n                {\n                    \"border-b\": [\n                        borderColor\n                    ]\n                }\n            ],\n            /**\n       * Border Color Left\n       * @see https://tailwindcss.com/docs/border-color\n       */ \"border-color-l\": [\n                {\n                    \"border-l\": [\n                        borderColor\n                    ]\n                }\n            ],\n            /**\n       * Divide Color\n       * @see https://tailwindcss.com/docs/divide-color\n       */ \"divide-color\": [\n                {\n                    divide: [\n                        borderColor\n                    ]\n                }\n            ],\n            /**\n       * Outline Style\n       * @see https://tailwindcss.com/docs/outline-style\n       */ \"outline-style\": [\n                {\n                    outline: [\n                        \"\",\n                        ...getLineStyles()\n                    ]\n                }\n            ],\n            /**\n       * Outline Offset\n       * @see https://tailwindcss.com/docs/outline-offset\n       */ \"outline-offset\": [\n                {\n                    \"outline-offset\": [\n                        isLength,\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Outline Width\n       * @see https://tailwindcss.com/docs/outline-width\n       */ \"outline-w\": [\n                {\n                    outline: [\n                        isLength,\n                        isArbitraryLength\n                    ]\n                }\n            ],\n            /**\n       * Outline Color\n       * @see https://tailwindcss.com/docs/outline-color\n       */ \"outline-color\": [\n                {\n                    outline: [\n                        colors\n                    ]\n                }\n            ],\n            /**\n       * Ring Width\n       * @see https://tailwindcss.com/docs/ring-width\n       */ \"ring-w\": [\n                {\n                    ring: getLengthWithEmptyAndArbitrary()\n                }\n            ],\n            /**\n       * Ring Width Inset\n       * @see https://tailwindcss.com/docs/ring-width\n       */ \"ring-w-inset\": [\n                \"ring-inset\"\n            ],\n            /**\n       * Ring Color\n       * @see https://tailwindcss.com/docs/ring-color\n       */ \"ring-color\": [\n                {\n                    ring: [\n                        colors\n                    ]\n                }\n            ],\n            /**\n       * Ring Opacity\n       * @see https://tailwindcss.com/docs/ring-opacity\n       */ \"ring-opacity\": [\n                {\n                    \"ring-opacity\": [\n                        opacity\n                    ]\n                }\n            ],\n            /**\n       * Ring Offset Width\n       * @see https://tailwindcss.com/docs/ring-offset-width\n       */ \"ring-offset-w\": [\n                {\n                    \"ring-offset\": [\n                        isLength,\n                        isArbitraryLength\n                    ]\n                }\n            ],\n            /**\n       * Ring Offset Color\n       * @see https://tailwindcss.com/docs/ring-offset-color\n       */ \"ring-offset-color\": [\n                {\n                    \"ring-offset\": [\n                        colors\n                    ]\n                }\n            ],\n            // Effects\n            /**\n       * Box Shadow\n       * @see https://tailwindcss.com/docs/box-shadow\n       */ shadow: [\n                {\n                    shadow: [\n                        \"\",\n                        \"inner\",\n                        \"none\",\n                        isTshirtSize,\n                        isArbitraryShadow\n                    ]\n                }\n            ],\n            /**\n       * Box Shadow Color\n       * @see https://tailwindcss.com/docs/box-shadow-color\n       */ \"shadow-color\": [\n                {\n                    shadow: [\n                        isAny\n                    ]\n                }\n            ],\n            /**\n       * Opacity\n       * @see https://tailwindcss.com/docs/opacity\n       */ opacity: [\n                {\n                    opacity: [\n                        opacity\n                    ]\n                }\n            ],\n            /**\n       * Mix Blend Mode\n       * @see https://tailwindcss.com/docs/mix-blend-mode\n       */ \"mix-blend\": [\n                {\n                    \"mix-blend\": [\n                        ...getBlendModes(),\n                        \"plus-lighter\",\n                        \"plus-darker\"\n                    ]\n                }\n            ],\n            /**\n       * Background Blend Mode\n       * @see https://tailwindcss.com/docs/background-blend-mode\n       */ \"bg-blend\": [\n                {\n                    \"bg-blend\": getBlendModes()\n                }\n            ],\n            // Filters\n            /**\n       * Filter\n       * @deprecated since Tailwind CSS v3.0.0\n       * @see https://tailwindcss.com/docs/filter\n       */ filter: [\n                {\n                    filter: [\n                        \"\",\n                        \"none\"\n                    ]\n                }\n            ],\n            /**\n       * Blur\n       * @see https://tailwindcss.com/docs/blur\n       */ blur: [\n                {\n                    blur: [\n                        blur\n                    ]\n                }\n            ],\n            /**\n       * Brightness\n       * @see https://tailwindcss.com/docs/brightness\n       */ brightness: [\n                {\n                    brightness: [\n                        brightness\n                    ]\n                }\n            ],\n            /**\n       * Contrast\n       * @see https://tailwindcss.com/docs/contrast\n       */ contrast: [\n                {\n                    contrast: [\n                        contrast\n                    ]\n                }\n            ],\n            /**\n       * Drop Shadow\n       * @see https://tailwindcss.com/docs/drop-shadow\n       */ \"drop-shadow\": [\n                {\n                    \"drop-shadow\": [\n                        \"\",\n                        \"none\",\n                        isTshirtSize,\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Grayscale\n       * @see https://tailwindcss.com/docs/grayscale\n       */ grayscale: [\n                {\n                    grayscale: [\n                        grayscale\n                    ]\n                }\n            ],\n            /**\n       * Hue Rotate\n       * @see https://tailwindcss.com/docs/hue-rotate\n       */ \"hue-rotate\": [\n                {\n                    \"hue-rotate\": [\n                        hueRotate\n                    ]\n                }\n            ],\n            /**\n       * Invert\n       * @see https://tailwindcss.com/docs/invert\n       */ invert: [\n                {\n                    invert: [\n                        invert\n                    ]\n                }\n            ],\n            /**\n       * Saturate\n       * @see https://tailwindcss.com/docs/saturate\n       */ saturate: [\n                {\n                    saturate: [\n                        saturate\n                    ]\n                }\n            ],\n            /**\n       * Sepia\n       * @see https://tailwindcss.com/docs/sepia\n       */ sepia: [\n                {\n                    sepia: [\n                        sepia\n                    ]\n                }\n            ],\n            /**\n       * Backdrop Filter\n       * @deprecated since Tailwind CSS v3.0.0\n       * @see https://tailwindcss.com/docs/backdrop-filter\n       */ \"backdrop-filter\": [\n                {\n                    \"backdrop-filter\": [\n                        \"\",\n                        \"none\"\n                    ]\n                }\n            ],\n            /**\n       * Backdrop Blur\n       * @see https://tailwindcss.com/docs/backdrop-blur\n       */ \"backdrop-blur\": [\n                {\n                    \"backdrop-blur\": [\n                        blur\n                    ]\n                }\n            ],\n            /**\n       * Backdrop Brightness\n       * @see https://tailwindcss.com/docs/backdrop-brightness\n       */ \"backdrop-brightness\": [\n                {\n                    \"backdrop-brightness\": [\n                        brightness\n                    ]\n                }\n            ],\n            /**\n       * Backdrop Contrast\n       * @see https://tailwindcss.com/docs/backdrop-contrast\n       */ \"backdrop-contrast\": [\n                {\n                    \"backdrop-contrast\": [\n                        contrast\n                    ]\n                }\n            ],\n            /**\n       * Backdrop Grayscale\n       * @see https://tailwindcss.com/docs/backdrop-grayscale\n       */ \"backdrop-grayscale\": [\n                {\n                    \"backdrop-grayscale\": [\n                        grayscale\n                    ]\n                }\n            ],\n            /**\n       * Backdrop Hue Rotate\n       * @see https://tailwindcss.com/docs/backdrop-hue-rotate\n       */ \"backdrop-hue-rotate\": [\n                {\n                    \"backdrop-hue-rotate\": [\n                        hueRotate\n                    ]\n                }\n            ],\n            /**\n       * Backdrop Invert\n       * @see https://tailwindcss.com/docs/backdrop-invert\n       */ \"backdrop-invert\": [\n                {\n                    \"backdrop-invert\": [\n                        invert\n                    ]\n                }\n            ],\n            /**\n       * Backdrop Opacity\n       * @see https://tailwindcss.com/docs/backdrop-opacity\n       */ \"backdrop-opacity\": [\n                {\n                    \"backdrop-opacity\": [\n                        opacity\n                    ]\n                }\n            ],\n            /**\n       * Backdrop Saturate\n       * @see https://tailwindcss.com/docs/backdrop-saturate\n       */ \"backdrop-saturate\": [\n                {\n                    \"backdrop-saturate\": [\n                        saturate\n                    ]\n                }\n            ],\n            /**\n       * Backdrop Sepia\n       * @see https://tailwindcss.com/docs/backdrop-sepia\n       */ \"backdrop-sepia\": [\n                {\n                    \"backdrop-sepia\": [\n                        sepia\n                    ]\n                }\n            ],\n            // Tables\n            /**\n       * Border Collapse\n       * @see https://tailwindcss.com/docs/border-collapse\n       */ \"border-collapse\": [\n                {\n                    border: [\n                        \"collapse\",\n                        \"separate\"\n                    ]\n                }\n            ],\n            /**\n       * Border Spacing\n       * @see https://tailwindcss.com/docs/border-spacing\n       */ \"border-spacing\": [\n                {\n                    \"border-spacing\": [\n                        borderSpacing\n                    ]\n                }\n            ],\n            /**\n       * Border Spacing X\n       * @see https://tailwindcss.com/docs/border-spacing\n       */ \"border-spacing-x\": [\n                {\n                    \"border-spacing-x\": [\n                        borderSpacing\n                    ]\n                }\n            ],\n            /**\n       * Border Spacing Y\n       * @see https://tailwindcss.com/docs/border-spacing\n       */ \"border-spacing-y\": [\n                {\n                    \"border-spacing-y\": [\n                        borderSpacing\n                    ]\n                }\n            ],\n            /**\n       * Table Layout\n       * @see https://tailwindcss.com/docs/table-layout\n       */ \"table-layout\": [\n                {\n                    table: [\n                        \"auto\",\n                        \"fixed\"\n                    ]\n                }\n            ],\n            /**\n       * Caption Side\n       * @see https://tailwindcss.com/docs/caption-side\n       */ caption: [\n                {\n                    caption: [\n                        \"top\",\n                        \"bottom\"\n                    ]\n                }\n            ],\n            // Transitions and Animation\n            /**\n       * Tranisition Property\n       * @see https://tailwindcss.com/docs/transition-property\n       */ transition: [\n                {\n                    transition: [\n                        \"none\",\n                        \"all\",\n                        \"\",\n                        \"colors\",\n                        \"opacity\",\n                        \"shadow\",\n                        \"transform\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Transition Duration\n       * @see https://tailwindcss.com/docs/transition-duration\n       */ duration: [\n                {\n                    duration: getNumberAndArbitrary()\n                }\n            ],\n            /**\n       * Transition Timing Function\n       * @see https://tailwindcss.com/docs/transition-timing-function\n       */ ease: [\n                {\n                    ease: [\n                        \"linear\",\n                        \"in\",\n                        \"out\",\n                        \"in-out\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Transition Delay\n       * @see https://tailwindcss.com/docs/transition-delay\n       */ delay: [\n                {\n                    delay: getNumberAndArbitrary()\n                }\n            ],\n            /**\n       * Animation\n       * @see https://tailwindcss.com/docs/animation\n       */ animate: [\n                {\n                    animate: [\n                        \"none\",\n                        \"spin\",\n                        \"ping\",\n                        \"pulse\",\n                        \"bounce\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            // Transforms\n            /**\n       * Transform\n       * @see https://tailwindcss.com/docs/transform\n       */ transform: [\n                {\n                    transform: [\n                        \"\",\n                        \"gpu\",\n                        \"none\"\n                    ]\n                }\n            ],\n            /**\n       * Scale\n       * @see https://tailwindcss.com/docs/scale\n       */ scale: [\n                {\n                    scale: [\n                        scale\n                    ]\n                }\n            ],\n            /**\n       * Scale X\n       * @see https://tailwindcss.com/docs/scale\n       */ \"scale-x\": [\n                {\n                    \"scale-x\": [\n                        scale\n                    ]\n                }\n            ],\n            /**\n       * Scale Y\n       * @see https://tailwindcss.com/docs/scale\n       */ \"scale-y\": [\n                {\n                    \"scale-y\": [\n                        scale\n                    ]\n                }\n            ],\n            /**\n       * Rotate\n       * @see https://tailwindcss.com/docs/rotate\n       */ rotate: [\n                {\n                    rotate: [\n                        isInteger,\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Translate X\n       * @see https://tailwindcss.com/docs/translate\n       */ \"translate-x\": [\n                {\n                    \"translate-x\": [\n                        translate\n                    ]\n                }\n            ],\n            /**\n       * Translate Y\n       * @see https://tailwindcss.com/docs/translate\n       */ \"translate-y\": [\n                {\n                    \"translate-y\": [\n                        translate\n                    ]\n                }\n            ],\n            /**\n       * Skew X\n       * @see https://tailwindcss.com/docs/skew\n       */ \"skew-x\": [\n                {\n                    \"skew-x\": [\n                        skew\n                    ]\n                }\n            ],\n            /**\n       * Skew Y\n       * @see https://tailwindcss.com/docs/skew\n       */ \"skew-y\": [\n                {\n                    \"skew-y\": [\n                        skew\n                    ]\n                }\n            ],\n            /**\n       * Transform Origin\n       * @see https://tailwindcss.com/docs/transform-origin\n       */ \"transform-origin\": [\n                {\n                    origin: [\n                        \"center\",\n                        \"top\",\n                        \"top-right\",\n                        \"right\",\n                        \"bottom-right\",\n                        \"bottom\",\n                        \"bottom-left\",\n                        \"left\",\n                        \"top-left\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            // Interactivity\n            /**\n       * Accent Color\n       * @see https://tailwindcss.com/docs/accent-color\n       */ accent: [\n                {\n                    accent: [\n                        \"auto\",\n                        colors\n                    ]\n                }\n            ],\n            /**\n       * Appearance\n       * @see https://tailwindcss.com/docs/appearance\n       */ appearance: [\n                {\n                    appearance: [\n                        \"none\",\n                        \"auto\"\n                    ]\n                }\n            ],\n            /**\n       * Cursor\n       * @see https://tailwindcss.com/docs/cursor\n       */ cursor: [\n                {\n                    cursor: [\n                        \"auto\",\n                        \"default\",\n                        \"pointer\",\n                        \"wait\",\n                        \"text\",\n                        \"move\",\n                        \"help\",\n                        \"not-allowed\",\n                        \"none\",\n                        \"context-menu\",\n                        \"progress\",\n                        \"cell\",\n                        \"crosshair\",\n                        \"vertical-text\",\n                        \"alias\",\n                        \"copy\",\n                        \"no-drop\",\n                        \"grab\",\n                        \"grabbing\",\n                        \"all-scroll\",\n                        \"col-resize\",\n                        \"row-resize\",\n                        \"n-resize\",\n                        \"e-resize\",\n                        \"s-resize\",\n                        \"w-resize\",\n                        \"ne-resize\",\n                        \"nw-resize\",\n                        \"se-resize\",\n                        \"sw-resize\",\n                        \"ew-resize\",\n                        \"ns-resize\",\n                        \"nesw-resize\",\n                        \"nwse-resize\",\n                        \"zoom-in\",\n                        \"zoom-out\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Caret Color\n       * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities\n       */ \"caret-color\": [\n                {\n                    caret: [\n                        colors\n                    ]\n                }\n            ],\n            /**\n       * Pointer Events\n       * @see https://tailwindcss.com/docs/pointer-events\n       */ \"pointer-events\": [\n                {\n                    \"pointer-events\": [\n                        \"none\",\n                        \"auto\"\n                    ]\n                }\n            ],\n            /**\n       * Resize\n       * @see https://tailwindcss.com/docs/resize\n       */ resize: [\n                {\n                    resize: [\n                        \"none\",\n                        \"y\",\n                        \"x\",\n                        \"\"\n                    ]\n                }\n            ],\n            /**\n       * Scroll Behavior\n       * @see https://tailwindcss.com/docs/scroll-behavior\n       */ \"scroll-behavior\": [\n                {\n                    scroll: [\n                        \"auto\",\n                        \"smooth\"\n                    ]\n                }\n            ],\n            /**\n       * Scroll Margin\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */ \"scroll-m\": [\n                {\n                    \"scroll-m\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Margin X\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */ \"scroll-mx\": [\n                {\n                    \"scroll-mx\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Margin Y\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */ \"scroll-my\": [\n                {\n                    \"scroll-my\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Margin Start\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */ \"scroll-ms\": [\n                {\n                    \"scroll-ms\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Margin End\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */ \"scroll-me\": [\n                {\n                    \"scroll-me\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Margin Top\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */ \"scroll-mt\": [\n                {\n                    \"scroll-mt\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Margin Right\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */ \"scroll-mr\": [\n                {\n                    \"scroll-mr\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Margin Bottom\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */ \"scroll-mb\": [\n                {\n                    \"scroll-mb\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Margin Left\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */ \"scroll-ml\": [\n                {\n                    \"scroll-ml\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Padding\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */ \"scroll-p\": [\n                {\n                    \"scroll-p\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Padding X\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */ \"scroll-px\": [\n                {\n                    \"scroll-px\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Padding Y\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */ \"scroll-py\": [\n                {\n                    \"scroll-py\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Padding Start\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */ \"scroll-ps\": [\n                {\n                    \"scroll-ps\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Padding End\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */ \"scroll-pe\": [\n                {\n                    \"scroll-pe\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Padding Top\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */ \"scroll-pt\": [\n                {\n                    \"scroll-pt\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Padding Right\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */ \"scroll-pr\": [\n                {\n                    \"scroll-pr\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Padding Bottom\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */ \"scroll-pb\": [\n                {\n                    \"scroll-pb\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Padding Left\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */ \"scroll-pl\": [\n                {\n                    \"scroll-pl\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Snap Align\n       * @see https://tailwindcss.com/docs/scroll-snap-align\n       */ \"snap-align\": [\n                {\n                    snap: [\n                        \"start\",\n                        \"end\",\n                        \"center\",\n                        \"align-none\"\n                    ]\n                }\n            ],\n            /**\n       * Scroll Snap Stop\n       * @see https://tailwindcss.com/docs/scroll-snap-stop\n       */ \"snap-stop\": [\n                {\n                    snap: [\n                        \"normal\",\n                        \"always\"\n                    ]\n                }\n            ],\n            /**\n       * Scroll Snap Type\n       * @see https://tailwindcss.com/docs/scroll-snap-type\n       */ \"snap-type\": [\n                {\n                    snap: [\n                        \"none\",\n                        \"x\",\n                        \"y\",\n                        \"both\"\n                    ]\n                }\n            ],\n            /**\n       * Scroll Snap Type Strictness\n       * @see https://tailwindcss.com/docs/scroll-snap-type\n       */ \"snap-strictness\": [\n                {\n                    snap: [\n                        \"mandatory\",\n                        \"proximity\"\n                    ]\n                }\n            ],\n            /**\n       * Touch Action\n       * @see https://tailwindcss.com/docs/touch-action\n       */ touch: [\n                {\n                    touch: [\n                        \"auto\",\n                        \"none\",\n                        \"manipulation\"\n                    ]\n                }\n            ],\n            /**\n       * Touch Action X\n       * @see https://tailwindcss.com/docs/touch-action\n       */ \"touch-x\": [\n                {\n                    \"touch-pan\": [\n                        \"x\",\n                        \"left\",\n                        \"right\"\n                    ]\n                }\n            ],\n            /**\n       * Touch Action Y\n       * @see https://tailwindcss.com/docs/touch-action\n       */ \"touch-y\": [\n                {\n                    \"touch-pan\": [\n                        \"y\",\n                        \"up\",\n                        \"down\"\n                    ]\n                }\n            ],\n            /**\n       * Touch Action Pinch Zoom\n       * @see https://tailwindcss.com/docs/touch-action\n       */ \"touch-pz\": [\n                \"touch-pinch-zoom\"\n            ],\n            /**\n       * User Select\n       * @see https://tailwindcss.com/docs/user-select\n       */ select: [\n                {\n                    select: [\n                        \"none\",\n                        \"text\",\n                        \"all\",\n                        \"auto\"\n                    ]\n                }\n            ],\n            /**\n       * Will Change\n       * @see https://tailwindcss.com/docs/will-change\n       */ \"will-change\": [\n                {\n                    \"will-change\": [\n                        \"auto\",\n                        \"scroll\",\n                        \"contents\",\n                        \"transform\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            // SVG\n            /**\n       * Fill\n       * @see https://tailwindcss.com/docs/fill\n       */ fill: [\n                {\n                    fill: [\n                        colors,\n                        \"none\"\n                    ]\n                }\n            ],\n            /**\n       * Stroke Width\n       * @see https://tailwindcss.com/docs/stroke-width\n       */ \"stroke-w\": [\n                {\n                    stroke: [\n                        isLength,\n                        isArbitraryLength,\n                        isArbitraryNumber\n                    ]\n                }\n            ],\n            /**\n       * Stroke\n       * @see https://tailwindcss.com/docs/stroke\n       */ stroke: [\n                {\n                    stroke: [\n                        colors,\n                        \"none\"\n                    ]\n                }\n            ],\n            // Accessibility\n            /**\n       * Screen Readers\n       * @see https://tailwindcss.com/docs/screen-readers\n       */ sr: [\n                \"sr-only\",\n                \"not-sr-only\"\n            ],\n            /**\n       * Forced Color Adjust\n       * @see https://tailwindcss.com/docs/forced-color-adjust\n       */ \"forced-color-adjust\": [\n                {\n                    \"forced-color-adjust\": [\n                        \"auto\",\n                        \"none\"\n                    ]\n                }\n            ]\n        },\n        conflictingClassGroups: {\n            overflow: [\n                \"overflow-x\",\n                \"overflow-y\"\n            ],\n            overscroll: [\n                \"overscroll-x\",\n                \"overscroll-y\"\n            ],\n            inset: [\n                \"inset-x\",\n                \"inset-y\",\n                \"start\",\n                \"end\",\n                \"top\",\n                \"right\",\n                \"bottom\",\n                \"left\"\n            ],\n            \"inset-x\": [\n                \"right\",\n                \"left\"\n            ],\n            \"inset-y\": [\n                \"top\",\n                \"bottom\"\n            ],\n            flex: [\n                \"basis\",\n                \"grow\",\n                \"shrink\"\n            ],\n            gap: [\n                \"gap-x\",\n                \"gap-y\"\n            ],\n            p: [\n                \"px\",\n                \"py\",\n                \"ps\",\n                \"pe\",\n                \"pt\",\n                \"pr\",\n                \"pb\",\n                \"pl\"\n            ],\n            px: [\n                \"pr\",\n                \"pl\"\n            ],\n            py: [\n                \"pt\",\n                \"pb\"\n            ],\n            m: [\n                \"mx\",\n                \"my\",\n                \"ms\",\n                \"me\",\n                \"mt\",\n                \"mr\",\n                \"mb\",\n                \"ml\"\n            ],\n            mx: [\n                \"mr\",\n                \"ml\"\n            ],\n            my: [\n                \"mt\",\n                \"mb\"\n            ],\n            size: [\n                \"w\",\n                \"h\"\n            ],\n            \"font-size\": [\n                \"leading\"\n            ],\n            \"fvn-normal\": [\n                \"fvn-ordinal\",\n                \"fvn-slashed-zero\",\n                \"fvn-figure\",\n                \"fvn-spacing\",\n                \"fvn-fraction\"\n            ],\n            \"fvn-ordinal\": [\n                \"fvn-normal\"\n            ],\n            \"fvn-slashed-zero\": [\n                \"fvn-normal\"\n            ],\n            \"fvn-figure\": [\n                \"fvn-normal\"\n            ],\n            \"fvn-spacing\": [\n                \"fvn-normal\"\n            ],\n            \"fvn-fraction\": [\n                \"fvn-normal\"\n            ],\n            \"line-clamp\": [\n                \"display\",\n                \"overflow\"\n            ],\n            rounded: [\n                \"rounded-s\",\n                \"rounded-e\",\n                \"rounded-t\",\n                \"rounded-r\",\n                \"rounded-b\",\n                \"rounded-l\",\n                \"rounded-ss\",\n                \"rounded-se\",\n                \"rounded-ee\",\n                \"rounded-es\",\n                \"rounded-tl\",\n                \"rounded-tr\",\n                \"rounded-br\",\n                \"rounded-bl\"\n            ],\n            \"rounded-s\": [\n                \"rounded-ss\",\n                \"rounded-es\"\n            ],\n            \"rounded-e\": [\n                \"rounded-se\",\n                \"rounded-ee\"\n            ],\n            \"rounded-t\": [\n                \"rounded-tl\",\n                \"rounded-tr\"\n            ],\n            \"rounded-r\": [\n                \"rounded-tr\",\n                \"rounded-br\"\n            ],\n            \"rounded-b\": [\n                \"rounded-br\",\n                \"rounded-bl\"\n            ],\n            \"rounded-l\": [\n                \"rounded-tl\",\n                \"rounded-bl\"\n            ],\n            \"border-spacing\": [\n                \"border-spacing-x\",\n                \"border-spacing-y\"\n            ],\n            \"border-w\": [\n                \"border-w-s\",\n                \"border-w-e\",\n                \"border-w-t\",\n                \"border-w-r\",\n                \"border-w-b\",\n                \"border-w-l\"\n            ],\n            \"border-w-x\": [\n                \"border-w-r\",\n                \"border-w-l\"\n            ],\n            \"border-w-y\": [\n                \"border-w-t\",\n                \"border-w-b\"\n            ],\n            \"border-color\": [\n                \"border-color-s\",\n                \"border-color-e\",\n                \"border-color-t\",\n                \"border-color-r\",\n                \"border-color-b\",\n                \"border-color-l\"\n            ],\n            \"border-color-x\": [\n                \"border-color-r\",\n                \"border-color-l\"\n            ],\n            \"border-color-y\": [\n                \"border-color-t\",\n                \"border-color-b\"\n            ],\n            \"scroll-m\": [\n                \"scroll-mx\",\n                \"scroll-my\",\n                \"scroll-ms\",\n                \"scroll-me\",\n                \"scroll-mt\",\n                \"scroll-mr\",\n                \"scroll-mb\",\n                \"scroll-ml\"\n            ],\n            \"scroll-mx\": [\n                \"scroll-mr\",\n                \"scroll-ml\"\n            ],\n            \"scroll-my\": [\n                \"scroll-mt\",\n                \"scroll-mb\"\n            ],\n            \"scroll-p\": [\n                \"scroll-px\",\n                \"scroll-py\",\n                \"scroll-ps\",\n                \"scroll-pe\",\n                \"scroll-pt\",\n                \"scroll-pr\",\n                \"scroll-pb\",\n                \"scroll-pl\"\n            ],\n            \"scroll-px\": [\n                \"scroll-pr\",\n                \"scroll-pl\"\n            ],\n            \"scroll-py\": [\n                \"scroll-pt\",\n                \"scroll-pb\"\n            ],\n            touch: [\n                \"touch-x\",\n                \"touch-y\",\n                \"touch-pz\"\n            ],\n            \"touch-x\": [\n                \"touch\"\n            ],\n            \"touch-y\": [\n                \"touch\"\n            ],\n            \"touch-pz\": [\n                \"touch\"\n            ]\n        },\n        conflictingClassGroupModifiers: {\n            \"font-size\": [\n                \"leading\"\n            ]\n        }\n    };\n};\n/**\n * @param baseConfig Config where other config will be merged into. This object will be mutated.\n * @param configExtension Partial config to merge into the `baseConfig`.\n */ const mergeConfigs = (baseConfig, param)=>{\n    let { cacheSize, prefix, separator, experimentalParseClassName, extend = {}, override = {} } = param;\n    overrideProperty(baseConfig, \"cacheSize\", cacheSize);\n    overrideProperty(baseConfig, \"prefix\", prefix);\n    overrideProperty(baseConfig, \"separator\", separator);\n    overrideProperty(baseConfig, \"experimentalParseClassName\", experimentalParseClassName);\n    for(const configKey in override){\n        overrideConfigProperties(baseConfig[configKey], override[configKey]);\n    }\n    for(const key in extend){\n        mergeConfigProperties(baseConfig[key], extend[key]);\n    }\n    return baseConfig;\n};\nconst overrideProperty = (baseObject, overrideKey, overrideValue)=>{\n    if (overrideValue !== undefined) {\n        baseObject[overrideKey] = overrideValue;\n    }\n};\nconst overrideConfigProperties = (baseObject, overrideObject)=>{\n    if (overrideObject) {\n        for(const key in overrideObject){\n            overrideProperty(baseObject, key, overrideObject[key]);\n        }\n    }\n};\nconst mergeConfigProperties = (baseObject, mergeObject)=>{\n    if (mergeObject) {\n        for(const key in mergeObject){\n            const mergeValue = mergeObject[key];\n            if (mergeValue !== undefined) {\n                baseObject[key] = (baseObject[key] || []).concat(mergeValue);\n            }\n        }\n    }\n};\nconst extendTailwindMerge = function(configExtension) {\n    for(var _len = arguments.length, createConfig = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        createConfig[_key - 1] = arguments[_key];\n    }\n    return typeof configExtension === \"function\" ? createTailwindMerge(getDefaultConfig, configExtension, ...createConfig) : createTailwindMerge(()=>mergeConfigs(getDefaultConfig(), configExtension), ...createConfig);\n};\nconst twMerge = /*#__PURE__*/ createTailwindMerge(getDefaultConfig);\n //# sourceMappingURL=bundle-mjs.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/tailwind-merge/dist/bundle-mjs.mjs\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["main-app"], function() { return __webpack_exec__("(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Fjamison%2FDesktop%2Fneural-octopus%2Fapp%2Fsettings%2Fpage.tsx&server=false!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);